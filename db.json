{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ciazhar.png","path":"images/ciazhar.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/android.png","path":"images/android.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/hexo.png","path":"images/hexo.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/springboot.png","path":"images/springboot.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/angular.png","path":"images/angular.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/photo366748288653830057.jpg","path":"images/photo366748288653830057.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/spring.png","path":"images/spring.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/kontak-person.png","path":"images/kritik-kpm-udinus/kontak-person.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/agenda.png","path":"images/kritik-kpm-udinus/agenda.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/pencarian.png","path":"images/kritik-kpm-udinus/pencarian.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/index.png","path":"images/kritik-kpm-udinus/index.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/foto.png","path":"images/kritik-kpm-udinus/foto.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/cyclic-network-menu.png","path":"images/ui-ux/menu/cyclic-network-menu.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/acyclic-network-menu.png","path":"images/ui-ux/menu/acyclic-network-menu.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/multiple-item.png","path":"images/ui-ux/menu/multiple-item.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/multiple-selection.png","path":"images/ui-ux/menu/multiple-selection.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/sambutan-kepala.png","path":"images/kritik-kpm-udinus/sambutan-kepala.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/copyright.png","path":"images/kritik-kpm-udinus/copyright.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/binary-menu.png","path":"images/ui-ux/menu/binary-menu.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/embedded-links.png","path":"images/ui-ux/menu/embedded-links.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/linier-sequence.png","path":"images/ui-ux/menu/linier-sequence.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/pull-down-dan-pop-up.png","path":"images/ui-ux/menu/pull-down-dan-pop-up.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/lamankosong.png","path":"images/kritik-kpm-udinus/lamankosong.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/menu-maps.png","path":"images/ui-ux/menu/menu-maps.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/simultaneus-menu.png","path":"images/ui-ux/menu/simultaneus-menu.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/Ui-Ux.jpg","path":"images/ui-ux/Ui-Ux.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","path":"libs/jquery/2.0.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/cp.png","path":"images/kritik-kpm-udinus/cp.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/home.png","path":"images/kritik-kpm-udinus/home.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/alphasliders.png","path":"images/ui-ux/menu/alphasliders.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/tree-structured-menus.png","path":"images/ui-ux/menu/tree-structured-menus.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/scrolling.png","path":"images/ui-ux/menu/scrolling.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/images/ui-ux/menu/iconic-menu.png","path":"images/ui-ux/menu/iconic-menu.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1489280179000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1489280179000},{"_id":"themes/hueman/package.json","hash":"d4ff853568e592265c2c9a21ce358f15babec14a","modified":1489280179000},{"_id":"themes/hueman/_config.yml","hash":"62eaf92c47b9bacdf19c2f290bb78124eaf163a0","modified":1502722800000},{"_id":"source/_posts/jvisual-vm.md","hash":"78fb0bbdb3b934df96c893b090c63b9503ccac0f","modified":1504394892555},{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1489280179000},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1489280179000},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1489280179000},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1489280179000},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1489280179000},{"_id":"source/about/index.md","hash":"c60da397aff229ec4527ac8f66f93384aae06654","modified":1492123862303},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1489280179000},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1489280179000},{"_id":"themes/hueman/languages/ko.yml","hash":"81ea44ecda87a4398bb6d88a3b02f6b73c9a1637","modified":1489280179000},{"_id":"themes/hueman/languages/en.yml","hash":"a36ed76a9cd48c15065df5ab540b2359b7c0c80b","modified":1495377461467},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1489280179000},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1489280179000},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1489280179000},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1489280179000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"05737aa022a007b97034a9d9fc80e606d5a25598","modified":1489280179000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1489280179000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1489280179000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1489280179000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1489280179000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1489280179000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1489280179000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1489280179000},{"_id":"themes/hueman/layout/index.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1489838179712},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1489280179000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1490101180340},{"_id":"source/_posts/linux/command-linux.md","hash":"77bf91707b9a0c11978929ed2219759e2f3d2fc9","modified":1508074646363},{"_id":"source/_posts/linux/membuat-laucher-di-linux.md","hash":"70249027fa3835acef909eca497398848751abed","modified":1508076325475},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"5a65e9ef8d225ff789f6e8719aabfc49983da0cd","modified":1489280179000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1489280179000},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1489280179000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"1ecc5ba82ae4236da7635a58d4584fd67f6f1fc3","modified":1489280179000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1489280179000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1489280179000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"94369b0078a61f6f07264f686cef1cede0fd1997","modified":1489280179000},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1489280179000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1489280179000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"4d01bd3d28820936b0d09529b60e9d6930afc9fe","modified":1490101180340},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1489280179000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"dacc29256a51d4867c662b6f1805d0d7652de45d","modified":1489280179000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1489280179000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1489280179000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1489838533968},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"9cd23dad02bf0c8cc92316ea90c76da520e2a716","modified":1492946116647},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"42d6f99906ae96a6d00ee9a727405e47ec5e7c81","modified":1489280179000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1489280179000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1489280179000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"5c74d66cbda8c5d6c37ee04cc6585005815bc6cf","modified":1489280179000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1489280179000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1489280179000},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1489280179000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1489280179000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1489280179000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1489280179000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1489280179000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1489280179000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1489280179000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1489280179000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1489280179000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1489280179000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1489280179000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1489280179000},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1489280179000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1489280179000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1489280179000},{"_id":"themes/hueman/layout/widget/profile.ejs","hash":"53ed20a56e6e31ba7d69066366364353dfa55479","modified":1495377353635},{"_id":"themes/hueman/layout/widget/imk.ejs","hash":"460a5e76a50a4fea8bb6664e1ed3024836c886e7","modified":1492941435400},{"_id":"themes/hueman/source/css/_extend.styl","hash":"c2160499dc89c524ff17cd2e3fcbb8df83ebca1a","modified":1489280179000},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1489280179000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"ce03de3658b55b5f90bb4dd18679be18ec38acaa","modified":1489280179000},{"_id":"themes/hueman/source/images/ciazhar.png","hash":"3e87af7a3b01fb29684431b2c4fcca4cfa21836b","modified":1492190030333},{"_id":"themes/hueman/source/images/android.png","hash":"0edf5c9e2281facd1e9610999f28809d4003368b","modified":1494148768326},{"_id":"themes/hueman/source/images/hexo.png","hash":"be31e741f29e8f276fc4488522764b645f145737","modified":1494148627538},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1492947836403},{"_id":"themes/hueman/source/images/springboot.png","hash":"cdc0bba7672b836f9c42306a17a9625524780fb2","modified":1494148454603},{"_id":"themes/hueman/source/images/angular.png","hash":"f0191f8d50460c560d9e28b29e849b4f44ed0bf4","modified":1494148569560},{"_id":"themes/hueman/source/images/photo366748288653830057.jpg","hash":"b75ccea4fad3e025a0e8bef4048ba699fd574d3e","modified":1485567803071},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1489280179000},{"_id":"themes/hueman/source/js/main.js","hash":"a15519ae8a397557cc594e8fb2f34fa9468f70fa","modified":1489280179000},{"_id":"themes/hueman/source/images/spring.png","hash":"7706ae26c11e26f8b1c0758b72a3e782f63ede5b","modified":1494149231119},{"_id":"source/_posts/kuliah/imk/ui-ux-Error-Handling.md","hash":"a83fc41cb9b666124da7604d554f3e51f531a0a0","modified":1497841413464},{"_id":"source/_posts/kuliah/imk/ui-ux-Response-Time.md","hash":"a96f73222079f6551476fcf069633d2be132e909","modified":1497841733136},{"_id":"source/_posts/kuliah/imk/ui-ux-User-Documentation.md","hash":"cf8c7f151bed5d9ae9be290465d6f3cec8503ea1","modified":1497842950762},{"_id":"source/_posts/kuliah/imk/ui-ux_menu.md","hash":"66062948875e4eec27b4dba9ff0fe885c9da7bef","modified":1492347431760},{"_id":"source/_posts/kuliah/imk/ui-ux_common-language-and-natural-language.md","hash":"d4b72cbb717206c02e4faef7c296561355b76536","modified":1492347446308},{"_id":"source/_posts/kuliah/imk/ui-ux-fill-in-form-dan-function-key.md","hash":"c9024c941775754629f4729ab4dda2da2b9815d4","modified":1492347437744},{"_id":"source/_posts/kuliah/orakom/orakom_bagaimana-perangkat-elektronik-berjalan.md","hash":"a5c572287658b4404bda2e741884b41c2086e19f","modified":1492605475264},{"_id":"source/_posts/kuliah/imk/Kritik-dan-Saran-terhadap-Website-KPM-Udinus.md","hash":"79bff338717986724cf996dbc773960441ad313c","modified":1492347460772},{"_id":"source/_posts/pemrograman/android/0-Introduction-to-Android.md","hash":"3a3870d10f33c38dd70f5c3c51025a8bf73d81d5","modified":1497843284422},{"_id":"source/_posts/pemrograman/android/two-activity.md","hash":"556080c06b249fc0555aa431427128792684c933","modified":1505805158000},{"_id":"source/_posts/kuliah/orakom/orakom-bagian-processor.md","hash":"9d3f96bec792b5bf66011f8869a269c9165b3bce","modified":1492436703945},{"_id":"source/_posts/kuliah/orakom/orakom-sistem-bilangan.md","hash":"d4db9b98a54e6594d85e0089d400f31b5dd00936","modified":1492435321888},{"_id":"source/_posts/pemrograman/angular/0-Introduction-to-Angular2.md","hash":"2e559d5366bc111a679125defdadcbb424c6bfac","modified":1495376536783},{"_id":"source/_posts/pemrograman/angular/1-Setup-Project-Angular2.md","hash":"ded92b8943ee1ca95657a5fe1c2fe8fb9511a703","modified":1494716397430},{"_id":"source/_posts/pemrograman/android/1-view.md","hash":"ad42137a95e71877f528be140f356d3323774275","modified":1497843230519},{"_id":"source/_posts/pemrograman/angular/2-Component-dan-Module.md","hash":"b8896d0239119c0d6fc0ec3dac8c78e119c60fc0","modified":1495207592778},{"_id":"source/_posts/pemrograman/angular/3-Routing.md","hash":"e2e700e48a5f36d180335a5f0ff0f1bf60fa1a4e","modified":1495207722165},{"_id":"source/_posts/pemrograman/hexo/0-Introduction-to-Hexo.md","hash":"e5f0e03a322d7c0fb56d7e46f4de9c3ab7f59600","modified":1494253101971},{"_id":"source/_posts/pemrograman/spring/test.md","hash":"284e2a3ad8142e80cbf0d47472820eef8f6a6963","modified":1508074486346},{"_id":"source/_posts/pemrograman/vertx/config-port.md","hash":"59bd6ae964b1926bd67aa1fb8d74f318284ec89f","modified":1503896234038},{"_id":"source/_posts/pemrograman/vertx/security.md","hash":"77d7d3c7f4b0abb037eb421965e01b55c9e50ef5","modified":1503909883399},{"_id":"source/_posts/pemrograman/vertx/vertx.md","hash":"2634aac3629f6017d36e6fd3f4c6269a49d0fa32","modified":1503896204997},{"_id":"source/_posts/pemrograman/angular/4-Service.md","hash":"47d17c4bbe559f186c7b0511af34f63ed379adf3","modified":1495376295243},{"_id":"source/_posts/pemrograman/hexo/1-Setup-Project-Hexo.md","hash":"4122dcc08354e476107ba471474a106f33bae5ce","modified":1494149825343},{"_id":"source/_posts/pemrograman/angular/5-Auth-Service.md","hash":"3ebe0d88b87f2fc14e49d8a784caf1882af73562","modified":1495623865170},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1489280179000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"198f75157a776b3e05eeb5da85b14a42027bd524","modified":1489280179000},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1489280179000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1489280179000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1489280179000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"1df1b76979f923b4c7fa39b8679fe234340aac11","modified":1489887145454},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1489280179000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1489280179000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1489280179000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1489280179000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1489280179000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1489280179000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1489280179000},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/kontak-person.png","hash":"201eafbf0a775c2f5a11bd8b9b0699d0e8069cda","modified":1492184340108},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1489280179000},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1489280179000},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1489280179000},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/agenda.png","hash":"0a51d167859470c9c7420f2afbb476e9ca4e3831","modified":1492184270361},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1489280179000},{"_id":"source/_posts/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB.md","hash":"9b431ef37c5cf39371fa45f38ed6a63b0721bf45","modified":1502686060028},{"_id":"source/_posts/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql.md","hash":"d31daabc73bf01beb93110af53bf1606fe12c206","modified":1495961764155},{"_id":"source/_posts/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf.md","hash":"0c096b052df1ac4d420c193807421bf608f8cbc7","modified":1501877734676},{"_id":"source/_posts/pemrograman/spring/intro/1-introduction-to-spring-boot.md","hash":"8cb20ecdca5f8105a36e2b4c258a9f7338e411ba","modified":1503098267838},{"_id":"source/_posts/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS.md","hash":"ad3be83d155161c644cd10ceea1a63eb5eb74894","modified":1502721390854},{"_id":"source/_posts/pemrograman/spring/intro/2-setup-project-spring-boot.md","hash":"a7a71e1425e3c985f143941a2e2b952791c560fb","modified":1495880208440},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/pencarian.png","hash":"3873449d1afd4bc73153bb7e3cc6fa2b388b255e","modified":1492184390407},{"_id":"source/_posts/pemrograman/spring/mail/sending-mail.md","hash":"ea6fb3c8b3abd23ac991c32166c520660ccb09dd","modified":1504835431000},{"_id":"source/_posts/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud.md","hash":"719cc5abd8f7ff49c88f50dfd85c663a5f3c89c0","modified":1500704779223},{"_id":"source/_posts/pemrograman/spring/report/jasper-report.md","hash":"b9fb69fdc54dc88c367f648853506c8442e2531a","modified":1495962990767},{"_id":"source/_posts/pemrograman/spring/jpa/3-kardinalitas.md","hash":"75798768cab55831635abc4324a70aa6a615b883","modified":1497844454855},{"_id":"source/_posts/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security.md","hash":"a47c774e4658ab8e3916eca335915df59578dff9","modified":1497844222703},{"_id":"source/_posts/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security.md","hash":"7dd8f3bf19b1530e59c5aa40fd80eee000539313","modified":1497844223612},{"_id":"source/_posts/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended).md","hash":"c658fb2e69664271c6643b3e25ed1ba7391dbf23","modified":1497844454880},{"_id":"source/_posts/pemrograman/spring/security/3-debug-spring-security.md","hash":"60ec6af06bb49277e4f997b2bdca60823cbf81ac","modified":1497844221839},{"_id":"source/_posts/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA.md","hash":"02ade41a0b37baa66ba5405dc07c3cce67067392","modified":1502686194768},{"_id":"source/_posts/pemrograman/spring/security/5-oauth2-spring.md","hash":"d78dae385835962e21a292d786821d9cba6f8e46","modified":1495964818635},{"_id":"source/_posts/pemrograman/spring/template-engine/layout-dengan-thymeleaf.md","hash":"71b10f2bd6dae033ca604bc2804ef5ffd6fe9906","modified":1497844606429},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/index.png","hash":"7f322eb59f583c128e73205cb2e4fc910e143bad","modified":1491904350224},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/foto.png","hash":"a83b52d5d5ab57b0789bb1c581fd5d77d272dfd9","modified":1491904344112},{"_id":"source/_posts/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf.md","hash":"2b1601645d0c7897f6728550421d347f48f8c834","modified":1502720726701},{"_id":"source/_posts/pemrograman/spring/security/6-SSO-dengan-Spring-Security.md","hash":"cdec0dedd6f4054d4aa3aa2b37753725f324ea08","modified":1495962899185},{"_id":"themes/hueman/source/images/ui-ux/menu/cyclic-network-menu.png","hash":"ac992b2c1b5b4729049cb9baf1c329a8ef6974a1","modified":1489881131626},{"_id":"source/_posts/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md.md","hash":"07a5e766f7b74df5e03f7100a2770fa469aa9c5d","modified":1497844220414},{"_id":"themes/hueman/source/images/ui-ux/menu/acyclic-network-menu.png","hash":"181c0e55f869c32b47c5d234288e099e6086ae2e","modified":1489881149379},{"_id":"themes/hueman/source/images/ui-ux/menu/multiple-item.png","hash":"644e16f8d3ea0ccf6a3aeebc2614a2393cbb21dc","modified":1489880630516},{"_id":"themes/hueman/source/images/ui-ux/menu/multiple-selection.png","hash":"f3af9104efeda44201e3e4899ef1c100eb98f075","modified":1489880651907},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/sambutan-kepala.png","hash":"a48949d340895c8c21b7d1f5ca9e09b17c86942e","modified":1492184502782},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1482439833000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1482439834000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1489280179000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1489280179000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1489280179000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1489280179000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1489280179000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1489280179000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1489280179000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1489280179000},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/copyright.png","hash":"11eec1de2c7999d661bc30df3c0fdbe09dfa2ae5","modified":1491904328108},{"_id":"themes/hueman/source/images/ui-ux/menu/binary-menu.png","hash":"69ea40dd173a62d53742fe055fbc9e7a176bf735","modified":1489880611562},{"_id":"themes/hueman/source/images/ui-ux/menu/embedded-links.png","hash":"7394facc4c8d1113359d6f174aad188e42277d79","modified":1489880719845},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1489280179000},{"_id":"themes/hueman/source/images/ui-ux/menu/linier-sequence.png","hash":"dba345b23df4934645b0aee1c79bff7db551b1c5","modified":1489880776201},{"_id":"themes/hueman/source/images/ui-ux/menu/pull-down-dan-pop-up.png","hash":"62b0daf907156f230e409de6b837bc850918bc3e","modified":1489880686000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1482439833000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1482439833000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1489280179000},{"_id":"source/_posts/pemrograman/spring/devops/cloud-foundry/cloud-foundry-intro.md","hash":"92c2f3b24c852b0409825e3f5049664e4c804776","modified":1504262108263},{"_id":"source/_posts/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix.md","hash":"c3fd6bffd871c44aa7b0d1bd33b87417eec69463","modified":1503195587055},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/2.Config-Service-File-System.md","hash":"48bed002c906889eb25c456a8fbb3621a73fd62d","modified":1503200104000},{"_id":"source/_posts/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway.md","hash":"fbdb45e41a31af5020d4fa0a49860aaa8825c0c1","modified":1503195884000},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server.md","hash":"59754ff1fb66968375c689c8ae776c2bb56af7f2","modified":1503196984000},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/1.GS-Config-Service.md","hash":"c9c9f01eebf6a7b634fadd7308f93d7bdf79ba61","modified":1503202499000},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository.md","hash":"22584b5a3d959f180d035353a4a7439641dc0936","modified":1503202649000},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check.md","hash":"485c2e3cfd9acafce13b3c0eeecd7fc4bc12b05f","modified":1503202456531},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption.md","hash":"5e16011240b28c6d6d3bf2f20aba8c54861bbbb6","modified":1503202308000},{"_id":"source/_posts/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service.md","hash":"d3009125a47f37cd33524259e22e1611ba1f2bbc","modified":1503196375275},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/lamankosong.png","hash":"e352d3a38fbfbe81bc3dec32dda7903f3c9bbca9","modified":1491904355548},{"_id":"themes/hueman/source/images/ui-ux/menu/menu-maps.png","hash":"915762d9d1f4ca80d9a08d6554f2314f48f5bb2d","modified":1489881060174},{"_id":"themes/hueman/source/images/ui-ux/menu/simultaneus-menu.png","hash":"6dc9eb6b200dbe6d16c66401e32c63755064cbb3","modified":1489880791825},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1482439833000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1482439833000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1482439833000},{"_id":"themes/hueman/source/images/ui-ux/Ui-Ux.jpg","hash":"84566077f321a62d8f9143ad82ec1dc77274b3ad","modified":1489886614624},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1489280179000},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/cp.png","hash":"51f136a1d2265b115cf52e9aafe66139947a6d10","modified":1491904339428},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/5-Config-Service-Cient.md","hash":"54ff2e1dd12e3c298528505d0788684cd704b4b6","modified":1503202665967},{"_id":"source/_posts/pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing.md","hash":"ef8c675565fca4247d24c59fba5b7999c20d5ecd","modified":1503194569251},{"_id":"source/_posts/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security.md","hash":"0f767e753443e410a00c98fe7583755b057540a1","modified":1502767386293},{"_id":"themes/hueman/source/images/kritik-kpm-udinus/home.png","hash":"c1f8e2bb1c0f3530da1f12cf7249534b35528ae5","modified":1491905630202},{"_id":"themes/hueman/source/images/ui-ux/menu/alphasliders.png","hash":"f2bc3953f09f8b56ee1be41bd8f2bcdfe90f25c0","modified":1489880710308},{"_id":"themes/hueman/source/images/ui-ux/menu/tree-structured-menus.png","hash":"3676706a7cb1da9af4693b2ebcd866c3603992c5","modified":1489880758844},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1482439833000},{"_id":"themes/hueman/source/images/ui-ux/menu/scrolling.png","hash":"040129dd91d55feb719928757623cc2d230cebb5","modified":1489880699606},{"_id":"themes/hueman/source/images/ui-ux/menu/iconic-menu.png","hash":"5f14c885f056a472e3e2542d34ec04963bec753e","modified":1489880731246}],"Category":[{"name":"Linux","_id":"cj8stsncj0004islpg56sype4"},{"name":"Teknologi","_id":"cj8stsnfj000aislpgbwlft50"},{"name":"Interaksi Manusia dan Komputer","parent":"cj8stsnfj000aislpgbwlft50","_id":"cj8stsngs000rislp4dt0jgt9"},{"name":"Organisasi dan Arsitektur Komputer","parent":"cj8stsnfj000aislpgbwlft50","_id":"cj8stsnih001jislps0bvhnwn"},{"name":"Pemrograman","_id":"cj8stsnjg001yislpfu9mlh4i"},{"name":"Android","parent":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnk2002hislp824xq238"},{"name":"Angular","parent":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnk3002iislpuqpm19w5"},{"name":"Hexo","parent":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkd002wislphq5nolro"},{"name":"Spring","parent":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnlh003eislpo49umadc"}],"Data":[],"Page":[{"title":"About","type":"about","_content":"\nMuhammad Hafidz\n","source":"about/index.md","raw":"---\ntitle: About\ntype: about\n---\n\nMuhammad Hafidz\n","date":"2017-04-13T22:51:02.303Z","updated":"2017-04-13T22:51:02.303Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj8stsmzx0001islpqqxbur3s","content":"<p>Muhammad Hafidz</p>\n","excerpt":"","more":"<p>Muhammad Hafidz</p>\n"}],"Post":[{"title":"Debug JVM using JVisual VM","date":"2017-09-02T23:27:52.000Z","_content":"","source":"_posts/jvisual-vm.md","raw":"---\ntitle: Debug JVM using JVisual VM\ndate: 2017-09-03 06:27:52\ntags:\n---\n","slug":"jvisual-vm","published":1,"updated":"2017-09-02T23:28:12.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsmzl0000islpdnfxvugb","content":"","excerpt":"","more":""},{"title":"command-linux","date":"2017-08-27T20:18:55.000Z","_content":"\n# Mengatur PATH environment variable di Linux\n```\ncd /usr/bin\nsudo ln -s /path/to/binary binary-name\n```\n\n","source":"_posts/linux/command-linux.md","raw":"---\ntitle: command-linux\ndate: 2017-08-28 03:18:55\ntags:\n---\n\n# Mengatur PATH environment variable di Linux\n```\ncd /usr/bin\nsudo ln -s /path/to/binary binary-name\n```\n\n","slug":"linux/command-linux","published":1,"updated":"2017-10-15T13:37:26.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnc90002islpexpf60a0","content":"<h1 id=\"Mengatur-PATH-environment-variable-di-Linux\"><a href=\"#Mengatur-PATH-environment-variable-di-Linux\" class=\"headerlink\" title=\"Mengatur PATH environment variable di Linux\"></a>Mengatur PATH environment variable di Linux</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/bin</div><div class=\"line\">sudo ln -s /path/to/binary binary-name</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Mengatur-PATH-environment-variable-di-Linux\"><a href=\"#Mengatur-PATH-environment-variable-di-Linux\" class=\"headerlink\" title=\"Mengatur PATH environment variable di Linux\"></a>Mengatur PATH environment variable di Linux</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/bin</div><div class=\"line\">sudo ln -s /path/to/binary binary-name</div></pre></td></tr></table></figure>\n"},{"title":"Membuat Launcher di Linux","date":"2017-10-15T13:36:13.000Z","_content":"\n# Membuat Launcher di Linux\n\nTerdapat banyak cara dalam menginstall aplikasi di linux tergantung dari jenis filenya, diantaranya :\n- Menggunakan `apt install` pada terminal\n- Menggunakan executable file dengan ektensi seperti `.deb`, `.rpm` / `.sh`\n- Menggunakan binary file yang di kompres dalam `.tar.gz`.\n\nUntuk aplikasi yang di kompress dalam `.tar.gz` karena untuk menggunakanya hanya dicopy kedalam direktori kita dan tidak diinstall, atau aplikasi yang diinstall terkadang tidak otomatis membuat Launcher. Launcher bisa dibilang cara menjalankan aplikasi tersebut melalui GUI. Biasanya terletak di `whisker`. \nOleh karena itu kita akan coba membuat Launcher untuk aplikasi kita.\nUntuk kalo ini saya akan memberi contoh menggunakan aplikasi `Robomongo`. \nCaranya cukup mudah, pertama buat file dengan ekstensi `.desktop` dengan nama sesuai nama aplikasi kita. Kemudian isi file tersebut dengan format seperti :\n```desktop\n[Desktop Entry]\nVersion=\nType=\nName=\nComment=\nExec=\nIcon=\nPath=\nTerminal=\nStartupNotify=\n```\nKeterangan :\n- Version       : versi aplikasi\n- Type          : tipe aplikasi\n- Name          : nama aplikasi\n- Comment       : comment aplikasi\n- Exec          : cara mengeksekusi aplikasi tsb\n- Icon          : direktori untuk icon aplikasi tersebut\n- Path          : direktori aplikasi tersebut\n- Terminal      : apakah aplikasi khusus untuk berjalan di terminal\n- StartupNotify : apakah akan ada notifikasi waktu aplikasi berjalan\n\nBerikut contohnya untuk aplikasi Robomongo saya :\n```\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Robomongo\nComment=Robomongo\nExec=/home/ciazhar/Application/robomongo-1.0.0/bin/robomongo\nIcon=/home/ciazhar/Application/robomongo-1.0.0/CWNda0_WwAAWE-F.png\nPath=/home/ciazhar/Application/robomongo-1.0.0\nTerminal=false\nStartupNotify=false\n```\n\nKemudian simpan file tersebut di direktori `/usr/share/applications/`. Hati hati dengan dalam menyimpan file karena membutuhkan Permission.\n\nFinally Laucher telah dapat digunakan dan sudah tersedia di whisker.","source":"_posts/linux/membuat-laucher-di-linux.md","raw":"---\ntitle: Membuat Launcher di Linux\ndate: 2017-10-15 20:36:13\ntags:\n- linux\ncategories:\n  - Linux\n---\n\n# Membuat Launcher di Linux\n\nTerdapat banyak cara dalam menginstall aplikasi di linux tergantung dari jenis filenya, diantaranya :\n- Menggunakan `apt install` pada terminal\n- Menggunakan executable file dengan ektensi seperti `.deb`, `.rpm` / `.sh`\n- Menggunakan binary file yang di kompres dalam `.tar.gz`.\n\nUntuk aplikasi yang di kompress dalam `.tar.gz` karena untuk menggunakanya hanya dicopy kedalam direktori kita dan tidak diinstall, atau aplikasi yang diinstall terkadang tidak otomatis membuat Launcher. Launcher bisa dibilang cara menjalankan aplikasi tersebut melalui GUI. Biasanya terletak di `whisker`. \nOleh karena itu kita akan coba membuat Launcher untuk aplikasi kita.\nUntuk kalo ini saya akan memberi contoh menggunakan aplikasi `Robomongo`. \nCaranya cukup mudah, pertama buat file dengan ekstensi `.desktop` dengan nama sesuai nama aplikasi kita. Kemudian isi file tersebut dengan format seperti :\n```desktop\n[Desktop Entry]\nVersion=\nType=\nName=\nComment=\nExec=\nIcon=\nPath=\nTerminal=\nStartupNotify=\n```\nKeterangan :\n- Version       : versi aplikasi\n- Type          : tipe aplikasi\n- Name          : nama aplikasi\n- Comment       : comment aplikasi\n- Exec          : cara mengeksekusi aplikasi tsb\n- Icon          : direktori untuk icon aplikasi tersebut\n- Path          : direktori aplikasi tersebut\n- Terminal      : apakah aplikasi khusus untuk berjalan di terminal\n- StartupNotify : apakah akan ada notifikasi waktu aplikasi berjalan\n\nBerikut contohnya untuk aplikasi Robomongo saya :\n```\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Robomongo\nComment=Robomongo\nExec=/home/ciazhar/Application/robomongo-1.0.0/bin/robomongo\nIcon=/home/ciazhar/Application/robomongo-1.0.0/CWNda0_WwAAWE-F.png\nPath=/home/ciazhar/Application/robomongo-1.0.0\nTerminal=false\nStartupNotify=false\n```\n\nKemudian simpan file tersebut di direktori `/usr/share/applications/`. Hati hati dengan dalam menyimpan file karena membutuhkan Permission.\n\nFinally Laucher telah dapat digunakan dan sudah tersedia di whisker.","slug":"linux/membuat-laucher-di-linux","published":1,"updated":"2017-10-15T14:05:25.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsncd0003islpp64wiqq3","content":"<h1 id=\"Membuat-Launcher-di-Linux\"><a href=\"#Membuat-Launcher-di-Linux\" class=\"headerlink\" title=\"Membuat Launcher di Linux\"></a>Membuat Launcher di Linux</h1><p>Terdapat banyak cara dalam menginstall aplikasi di linux tergantung dari jenis filenya, diantaranya :</p>\n<ul>\n<li>Menggunakan <code>apt install</code> pada terminal</li>\n<li>Menggunakan executable file dengan ektensi seperti <code>.deb</code>, <code>.rpm</code> / <code>.sh</code></li>\n<li>Menggunakan binary file yang di kompres dalam <code>.tar.gz</code>.</li>\n</ul>\n<p>Untuk aplikasi yang di kompress dalam <code>.tar.gz</code> karena untuk menggunakanya hanya dicopy kedalam direktori kita dan tidak diinstall, atau aplikasi yang diinstall terkadang tidak otomatis membuat Launcher. Launcher bisa dibilang cara menjalankan aplikasi tersebut melalui GUI. Biasanya terletak di <code>whisker</code>.<br>Oleh karena itu kita akan coba membuat Launcher untuk aplikasi kita.<br>Untuk kalo ini saya akan memberi contoh menggunakan aplikasi <code>Robomongo</code>.<br>Caranya cukup mudah, pertama buat file dengan ekstensi <code>.desktop</code> dengan nama sesuai nama aplikasi kita. Kemudian isi file tersebut dengan format seperti :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]</div><div class=\"line\">Version=</div><div class=\"line\">Type=</div><div class=\"line\">Name=</div><div class=\"line\">Comment=</div><div class=\"line\">Exec=</div><div class=\"line\">Icon=</div><div class=\"line\">Path=</div><div class=\"line\">Terminal=</div><div class=\"line\">StartupNotify=</div></pre></td></tr></table></figure></p>\n<p>Keterangan :</p>\n<ul>\n<li>Version       : versi aplikasi</li>\n<li>Type          : tipe aplikasi</li>\n<li>Name          : nama aplikasi</li>\n<li>Comment       : comment aplikasi</li>\n<li>Exec          : cara mengeksekusi aplikasi tsb</li>\n<li>Icon          : direktori untuk icon aplikasi tersebut</li>\n<li>Path          : direktori aplikasi tersebut</li>\n<li>Terminal      : apakah aplikasi khusus untuk berjalan di terminal</li>\n<li>StartupNotify : apakah akan ada notifikasi waktu aplikasi berjalan</li>\n</ul>\n<p>Berikut contohnya untuk aplikasi Robomongo saya :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]</div><div class=\"line\">Version=1.0</div><div class=\"line\">Type=Application</div><div class=\"line\">Name=Robomongo</div><div class=\"line\">Comment=Robomongo</div><div class=\"line\">Exec=/home/ciazhar/Application/robomongo-1.0.0/bin/robomongo</div><div class=\"line\">Icon=/home/ciazhar/Application/robomongo-1.0.0/CWNda0_WwAAWE-F.png</div><div class=\"line\">Path=/home/ciazhar/Application/robomongo-1.0.0</div><div class=\"line\">Terminal=false</div><div class=\"line\">StartupNotify=false</div></pre></td></tr></table></figure></p>\n<p>Kemudian simpan file tersebut di direktori <code>/usr/share/applications/</code>. Hati hati dengan dalam menyimpan file karena membutuhkan Permission.</p>\n<p>Finally Laucher telah dapat digunakan dan sudah tersedia di whisker.</p>\n","excerpt":"","more":"<h1 id=\"Membuat-Launcher-di-Linux\"><a href=\"#Membuat-Launcher-di-Linux\" class=\"headerlink\" title=\"Membuat Launcher di Linux\"></a>Membuat Launcher di Linux</h1><p>Terdapat banyak cara dalam menginstall aplikasi di linux tergantung dari jenis filenya, diantaranya :</p>\n<ul>\n<li>Menggunakan <code>apt install</code> pada terminal</li>\n<li>Menggunakan executable file dengan ektensi seperti <code>.deb</code>, <code>.rpm</code> / <code>.sh</code></li>\n<li>Menggunakan binary file yang di kompres dalam <code>.tar.gz</code>.</li>\n</ul>\n<p>Untuk aplikasi yang di kompress dalam <code>.tar.gz</code> karena untuk menggunakanya hanya dicopy kedalam direktori kita dan tidak diinstall, atau aplikasi yang diinstall terkadang tidak otomatis membuat Launcher. Launcher bisa dibilang cara menjalankan aplikasi tersebut melalui GUI. Biasanya terletak di <code>whisker</code>.<br>Oleh karena itu kita akan coba membuat Launcher untuk aplikasi kita.<br>Untuk kalo ini saya akan memberi contoh menggunakan aplikasi <code>Robomongo</code>.<br>Caranya cukup mudah, pertama buat file dengan ekstensi <code>.desktop</code> dengan nama sesuai nama aplikasi kita. Kemudian isi file tersebut dengan format seperti :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]</div><div class=\"line\">Version=</div><div class=\"line\">Type=</div><div class=\"line\">Name=</div><div class=\"line\">Comment=</div><div class=\"line\">Exec=</div><div class=\"line\">Icon=</div><div class=\"line\">Path=</div><div class=\"line\">Terminal=</div><div class=\"line\">StartupNotify=</div></pre></td></tr></table></figure></p>\n<p>Keterangan :</p>\n<ul>\n<li>Version       : versi aplikasi</li>\n<li>Type          : tipe aplikasi</li>\n<li>Name          : nama aplikasi</li>\n<li>Comment       : comment aplikasi</li>\n<li>Exec          : cara mengeksekusi aplikasi tsb</li>\n<li>Icon          : direktori untuk icon aplikasi tersebut</li>\n<li>Path          : direktori aplikasi tersebut</li>\n<li>Terminal      : apakah aplikasi khusus untuk berjalan di terminal</li>\n<li>StartupNotify : apakah akan ada notifikasi waktu aplikasi berjalan</li>\n</ul>\n<p>Berikut contohnya untuk aplikasi Robomongo saya :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Desktop Entry]</div><div class=\"line\">Version=1.0</div><div class=\"line\">Type=Application</div><div class=\"line\">Name=Robomongo</div><div class=\"line\">Comment=Robomongo</div><div class=\"line\">Exec=/home/ciazhar/Application/robomongo-1.0.0/bin/robomongo</div><div class=\"line\">Icon=/home/ciazhar/Application/robomongo-1.0.0/CWNda0_WwAAWE-F.png</div><div class=\"line\">Path=/home/ciazhar/Application/robomongo-1.0.0</div><div class=\"line\">Terminal=false</div><div class=\"line\">StartupNotify=false</div></pre></td></tr></table></figure></p>\n<p>Kemudian simpan file tersebut di direktori <code>/usr/share/applications/</code>. Hati hati dengan dalam menyimpan file karena membutuhkan Permission.</p>\n<p>Finally Laucher telah dapat digunakan dan sudah tersedia di whisker.</p>\n"},{"title":"Introduction to Android","date":"2017-05-07T05:21:33.000Z","sticky":true,"_content":"\n![](/images/android.png)\n# Sekilas tentang Android\n\n[Android](https://developer.android.com/) merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native.\n\n# Roadmap Belajar Android Native\n- [Setup Project Android]()\n- [View]()\n- [Java]()\n","source":"_posts/pemrograman/android/0-Introduction-to-Android.md","raw":"---\ntitle: Introduction to Android\ndate: 2017-05-07 12:21:33\ncategories:\n  - Pemrograman\n  - Android\nsticky: true\n---\n\n![](/images/android.png)\n# Sekilas tentang Android\n\n[Android](https://developer.android.com/) merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native.\n\n# Roadmap Belajar Android Native\n- [Setup Project Android]()\n- [View]()\n- [Java]()\n","slug":"pemrograman/android/0-Introduction-to-Android","published":1,"updated":"2017-06-19T03:34:44.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsngj000qislpeixsanzv","content":"<p><img src=\"/images/android.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Android\"><a href=\"#Sekilas-tentang-Android\" class=\"headerlink\" title=\"Sekilas tentang Android\"></a>Sekilas tentang Android</h1><p><a href=\"https://developer.android.com/\" target=\"_blank\" rel=\"external\">Android</a> merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native.</p>\n<h1 id=\"Roadmap-Belajar-Android-Native\"><a href=\"#Roadmap-Belajar-Android-Native\" class=\"headerlink\" title=\"Roadmap Belajar Android Native\"></a>Roadmap Belajar Android Native</h1><ul>\n<li><a href=\"\">Setup Project Android</a></li>\n<li><a href=\"\">View</a></li>\n<li><a href=\"\">Java</a></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/android.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Android\"><a href=\"#Sekilas-tentang-Android\" class=\"headerlink\" title=\"Sekilas tentang Android\"></a>Sekilas tentang Android</h1><p><a href=\"https://developer.android.com/\">Android</a> merupakan Sistem Operasi untuk mobile. Aplikasi android native sendiri dapat dibangun menggunakan XML(untuk design) dan Java(untuk logic). Pada Tutorial kali ini kita akan coba membuat aplikasi Android native.</p>\n<h1 id=\"Roadmap-Belajar-Android-Native\"><a href=\"#Roadmap-Belajar-Android-Native\" class=\"headerlink\" title=\"Roadmap Belajar Android Native\"></a>Roadmap Belajar Android Native</h1><ul>\n<li><a href=\"\">Setup Project Android</a></li>\n<li><a href=\"\">View</a></li>\n<li><a href=\"\">Java</a></li>\n</ul>\n"},{"title":"two-activity","date":"2017-09-19T06:53:18.000Z","_content":"\n### Modal\n- Relative View\n- Text View\n- Button\n- Edit Text\n\n### Learn\n- Parent Activity\n- Intent\n\n### Target\nKita akan membuat 2 acivity yang saling berinteraksi. Dua activity tersebut adalah `MainActivity` yang difungsikan sebagai activity utama/parent dan `SecondActivity` yang difungsikan sebagai activity child. Nantinya MainActivity akan mengakses ke SecondActivity menggunakan Button. Pada SecondActovity akan terdapat tombol kembali atau `<-` yang menuju ke MainActivity.\n\n### Step\n- Membuat MainActivity\n    - Relative View(activity_second.xml)\n    - Button(activity_second.xml)\n- Membuat SecondActivity\n    - Relative View(activity_second.xml)\n    - Text View(activity_second.xml)\n    - Konfigurasi Parent Activity (manifest.xml)\n        ```\n        <activity\n            android:name=\".SecondActivity\"\n            android:label=\"@string/SecondActivity\"\n            android:parentActivityName=\".MainActivity\"\n            >\n            <meta-data\n                android:name=\"android.support.PARENT_ACTIVITY\"\n                android:value=\".MainActivity\"\n                />\n        </activity>\n        ```\n- Membuat intent untuk menghubungkan MainActivity ke SecondActivity\n```\nfun launchSecondActivity(view: View) {\n    Log.d(LOG_TAG, \"Button Clicked\")\n    val intent = Intent(this, SecondActivity::class.java)\n    startActivity(intent)\n}\n```\n- Menambahkan edit text untuk input","source":"_posts/pemrograman/android/two-activity.md","raw":"---\ntitle: two-activity\ndate: 2017-09-19 13:53:18\ntags:\n---\n\n### Modal\n- Relative View\n- Text View\n- Button\n- Edit Text\n\n### Learn\n- Parent Activity\n- Intent\n\n### Target\nKita akan membuat 2 acivity yang saling berinteraksi. Dua activity tersebut adalah `MainActivity` yang difungsikan sebagai activity utama/parent dan `SecondActivity` yang difungsikan sebagai activity child. Nantinya MainActivity akan mengakses ke SecondActivity menggunakan Button. Pada SecondActovity akan terdapat tombol kembali atau `<-` yang menuju ke MainActivity.\n\n### Step\n- Membuat MainActivity\n    - Relative View(activity_second.xml)\n    - Button(activity_second.xml)\n- Membuat SecondActivity\n    - Relative View(activity_second.xml)\n    - Text View(activity_second.xml)\n    - Konfigurasi Parent Activity (manifest.xml)\n        ```\n        <activity\n            android:name=\".SecondActivity\"\n            android:label=\"@string/SecondActivity\"\n            android:parentActivityName=\".MainActivity\"\n            >\n            <meta-data\n                android:name=\"android.support.PARENT_ACTIVITY\"\n                android:value=\".MainActivity\"\n                />\n        </activity>\n        ```\n- Membuat intent untuk menghubungkan MainActivity ke SecondActivity\n```\nfun launchSecondActivity(view: View) {\n    Log.d(LOG_TAG, \"Button Clicked\")\n    val intent = Intent(this, SecondActivity::class.java)\n    startActivity(intent)\n}\n```\n- Menambahkan edit text untuk input","slug":"pemrograman/android/two-activity","published":1,"updated":"2017-09-19T07:12:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsngw000uislp0pnlko6e","content":"<h3 id=\"Modal\"><a href=\"#Modal\" class=\"headerlink\" title=\"Modal\"></a>Modal</h3><ul>\n<li>Relative View</li>\n<li>Text View</li>\n<li>Button</li>\n<li>Edit Text</li>\n</ul>\n<h3 id=\"Learn\"><a href=\"#Learn\" class=\"headerlink\" title=\"Learn\"></a>Learn</h3><ul>\n<li>Parent Activity</li>\n<li>Intent</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>Kita akan membuat 2 acivity yang saling berinteraksi. Dua activity tersebut adalah <code>MainActivity</code> yang difungsikan sebagai activity utama/parent dan <code>SecondActivity</code> yang difungsikan sebagai activity child. Nantinya MainActivity akan mengakses ke SecondActivity menggunakan Button. Pada SecondActovity akan terdapat tombol kembali atau <code>&lt;-</code> yang menuju ke MainActivity.</p>\n<h3 id=\"Step\"><a href=\"#Step\" class=\"headerlink\" title=\"Step\"></a>Step</h3><ul>\n<li>Membuat MainActivity<ul>\n<li>Relative View(activity_second.xml)</li>\n<li>Button(activity_second.xml)</li>\n</ul>\n</li>\n<li><p>Membuat SecondActivity</p>\n<ul>\n<li>Relative View(activity_second.xml)</li>\n<li>Text View(activity_second.xml)</li>\n<li>Konfigurasi Parent Activity (manifest.xml)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=&quot;.SecondActivity&quot;</div><div class=\"line\">    android:label=&quot;@string/SecondActivity&quot;</div><div class=\"line\">    android:parentActivityName=&quot;.MainActivity&quot;</div><div class=\"line\">    &gt;</div><div class=\"line\">    &lt;meta-data</div><div class=\"line\">        android:name=&quot;android.support.PARENT_ACTIVITY&quot;</div><div class=\"line\">        android:value=&quot;.MainActivity&quot;</div><div class=\"line\">        /&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Membuat intent untuk menghubungkan MainActivity ke SecondActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun launchSecondActivity(view: View) &#123;</div><div class=\"line\">    Log.d(LOG_TAG, &quot;Button Clicked&quot;)</div><div class=\"line\">    val intent = Intent(this, SecondActivity::class.java)</div><div class=\"line\">    startActivity(intent)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Menambahkan edit text untuk input</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"Modal\"><a href=\"#Modal\" class=\"headerlink\" title=\"Modal\"></a>Modal</h3><ul>\n<li>Relative View</li>\n<li>Text View</li>\n<li>Button</li>\n<li>Edit Text</li>\n</ul>\n<h3 id=\"Learn\"><a href=\"#Learn\" class=\"headerlink\" title=\"Learn\"></a>Learn</h3><ul>\n<li>Parent Activity</li>\n<li>Intent</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>Kita akan membuat 2 acivity yang saling berinteraksi. Dua activity tersebut adalah <code>MainActivity</code> yang difungsikan sebagai activity utama/parent dan <code>SecondActivity</code> yang difungsikan sebagai activity child. Nantinya MainActivity akan mengakses ke SecondActivity menggunakan Button. Pada SecondActovity akan terdapat tombol kembali atau <code>&lt;-</code> yang menuju ke MainActivity.</p>\n<h3 id=\"Step\"><a href=\"#Step\" class=\"headerlink\" title=\"Step\"></a>Step</h3><ul>\n<li>Membuat MainActivity<ul>\n<li>Relative View(activity_second.xml)</li>\n<li>Button(activity_second.xml)</li>\n</ul>\n</li>\n<li><p>Membuat SecondActivity</p>\n<ul>\n<li>Relative View(activity_second.xml)</li>\n<li>Text View(activity_second.xml)</li>\n<li>Konfigurasi Parent Activity (manifest.xml)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=&quot;.SecondActivity&quot;</div><div class=\"line\">    android:label=&quot;@string/SecondActivity&quot;</div><div class=\"line\">    android:parentActivityName=&quot;.MainActivity&quot;</div><div class=\"line\">    &gt;</div><div class=\"line\">    &lt;meta-data</div><div class=\"line\">        android:name=&quot;android.support.PARENT_ACTIVITY&quot;</div><div class=\"line\">        android:value=&quot;.MainActivity&quot;</div><div class=\"line\">        /&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Membuat intent untuk menghubungkan MainActivity ke SecondActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fun launchSecondActivity(view: View) &#123;</div><div class=\"line\">    Log.d(LOG_TAG, &quot;Button Clicked&quot;)</div><div class=\"line\">    val intent = Intent(this, SecondActivity::class.java)</div><div class=\"line\">    startActivity(intent)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Menambahkan edit text untuk input</p>\n</li>\n</ul>\n"},{"title":"Introduction to Angular2","date":"2017-04-28T03:01:35.000Z","sticky":true,"_content":"![](/images/angular.png)\n\n# Sekilas tentang Angular\n\n[Angular](https://angular.io) merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman [Javascript](https://www.javascript.com) tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman [Typescript](https://www.typescriptlang.org/). Pada Tutorial kali ini kita akan coba membuat aplikasi angular untuk frontend web.\n\n# Roadmap Belajar Angular\n- [Setup Project Angular]()\n- [Component dan Module]()\n- [Routing Top Level Conponent]()\n- [Routing Module]\n","source":"_posts/pemrograman/angular/0-Introduction-to-Angular2.md","raw":"---\ntitle: Introduction to Angular2\ndate: 2017-04-28 10:01:35\ncategories:\n  - Pemrograman\n  - Angular\nsticky: true\n---\n![](/images/angular.png)\n\n# Sekilas tentang Angular\n\n[Angular](https://angular.io) merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman [Javascript](https://www.javascript.com) tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman [Typescript](https://www.typescriptlang.org/). Pada Tutorial kali ini kita akan coba membuat aplikasi angular untuk frontend web.\n\n# Roadmap Belajar Angular\n- [Setup Project Angular]()\n- [Component dan Module]()\n- [Routing Top Level Conponent]()\n- [Routing Module]\n","slug":"pemrograman/angular/0-Introduction-to-Angular2","published":1,"updated":"2017-05-21T14:22:16.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnhg0010islpqhv5k8xd","content":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Angular\"><a href=\"#Sekilas-tentang-Angular\" class=\"headerlink\" title=\"Sekilas tentang Angular\"></a>Sekilas tentang Angular</h1><p><a href=\"https://angular.io\" target=\"_blank\" rel=\"external\">Angular</a> merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman <a href=\"https://www.javascript.com\" target=\"_blank\" rel=\"external\">Javascript</a> tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">Typescript</a>. Pada Tutorial kali ini kita akan coba membuat aplikasi angular untuk frontend web.</p>\n<h1 id=\"Roadmap-Belajar-Angular\"><a href=\"#Roadmap-Belajar-Angular\" class=\"headerlink\" title=\"Roadmap Belajar Angular\"></a>Roadmap Belajar Angular</h1><ul>\n<li><a href=\"\">Setup Project Angular</a></li>\n<li><a href=\"\">Component dan Module</a></li>\n<li><a href=\"\">Routing Top Level Conponent</a></li>\n<li>[Routing Module]</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Angular\"><a href=\"#Sekilas-tentang-Angular\" class=\"headerlink\" title=\"Sekilas tentang Angular\"></a>Sekilas tentang Angular</h1><p><a href=\"https://angular.io\">Angular</a> merupakan framework untuk membangun aplikasi frontend web, desktop dan mobile. Angular sendiri pada awalnya berbasis bahasa pemrograman <a href=\"https://www.javascript.com\">Javascript</a> tetapi kemudian mulai versi 2 keatas ditambahkan untuk bahasa pemrograman <a href=\"https://www.typescriptlang.org/\">Typescript</a>. Pada Tutorial kali ini kita akan coba membuat aplikasi angular untuk frontend web.</p>\n<h1 id=\"Roadmap-Belajar-Angular\"><a href=\"#Roadmap-Belajar-Angular\" class=\"headerlink\" title=\"Roadmap Belajar Angular\"></a>Roadmap Belajar Angular</h1><ul>\n<li><a href=\"\">Setup Project Angular</a></li>\n<li><a href=\"\">Component dan Module</a></li>\n<li><a href=\"\">Routing Top Level Conponent</a></li>\n<li>[Routing Module]</li>\n</ul>\n"},{"title":"Setup Project Angular2","date":"2017-04-28T03:01:36.000Z","_content":"![](/images/angular.png)\n## Menginstall Node\nUntuk menginstall node saya menyarankan menggunakan tutorial dari [Digital Ocean](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04) dengan menggunakan nvm.\n\n# Menginstall npm\nUntuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):\n```\n  sudo apt install npm\n```\nAtau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet.\n\n## Menginstall Angular CLI\nAngular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :\n```\n  npm install -g @angular/cli\n```\n\n## Membuat Project Angular2\n```\n  ng new NAMA_PROJECT\n```\nSetelah itu akan dibuat struktur folder sebagai berikut :\n```\nNAMA_FOLDER/\n├── .git\n│   ├── branches\n│   ├── COMMIT_EDITMSG\n│   ├── config\n│   ├── description\n│   ├── HEAD\n│   ├── hooks\n│   │   ├── applypatch-msg.sample\n│   │   ├── commit-msg.sample\n│   │   ├── post-update.sample\n│   │   ├── pre-applypatch.sample\n│   │   ├── pre-commit.sample\n│   │   ├── prepare-commit-msg.sample\n│   │   ├── pre-push.sample\n│   │   ├── pre-rebase.sample\n│   │   └── update.sample\n│   ├── index\n│   ├── info\n│   │   └── exclude\n│   ├── logs\n│   │   ├── HEAD\n│   │   └── refs\n│   │       └── heads\n│   │           └── master\n│   ├── objects\n│   │   ├── 82\n│   │   │   └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89\n│   │   ├── e6\n│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391\n│   │   ├── f1\n│   │   │   └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf\n│   │   ├── info\n│   │   └── pack\n│   └── refs\n│       ├── heads\n│       │   └── master\n│       └── tags\n├── .gitignore\n└── NAMA_PROJECT\n    ├── .angular-cli.json\n    ├── e2e\n    │   ├── app.e2e-spec.ts\n    │   ├── app.po.ts\n    │   └── tsconfig.e2e.json\n    ├── .editorconfig\n    ├── .gitignore\n    ├── karma.conf.js\n    ├── package.json\n    ├── protractor.conf.js\n    ├── README.md\n    ├── src\n    │   ├── app\n    │   │   ├── app.component.css\n    │   │   ├── app.component.html\n    │   │   ├── app.component.spec.ts\n    │   │   ├── app.component.ts\n    │   │   └── app.module.ts\n    │   ├── assets\n    │   │   └── .gitkeep\n    │   ├── environments\n    │   │   ├── environment.prod.ts\n    │   │   └── environment.ts\n    │   ├── favicon.ico\n    │   ├── index.html\n    │   ├── main.ts\n    │   ├── polyfills.ts\n    │   ├── styles.css\n    │   ├── test.ts\n    │   ├── tsconfig.app.json\n    │   ├── tsconfig.spec.json\n    │   └── typings.d.ts\n    ├── tsconfig.json\n    └── tslint.json\n```\nPada Project tersebut terdapat beberapa file yaitu :\n- angular-cli.json. File ini berisi konfigurasi dari tools angular cli.\n- package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library.\n- tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat `emitDecoratorMetadata` yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga `module` yang berisi module systemnya. Terdapat juga `target` untuk outputnya nanti menjadi apa. Terdapat juga `moduleResolution` untuk system modulnya. Terdapat juga `outDir` untuk compilenya kemana. Terdapat juga `sourceMap` untuk mapping hasil compile ke sourcecode aslinya.\n- node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload.\n- index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS.\n- main.ts. File ini merupaka main class nya.\n- style.css. File css untuk global.\n- app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu `.css` untuk cssnya, `.html` untuk templatenya, `.spec.ts` untuk testing, `.ts` untuk konfigurasi template dan ts, `module.ts` untuk modulenya (kalo di java seperti package).\n\n## Running Project\nUntuk running project dapat gunakan code berikut pada terminal\n```\ncd NAMA_PROJECT\nng serve\n```\nHasilnya dapat anda lihat di browser pada `localhost:4200`.\n\n\n## Build Project\nUntuk running project dapat gunakan code berikut pada terminal\n```\nng serve\n```\nHasilnya dapat anda lihat pada folder dist\n\n\n## Flow Angular2\n1. main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding `import { AppModule } from './app/app.module';`. Selain itu main.ts juga membootrap app.module.ts melalui koding `platformBrowserDynamic().bootstrapModule(AppModule);`\n2. Selanjutnya app.module.ts. Di app.module.ts dia terdapat `declaration` yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada `import` yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada `bootstrap` yang digunakan untuk menjalankan file (yaitu AppComponent).\n3. Selanjutnya app.component.ts. Di app.component.ts terdapat `selector` yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari `templateUrl`.\n4. Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export.\n\n\n## Install Bootstrap\nStep ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.\nUntuk menginstallnya dapat menggunakan kode\n```\nnpm install ng2-bootstrap bootstrap --save\n```\nSetelah itu includekan bootstrapnya ke file angular-cli.json.\n```json\n\"styles\": [\n  \"styles.css\",\n  \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n],\n```\n\n## Arsitektur Aplikasi Angular2\nArsitekturnya kurang lebih seperti berikut\n```\n  Aplikasi\n  ├── Top Level Component\n  ├── Module\n      ├── Component\n          |── File Typescript/JS\n          |── File HTML\n```\nPenjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:\n```\n  Aplikasi Tabungan Emas\n  ├── Sidebar Component\n  │   ├── Informasi Rekening\n  │   ├── Transaksi Emas\n  │   │   ├── Form\n  │   │   ├── Rekap\n  ├── Navbar Component\n  │   ├── Settings\n  │   ├── Profile\n  │   ├── Help\n```\n","source":"_posts/pemrograman/angular/1-Setup-Project-Angular2.md","raw":"---\ntitle: Setup Project Angular2\ndate: 2017-04-28 10:01:36\ncategories:\n  - Pemrograman\n  - Angular\n---\n![](/images/angular.png)\n## Menginstall Node\nUntuk menginstall node saya menyarankan menggunakan tutorial dari [Digital Ocean](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04) dengan menggunakan nvm.\n\n# Menginstall npm\nUntuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):\n```\n  sudo apt install npm\n```\nAtau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet.\n\n## Menginstall Angular CLI\nAngular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :\n```\n  npm install -g @angular/cli\n```\n\n## Membuat Project Angular2\n```\n  ng new NAMA_PROJECT\n```\nSetelah itu akan dibuat struktur folder sebagai berikut :\n```\nNAMA_FOLDER/\n├── .git\n│   ├── branches\n│   ├── COMMIT_EDITMSG\n│   ├── config\n│   ├── description\n│   ├── HEAD\n│   ├── hooks\n│   │   ├── applypatch-msg.sample\n│   │   ├── commit-msg.sample\n│   │   ├── post-update.sample\n│   │   ├── pre-applypatch.sample\n│   │   ├── pre-commit.sample\n│   │   ├── prepare-commit-msg.sample\n│   │   ├── pre-push.sample\n│   │   ├── pre-rebase.sample\n│   │   └── update.sample\n│   ├── index\n│   ├── info\n│   │   └── exclude\n│   ├── logs\n│   │   ├── HEAD\n│   │   └── refs\n│   │       └── heads\n│   │           └── master\n│   ├── objects\n│   │   ├── 82\n│   │   │   └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89\n│   │   ├── e6\n│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391\n│   │   ├── f1\n│   │   │   └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf\n│   │   ├── info\n│   │   └── pack\n│   └── refs\n│       ├── heads\n│       │   └── master\n│       └── tags\n├── .gitignore\n└── NAMA_PROJECT\n    ├── .angular-cli.json\n    ├── e2e\n    │   ├── app.e2e-spec.ts\n    │   ├── app.po.ts\n    │   └── tsconfig.e2e.json\n    ├── .editorconfig\n    ├── .gitignore\n    ├── karma.conf.js\n    ├── package.json\n    ├── protractor.conf.js\n    ├── README.md\n    ├── src\n    │   ├── app\n    │   │   ├── app.component.css\n    │   │   ├── app.component.html\n    │   │   ├── app.component.spec.ts\n    │   │   ├── app.component.ts\n    │   │   └── app.module.ts\n    │   ├── assets\n    │   │   └── .gitkeep\n    │   ├── environments\n    │   │   ├── environment.prod.ts\n    │   │   └── environment.ts\n    │   ├── favicon.ico\n    │   ├── index.html\n    │   ├── main.ts\n    │   ├── polyfills.ts\n    │   ├── styles.css\n    │   ├── test.ts\n    │   ├── tsconfig.app.json\n    │   ├── tsconfig.spec.json\n    │   └── typings.d.ts\n    ├── tsconfig.json\n    └── tslint.json\n```\nPada Project tersebut terdapat beberapa file yaitu :\n- angular-cli.json. File ini berisi konfigurasi dari tools angular cli.\n- package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library.\n- tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat `emitDecoratorMetadata` yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga `module` yang berisi module systemnya. Terdapat juga `target` untuk outputnya nanti menjadi apa. Terdapat juga `moduleResolution` untuk system modulnya. Terdapat juga `outDir` untuk compilenya kemana. Terdapat juga `sourceMap` untuk mapping hasil compile ke sourcecode aslinya.\n- node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload.\n- index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS.\n- main.ts. File ini merupaka main class nya.\n- style.css. File css untuk global.\n- app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu `.css` untuk cssnya, `.html` untuk templatenya, `.spec.ts` untuk testing, `.ts` untuk konfigurasi template dan ts, `module.ts` untuk modulenya (kalo di java seperti package).\n\n## Running Project\nUntuk running project dapat gunakan code berikut pada terminal\n```\ncd NAMA_PROJECT\nng serve\n```\nHasilnya dapat anda lihat di browser pada `localhost:4200`.\n\n\n## Build Project\nUntuk running project dapat gunakan code berikut pada terminal\n```\nng serve\n```\nHasilnya dapat anda lihat pada folder dist\n\n\n## Flow Angular2\n1. main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding `import { AppModule } from './app/app.module';`. Selain itu main.ts juga membootrap app.module.ts melalui koding `platformBrowserDynamic().bootstrapModule(AppModule);`\n2. Selanjutnya app.module.ts. Di app.module.ts dia terdapat `declaration` yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada `import` yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada `bootstrap` yang digunakan untuk menjalankan file (yaitu AppComponent).\n3. Selanjutnya app.component.ts. Di app.component.ts terdapat `selector` yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari `templateUrl`.\n4. Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export.\n\n\n## Install Bootstrap\nStep ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.\nUntuk menginstallnya dapat menggunakan kode\n```\nnpm install ng2-bootstrap bootstrap --save\n```\nSetelah itu includekan bootstrapnya ke file angular-cli.json.\n```json\n\"styles\": [\n  \"styles.css\",\n  \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\n],\n```\n\n## Arsitektur Aplikasi Angular2\nArsitekturnya kurang lebih seperti berikut\n```\n  Aplikasi\n  ├── Top Level Component\n  ├── Module\n      ├── Component\n          |── File Typescript/JS\n          |── File HTML\n```\nPenjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:\n```\n  Aplikasi Tabungan Emas\n  ├── Sidebar Component\n  │   ├── Informasi Rekening\n  │   ├── Transaksi Emas\n  │   │   ├── Form\n  │   │   ├── Rekap\n  ├── Navbar Component\n  │   ├── Settings\n  │   ├── Profile\n  │   ├── Help\n```\n","slug":"pemrograman/angular/1-Setup-Project-Angular2","published":1,"updated":"2017-05-13T22:59:57.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnhn0014islpfsdey26i","content":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h2 id=\"Menginstall-Node\"><a href=\"#Menginstall-Node\" class=\"headerlink\" title=\"Menginstall Node\"></a>Menginstall Node</h2><p>Untuk menginstall node saya menyarankan menggunakan tutorial dari <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04\" target=\"_blank\" rel=\"external\">Digital Ocean</a> dengan menggunakan nvm.</p>\n<h1 id=\"Menginstall-npm\"><a href=\"#Menginstall-npm\" class=\"headerlink\" title=\"Menginstall npm\"></a>Menginstall npm</h1><p>Untuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install npm</div></pre></td></tr></table></figure></p>\n<p>Atau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet.</p>\n<h2 id=\"Menginstall-Angular-CLI\"><a href=\"#Menginstall-Angular-CLI\" class=\"headerlink\" title=\"Menginstall Angular CLI\"></a>Menginstall Angular CLI</h2><p>Angular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g @angular/cli</div></pre></td></tr></table></figure></p>\n<h2 id=\"Membuat-Project-Angular2\"><a href=\"#Membuat-Project-Angular2\" class=\"headerlink\" title=\"Membuat Project Angular2\"></a>Membuat Project Angular2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new NAMA_PROJECT</div></pre></td></tr></table></figure>\n<p>Setelah itu akan dibuat struktur folder sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAMA_FOLDER/</div><div class=\"line\">├── .git</div><div class=\"line\">│   ├── branches</div><div class=\"line\">│   ├── COMMIT_EDITMSG</div><div class=\"line\">│   ├── config</div><div class=\"line\">│   ├── description</div><div class=\"line\">│   ├── HEAD</div><div class=\"line\">│   ├── hooks</div><div class=\"line\">│   │   ├── applypatch-msg.sample</div><div class=\"line\">│   │   ├── commit-msg.sample</div><div class=\"line\">│   │   ├── post-update.sample</div><div class=\"line\">│   │   ├── pre-applypatch.sample</div><div class=\"line\">│   │   ├── pre-commit.sample</div><div class=\"line\">│   │   ├── prepare-commit-msg.sample</div><div class=\"line\">│   │   ├── pre-push.sample</div><div class=\"line\">│   │   ├── pre-rebase.sample</div><div class=\"line\">│   │   └── update.sample</div><div class=\"line\">│   ├── index</div><div class=\"line\">│   ├── info</div><div class=\"line\">│   │   └── exclude</div><div class=\"line\">│   ├── logs</div><div class=\"line\">│   │   ├── HEAD</div><div class=\"line\">│   │   └── refs</div><div class=\"line\">│   │       └── heads</div><div class=\"line\">│   │           └── master</div><div class=\"line\">│   ├── objects</div><div class=\"line\">│   │   ├── 82</div><div class=\"line\">│   │   │   └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89</div><div class=\"line\">│   │   ├── e6</div><div class=\"line\">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</div><div class=\"line\">│   │   ├── f1</div><div class=\"line\">│   │   │   └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf</div><div class=\"line\">│   │   ├── info</div><div class=\"line\">│   │   └── pack</div><div class=\"line\">│   └── refs</div><div class=\"line\">│       ├── heads</div><div class=\"line\">│       │   └── master</div><div class=\"line\">│       └── tags</div><div class=\"line\">├── .gitignore</div><div class=\"line\">└── NAMA_PROJECT</div><div class=\"line\">    ├── .angular-cli.json</div><div class=\"line\">    ├── e2e</div><div class=\"line\">    │   ├── app.e2e-spec.ts</div><div class=\"line\">    │   ├── app.po.ts</div><div class=\"line\">    │   └── tsconfig.e2e.json</div><div class=\"line\">    ├── .editorconfig</div><div class=\"line\">    ├── .gitignore</div><div class=\"line\">    ├── karma.conf.js</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    ├── protractor.conf.js</div><div class=\"line\">    ├── README.md</div><div class=\"line\">    ├── src</div><div class=\"line\">    │   ├── app</div><div class=\"line\">    │   │   ├── app.component.css</div><div class=\"line\">    │   │   ├── app.component.html</div><div class=\"line\">    │   │   ├── app.component.spec.ts</div><div class=\"line\">    │   │   ├── app.component.ts</div><div class=\"line\">    │   │   └── app.module.ts</div><div class=\"line\">    │   ├── assets</div><div class=\"line\">    │   │   └── .gitkeep</div><div class=\"line\">    │   ├── environments</div><div class=\"line\">    │   │   ├── environment.prod.ts</div><div class=\"line\">    │   │   └── environment.ts</div><div class=\"line\">    │   ├── favicon.ico</div><div class=\"line\">    │   ├── index.html</div><div class=\"line\">    │   ├── main.ts</div><div class=\"line\">    │   ├── polyfills.ts</div><div class=\"line\">    │   ├── styles.css</div><div class=\"line\">    │   ├── test.ts</div><div class=\"line\">    │   ├── tsconfig.app.json</div><div class=\"line\">    │   ├── tsconfig.spec.json</div><div class=\"line\">    │   └── typings.d.ts</div><div class=\"line\">    ├── tsconfig.json</div><div class=\"line\">    └── tslint.json</div></pre></td></tr></table></figure></p>\n<p>Pada Project tersebut terdapat beberapa file yaitu :</p>\n<ul>\n<li>angular-cli.json. File ini berisi konfigurasi dari tools angular cli.</li>\n<li>package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library.</li>\n<li>tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat <code>emitDecoratorMetadata</code> yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga <code>module</code> yang berisi module systemnya. Terdapat juga <code>target</code> untuk outputnya nanti menjadi apa. Terdapat juga <code>moduleResolution</code> untuk system modulnya. Terdapat juga <code>outDir</code> untuk compilenya kemana. Terdapat juga <code>sourceMap</code> untuk mapping hasil compile ke sourcecode aslinya.</li>\n<li>node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload.</li>\n<li>index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS.</li>\n<li>main.ts. File ini merupaka main class nya.</li>\n<li>style.css. File css untuk global.</li>\n<li>app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu <code>.css</code> untuk cssnya, <code>.html</code> untuk templatenya, <code>.spec.ts</code> untuk testing, <code>.ts</code> untuk konfigurasi template dan ts, <code>module.ts</code> untuk modulenya (kalo di java seperti package).</li>\n</ul>\n<h2 id=\"Running-Project\"><a href=\"#Running-Project\" class=\"headerlink\" title=\"Running Project\"></a>Running Project</h2><p>Untuk running project dapat gunakan code berikut pada terminal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd NAMA_PROJECT</div><div class=\"line\">ng serve</div></pre></td></tr></table></figure></p>\n<p>Hasilnya dapat anda lihat di browser pada <code>localhost:4200</code>.</p>\n<h2 id=\"Build-Project\"><a href=\"#Build-Project\" class=\"headerlink\" title=\"Build Project\"></a>Build Project</h2><p>Untuk running project dapat gunakan code berikut pada terminal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure></p>\n<p>Hasilnya dapat anda lihat pada folder dist</p>\n<h2 id=\"Flow-Angular2\"><a href=\"#Flow-Angular2\" class=\"headerlink\" title=\"Flow Angular2\"></a>Flow Angular2</h2><ol>\n<li>main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding <code>import { AppModule } from &#39;./app/app.module&#39;;</code>. Selain itu main.ts juga membootrap app.module.ts melalui koding <code>platformBrowserDynamic().bootstrapModule(AppModule);</code></li>\n<li>Selanjutnya app.module.ts. Di app.module.ts dia terdapat <code>declaration</code> yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada <code>import</code> yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada <code>bootstrap</code> yang digunakan untuk menjalankan file (yaitu AppComponent).</li>\n<li>Selanjutnya app.component.ts. Di app.component.ts terdapat <code>selector</code> yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari <code>templateUrl</code>.</li>\n<li>Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export.</li>\n</ol>\n<h2 id=\"Install-Bootstrap\"><a href=\"#Install-Bootstrap\" class=\"headerlink\" title=\"Install Bootstrap\"></a>Install Bootstrap</h2><p>Step ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.<br>Untuk menginstallnya dapat menggunakan kode<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install ng2-bootstrap bootstrap --save</div></pre></td></tr></table></figure></p>\n<p>Setelah itu includekan bootstrapnya ke file angular-cli.json.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"styles\": [</div><div class=\"line\">  \"styles.css\",</div><div class=\"line\">  \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"</div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<h2 id=\"Arsitektur-Aplikasi-Angular2\"><a href=\"#Arsitektur-Aplikasi-Angular2\" class=\"headerlink\" title=\"Arsitektur Aplikasi Angular2\"></a>Arsitektur Aplikasi Angular2</h2><p>Arsitekturnya kurang lebih seperti berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aplikasi</div><div class=\"line\">├── Top Level Component</div><div class=\"line\">├── Module</div><div class=\"line\">    ├── Component</div><div class=\"line\">        |── File Typescript/JS</div><div class=\"line\">        |── File HTML</div></pre></td></tr></table></figure></p>\n<p>Penjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aplikasi Tabungan Emas</div><div class=\"line\">├── Sidebar Component</div><div class=\"line\">│   ├── Informasi Rekening</div><div class=\"line\">│   ├── Transaksi Emas</div><div class=\"line\">│   │   ├── Form</div><div class=\"line\">│   │   ├── Rekap</div><div class=\"line\">├── Navbar Component</div><div class=\"line\">│   ├── Settings</div><div class=\"line\">│   ├── Profile</div><div class=\"line\">│   ├── Help</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h2 id=\"Menginstall-Node\"><a href=\"#Menginstall-Node\" class=\"headerlink\" title=\"Menginstall Node\"></a>Menginstall Node</h2><p>Untuk menginstall node saya menyarankan menggunakan tutorial dari <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04\">Digital Ocean</a> dengan menggunakan nvm.</p>\n<h1 id=\"Menginstall-npm\"><a href=\"#Menginstall-npm\" class=\"headerlink\" title=\"Menginstall npm\"></a>Menginstall npm</h1><p>Untuk menginstall npm cukup tulis kode berikut pada terminal anda (khusus untuk ubuntu):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install npm</div></pre></td></tr></table></figure></p>\n<p>Atau apabila anda menggunakan Sistem Operasi yang lain anda bisa mencarinya di internet.</p>\n<h2 id=\"Menginstall-Angular-CLI\"><a href=\"#Menginstall-Angular-CLI\" class=\"headerlink\" title=\"Menginstall Angular CLI\"></a>Menginstall Angular CLI</h2><p>Angular ini adalah salah satu tools untuk membuat aplikasi angular2. Untuk menggunakanya cukup tulis kode berikut pada terminal anda :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g @angular/cli</div></pre></td></tr></table></figure></p>\n<h2 id=\"Membuat-Project-Angular2\"><a href=\"#Membuat-Project-Angular2\" class=\"headerlink\" title=\"Membuat Project Angular2\"></a>Membuat Project Angular2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng new NAMA_PROJECT</div></pre></td></tr></table></figure>\n<p>Setelah itu akan dibuat struktur folder sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAMA_FOLDER/</div><div class=\"line\">├── .git</div><div class=\"line\">│   ├── branches</div><div class=\"line\">│   ├── COMMIT_EDITMSG</div><div class=\"line\">│   ├── config</div><div class=\"line\">│   ├── description</div><div class=\"line\">│   ├── HEAD</div><div class=\"line\">│   ├── hooks</div><div class=\"line\">│   │   ├── applypatch-msg.sample</div><div class=\"line\">│   │   ├── commit-msg.sample</div><div class=\"line\">│   │   ├── post-update.sample</div><div class=\"line\">│   │   ├── pre-applypatch.sample</div><div class=\"line\">│   │   ├── pre-commit.sample</div><div class=\"line\">│   │   ├── prepare-commit-msg.sample</div><div class=\"line\">│   │   ├── pre-push.sample</div><div class=\"line\">│   │   ├── pre-rebase.sample</div><div class=\"line\">│   │   └── update.sample</div><div class=\"line\">│   ├── index</div><div class=\"line\">│   ├── info</div><div class=\"line\">│   │   └── exclude</div><div class=\"line\">│   ├── logs</div><div class=\"line\">│   │   ├── HEAD</div><div class=\"line\">│   │   └── refs</div><div class=\"line\">│   │       └── heads</div><div class=\"line\">│   │           └── master</div><div class=\"line\">│   ├── objects</div><div class=\"line\">│   │   ├── 82</div><div class=\"line\">│   │   │   └── e3a754b6a0fcb238b03c0e47d05219fbf9cf89</div><div class=\"line\">│   │   ├── e6</div><div class=\"line\">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</div><div class=\"line\">│   │   ├── f1</div><div class=\"line\">│   │   │   └── 65300d6c67d5599ceb9b0ed355c2a8cbe336bf</div><div class=\"line\">│   │   ├── info</div><div class=\"line\">│   │   └── pack</div><div class=\"line\">│   └── refs</div><div class=\"line\">│       ├── heads</div><div class=\"line\">│       │   └── master</div><div class=\"line\">│       └── tags</div><div class=\"line\">├── .gitignore</div><div class=\"line\">└── NAMA_PROJECT</div><div class=\"line\">    ├── .angular-cli.json</div><div class=\"line\">    ├── e2e</div><div class=\"line\">    │   ├── app.e2e-spec.ts</div><div class=\"line\">    │   ├── app.po.ts</div><div class=\"line\">    │   └── tsconfig.e2e.json</div><div class=\"line\">    ├── .editorconfig</div><div class=\"line\">    ├── .gitignore</div><div class=\"line\">    ├── karma.conf.js</div><div class=\"line\">    ├── package.json</div><div class=\"line\">    ├── protractor.conf.js</div><div class=\"line\">    ├── README.md</div><div class=\"line\">    ├── src</div><div class=\"line\">    │   ├── app</div><div class=\"line\">    │   │   ├── app.component.css</div><div class=\"line\">    │   │   ├── app.component.html</div><div class=\"line\">    │   │   ├── app.component.spec.ts</div><div class=\"line\">    │   │   ├── app.component.ts</div><div class=\"line\">    │   │   └── app.module.ts</div><div class=\"line\">    │   ├── assets</div><div class=\"line\">    │   │   └── .gitkeep</div><div class=\"line\">    │   ├── environments</div><div class=\"line\">    │   │   ├── environment.prod.ts</div><div class=\"line\">    │   │   └── environment.ts</div><div class=\"line\">    │   ├── favicon.ico</div><div class=\"line\">    │   ├── index.html</div><div class=\"line\">    │   ├── main.ts</div><div class=\"line\">    │   ├── polyfills.ts</div><div class=\"line\">    │   ├── styles.css</div><div class=\"line\">    │   ├── test.ts</div><div class=\"line\">    │   ├── tsconfig.app.json</div><div class=\"line\">    │   ├── tsconfig.spec.json</div><div class=\"line\">    │   └── typings.d.ts</div><div class=\"line\">    ├── tsconfig.json</div><div class=\"line\">    └── tslint.json</div></pre></td></tr></table></figure></p>\n<p>Pada Project tersebut terdapat beberapa file yaitu :</p>\n<ul>\n<li>angular-cli.json. File ini berisi konfigurasi dari tools angular cli.</li>\n<li>package.json. File ini digenerate untuk setiap project yang menggunakan npm. Berisi konfigurasi dependency/library.</li>\n<li>tsconfig.json. File ini berisi konfigurasi untuk typscript compiler. Terdapat <code>emitDecoratorMetadata</code> yang digunakan memproses decorator dimana fungsinya sama dengan anotation pada spring framework. Decorator berfungsi untuk mengkonversi Typescript ke Javascript. Terdapat juga <code>module</code> yang berisi module systemnya. Terdapat juga <code>target</code> untuk outputnya nanti menjadi apa. Terdapat juga <code>moduleResolution</code> untuk system modulnya. Terdapat juga <code>outDir</code> untuk compilenya kemana. Terdapat juga <code>sourceMap</code> untuk mapping hasil compile ke sourcecode aslinya.</li>\n<li>node_module. Folder ini merupakan repository local yang berisi dependency yang telah didownload.</li>\n<li>index.html. File ini merupaka html indexnya. Angular2 ini menggenerate Single Page Aplication. Jadi file html cuma 1 dan yang lainya JS.</li>\n<li>main.ts. File ini merupaka main class nya.</li>\n<li>style.css. File css untuk global.</li>\n<li>app. Folder yang berisi sourcecode. Di folder ini terdapat beberapa file yaitu <code>.css</code> untuk cssnya, <code>.html</code> untuk templatenya, <code>.spec.ts</code> untuk testing, <code>.ts</code> untuk konfigurasi template dan ts, <code>module.ts</code> untuk modulenya (kalo di java seperti package).</li>\n</ul>\n<h2 id=\"Running-Project\"><a href=\"#Running-Project\" class=\"headerlink\" title=\"Running Project\"></a>Running Project</h2><p>Untuk running project dapat gunakan code berikut pada terminal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd NAMA_PROJECT</div><div class=\"line\">ng serve</div></pre></td></tr></table></figure></p>\n<p>Hasilnya dapat anda lihat di browser pada <code>localhost:4200</code>.</p>\n<h2 id=\"Build-Project\"><a href=\"#Build-Project\" class=\"headerlink\" title=\"Build Project\"></a>Build Project</h2><p>Untuk running project dapat gunakan code berikut pada terminal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng serve</div></pre></td></tr></table></figure></p>\n<p>Hasilnya dapat anda lihat pada folder dist</p>\n<h2 id=\"Flow-Angular2\"><a href=\"#Flow-Angular2\" class=\"headerlink\" title=\"Flow Angular2\"></a>Flow Angular2</h2><ol>\n<li>main.ts akan dijalankan pertama kali. Di main.ts sendiri dia mengimport app.module.ts melalui koding <code>import { AppModule } from &#39;./app/app.module&#39;;</code>. Selain itu main.ts juga membootrap app.module.ts melalui koding <code>platformBrowserDynamic().bootstrapModule(AppModule);</code></li>\n<li>Selanjutnya app.module.ts. Di app.module.ts dia terdapat <code>declaration</code> yang berisi kelas-kelas apa saja yang ada di modul ini. Selanjutnya ada <code>import</code> yang berisi kelas-kelas apa saja yang diimport. Selanjutnya ada <code>bootstrap</code> yang digunakan untuk menjalankan file (yaitu AppComponent).</li>\n<li>Selanjutnya app.component.ts. Di app.component.ts terdapat <code>selector</code> yang digunakan untuk tag pada html. Jadi dia akan mencari tag di html (yaitu app-root), apabila ada maka dia akan menginjectkan templatenya ke dalam tag tersebut. Templatenya sendiri berasa dari <code>templateUrl</code>.</li>\n<li>Selanjutnya app.component.html. Di app.component.html apabila ada variabel maka dia akan mengambilnya dari app.component.ts bagian export.</li>\n</ol>\n<h2 id=\"Install-Bootstrap\"><a href=\"#Install-Bootstrap\" class=\"headerlink\" title=\"Install Bootstrap\"></a>Install Bootstrap</h2><p>Step ini optional karena untuk css bisa pake framework yang lain atau menginputkan sendiri cssnya. Step ini hanya untuk mempermudah saja.<br>Untuk menginstallnya dapat menggunakan kode<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install ng2-bootstrap bootstrap --save</div></pre></td></tr></table></figure></p>\n<p>Setelah itu includekan bootstrapnya ke file angular-cli.json.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"styles\": [</div><div class=\"line\">  \"styles.css\",</div><div class=\"line\">  \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"</div><div class=\"line\">],</div></pre></td></tr></table></figure></p>\n<h2 id=\"Arsitektur-Aplikasi-Angular2\"><a href=\"#Arsitektur-Aplikasi-Angular2\" class=\"headerlink\" title=\"Arsitektur Aplikasi Angular2\"></a>Arsitektur Aplikasi Angular2</h2><p>Arsitekturnya kurang lebih seperti berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aplikasi</div><div class=\"line\">├── Top Level Component</div><div class=\"line\">├── Module</div><div class=\"line\">    ├── Component</div><div class=\"line\">        |── File Typescript/JS</div><div class=\"line\">        |── File HTML</div></pre></td></tr></table></figure></p>\n<p>Penjelasanya adalah setiap aplikasi terdiri dari satu atau lebih Component. Module yang tersusun dari satu atau lebih Component. Component sendiri dibuat berdasarkan file Typescript dan HTML. Berikut contoh sederhananya:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aplikasi Tabungan Emas</div><div class=\"line\">├── Sidebar Component</div><div class=\"line\">│   ├── Informasi Rekening</div><div class=\"line\">│   ├── Transaksi Emas</div><div class=\"line\">│   │   ├── Form</div><div class=\"line\">│   │   ├── Rekap</div><div class=\"line\">├── Navbar Component</div><div class=\"line\">│   ├── Settings</div><div class=\"line\">│   ├── Profile</div><div class=\"line\">│   ├── Help</div></pre></td></tr></table></figure></p>\n"},{"title":"Android","date":"2017-04-23T07:17:29.000Z","_content":"![](https://mediarealm.com.au/wp-content/uploads/2013/02/Android-Banner1.jpg)\n# Android for Beginner\n## Layouting\n### View\n#### Pengertian View\nView pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya.\n\n####\tMacam - macam view berdasar kontenya\n- Text View\n- Image View\n- Button\n\nDalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail.\n\nIDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio.\n\nBahasa yang digunakan untuk membuat view pada Android berupa XML.\n\nUntuk menulis kode xml anda dapat menggunakan https://udacity.github.io/android-layout.\n\nKode XML digambarkan sebagai berikut :\n\t<!--gambar video ke 10-->\n\t```xml\n\t<TextView\n\t\tandroid:text=\"Ini Text\"\n\t\tandroid:textColor=\"@android:color/white\"\n\t\tandroid:background=\"@android:color/black\"\n\t\tandroid:layout_width=\"200dp\"\n\t\tandroid:layout_height=\"300dp\"\n\t/>\n\t```\nKode tersebut memiliki ketentuan yaitu :\n- Kode program ditulis di dalam tag. Tag didefinisikan dengan `<>` (kurung siku).\n- Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda `/`(garis miring).\n```xml\n<TextView\n  .....\n/>\n```\nTag juga bisa didefinisikan seperti berikut :\n```xml\n<TextView>\n  ....\n</TextView>\n```\n- Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView.\n- Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll.\n- Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda  `=` (samadengan) dan ditulis di dalam `\"\"` (tanda petik dua).\n\n#### Text View\nMacam macam atribut untuk text view :\n- Menulis text\n\n```xml\n<TextView\n  android:text=\"tulis text anda di sini\"\n/>\n```\n\n- Mengatur tinggi dan lebar layout\n\n```xml\n<TextView\n  android:height_layout=\"300dp\"\n  android:width_layout=\"300dp\"\n/>\n```\nSatuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan `dp`.\nAtau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan `wrap_content`.\n```xml\n<TextView\n  android:height_layout=\"wrap_content\"\n  android:width_layout=\"wrap_content\"\n/>\n```\n\n- Mengganti warna text\n\n```xml\n<TextView\n  android:textColor=\"@android:color/white\"\n  atau\n  android:textColor=\"#Kode_hexa_desimal\"\n/>\n```\n\n- Mengganti ukuran font\n\n```xml\n<TextView\n  android:textSize=\"30sp\"\n/>\n```\nSatuan ukuran font didefinisikan dengan `sp`. Ukuran font dapat juga didefinisikan sebagai berikut :\n\n```xml\n<TextView\n  android:textAppearance=\"?android:textAppearanceLarge\"\n  android:textAppearance=\"?android:textAppearanceMedium\"\n  android:textAppearance=\"?android:textAppearanceSmall\"\n/>\n```\n\n- Referensi untuk design dapat dilihat di [Material Design Spec](https://www.google.com/design/spec/material-design/introduction.html) atau [google+ #AndroidDev #Protip](https://plus.google.com/+AndroidDevelopers)\n\n\n#### Image view\nMacam-macam atribut untuk Image View :\n- Memilih gambar dari resource/assets:\n\n```xml\n<ImageView\n  android:src=\"@drawable/ocean\"\n/>\n```\n\n- Mengatur tinggi dan lebar layout\n\n```xml\n<TextView\n  android:height_layout=\"300dp\"\n  android:width_layout=\"300dp\"\n/>\n```\n\n- Mengatur posisi dan skala gambar\n\n```xml\n<ImageView\n  android:scaleType=\"centerCrop\"\n  atau\n  android:scaleType=\"center\"\n/>\n```\n\n### Memposisikan View\n#### View Group\nView group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti `div` pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.\nKode XML dari view grup digambarkan sebagai berikut :\n```xml\n<LinearLayout\n  android:orientation=\"vertical\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\">\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    />\n</LinearLayout>\n```\n\nNote :\nPerlu diketahui setiap XML yang kita buat harus kita tambahkan `xmlns:android=\"http://schemas.android.com/apk/res/android\"`. Kode tersebut biasa disebut `XML namespace declaration`. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android.  \n\nMacam-macam view grup :\n1.  Linear Layout\n    View disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag `LinearLayout`.\n    - Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut `android:orientation=\"vertical\"`.\n    - Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut `android:orientation=\"horizontal\"`.\n\nUntuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    />\n</LinearLayout>\n```\nPada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar.\n\nUntuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan `android:layout_weight=\"1\"` dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"0dp\"\n    android:layout_weight=\"1\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"0dp\"\n    android:layout_weight=\"1\"\n    />\n</LinearLayout>\n```\n\n2.  Relative Layout\n    View disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah.\n    - Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent.\n\n    Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_alignParentTop=\"true/false\"\n        android:layout_alignParentButton=\"true/false\"\n        android:layout_alignParentLeft=\"true/false\"\n        android:layout_alignParentRight=\"true/false\">\n    <RelativeView>\n    ```\n\n    Untuk mengatur perataan konten dapat menggunakan\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_centerHorizontal=\"true/false\"\n        android:layout_centerVertical=\"true/false\">\n    </RelativeView>\n    ```\n\n    Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya.\n\n    - Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya.\n\n    Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_alignParentTop=\"true/false\"\n        android:layout_alignParentButton=\"true/false\"\n        android:layout_alignParentLeft=\"true/false\"\n        android:layout_alignParentRight=\"true/false\">\n    <RelativeView>\n    ```\n\nhttps://icons8.com/android-icons/\n","source":"_posts/pemrograman/android/1-view.md","raw":"---\ntitle: Android\ndate: 2017-04-23 14:17:29\ncategories:\n  - Pemrograman\n  - Android\n---\n![](https://mediarealm.com.au/wp-content/uploads/2013/02/Android-Banner1.jpg)\n# Android for Beginner\n## Layouting\n### View\n#### Pengertian View\nView pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya.\n\n####\tMacam - macam view berdasar kontenya\n- Text View\n- Image View\n- Button\n\nDalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail.\n\nIDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio.\n\nBahasa yang digunakan untuk membuat view pada Android berupa XML.\n\nUntuk menulis kode xml anda dapat menggunakan https://udacity.github.io/android-layout.\n\nKode XML digambarkan sebagai berikut :\n\t<!--gambar video ke 10-->\n\t```xml\n\t<TextView\n\t\tandroid:text=\"Ini Text\"\n\t\tandroid:textColor=\"@android:color/white\"\n\t\tandroid:background=\"@android:color/black\"\n\t\tandroid:layout_width=\"200dp\"\n\t\tandroid:layout_height=\"300dp\"\n\t/>\n\t```\nKode tersebut memiliki ketentuan yaitu :\n- Kode program ditulis di dalam tag. Tag didefinisikan dengan `<>` (kurung siku).\n- Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda `/`(garis miring).\n```xml\n<TextView\n  .....\n/>\n```\nTag juga bisa didefinisikan seperti berikut :\n```xml\n<TextView>\n  ....\n</TextView>\n```\n- Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView.\n- Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll.\n- Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda  `=` (samadengan) dan ditulis di dalam `\"\"` (tanda petik dua).\n\n#### Text View\nMacam macam atribut untuk text view :\n- Menulis text\n\n```xml\n<TextView\n  android:text=\"tulis text anda di sini\"\n/>\n```\n\n- Mengatur tinggi dan lebar layout\n\n```xml\n<TextView\n  android:height_layout=\"300dp\"\n  android:width_layout=\"300dp\"\n/>\n```\nSatuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan `dp`.\nAtau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan `wrap_content`.\n```xml\n<TextView\n  android:height_layout=\"wrap_content\"\n  android:width_layout=\"wrap_content\"\n/>\n```\n\n- Mengganti warna text\n\n```xml\n<TextView\n  android:textColor=\"@android:color/white\"\n  atau\n  android:textColor=\"#Kode_hexa_desimal\"\n/>\n```\n\n- Mengganti ukuran font\n\n```xml\n<TextView\n  android:textSize=\"30sp\"\n/>\n```\nSatuan ukuran font didefinisikan dengan `sp`. Ukuran font dapat juga didefinisikan sebagai berikut :\n\n```xml\n<TextView\n  android:textAppearance=\"?android:textAppearanceLarge\"\n  android:textAppearance=\"?android:textAppearanceMedium\"\n  android:textAppearance=\"?android:textAppearanceSmall\"\n/>\n```\n\n- Referensi untuk design dapat dilihat di [Material Design Spec](https://www.google.com/design/spec/material-design/introduction.html) atau [google+ #AndroidDev #Protip](https://plus.google.com/+AndroidDevelopers)\n\n\n#### Image view\nMacam-macam atribut untuk Image View :\n- Memilih gambar dari resource/assets:\n\n```xml\n<ImageView\n  android:src=\"@drawable/ocean\"\n/>\n```\n\n- Mengatur tinggi dan lebar layout\n\n```xml\n<TextView\n  android:height_layout=\"300dp\"\n  android:width_layout=\"300dp\"\n/>\n```\n\n- Mengatur posisi dan skala gambar\n\n```xml\n<ImageView\n  android:scaleType=\"centerCrop\"\n  atau\n  android:scaleType=\"center\"\n/>\n```\n\n### Memposisikan View\n#### View Group\nView group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti `div` pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.\nKode XML dari view grup digambarkan sebagai berikut :\n```xml\n<LinearLayout\n  android:orientation=\"vertical\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\">\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    />\n</LinearLayout>\n```\n\nNote :\nPerlu diketahui setiap XML yang kita buat harus kita tambahkan `xmlns:android=\"http://schemas.android.com/apk/res/android\"`. Kode tersebut biasa disebut `XML namespace declaration`. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android.  \n\nMacam-macam view grup :\n1.  Linear Layout\n    View disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag `LinearLayout`.\n    - Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut `android:orientation=\"vertical\"`.\n    - Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut `android:orientation=\"horizontal\"`.\n\nUntuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    />\n</LinearLayout>\n```\nPada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar.\n\nUntuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan `android:layout_weight=\"1\"` dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :\n```xml\n<LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  android:orientation=\"vertical\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  >\n  <TextView\n    android:text=\"Guest List\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"0dp\"\n    android:layout_weight=\"1\"\n    />\n  <TextView\n    android:text=\"Kunai\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"0dp\"\n    android:layout_weight=\"1\"\n    />\n</LinearLayout>\n```\n\n2.  Relative Layout\n    View disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah.\n    - Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent.\n\n    Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_alignParentTop=\"true/false\"\n        android:layout_alignParentButton=\"true/false\"\n        android:layout_alignParentLeft=\"true/false\"\n        android:layout_alignParentRight=\"true/false\">\n    <RelativeView>\n    ```\n\n    Untuk mengatur perataan konten dapat menggunakan\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_centerHorizontal=\"true/false\"\n        android:layout_centerVertical=\"true/false\">\n    </RelativeView>\n    ```\n\n    Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya.\n\n    - Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya.\n\n    Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut\n    ```xml\n    <RelativeView>\n      ....\n      <TextView\n        android:layout_alignParentTop=\"true/false\"\n        android:layout_alignParentButton=\"true/false\"\n        android:layout_alignParentLeft=\"true/false\"\n        android:layout_alignParentRight=\"true/false\">\n    <RelativeView>\n    ```\n\nhttps://icons8.com/android-icons/\n","slug":"pemrograman/android/1-view","published":1,"updated":"2017-06-19T03:33:50.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnhq0017islpzjpbg496","content":"<p><img src=\"https://mediarealm.com.au/wp-content/uploads/2013/02/Android-Banner1.jpg\" alt=\"\"></p>\n<h1 id=\"Android-for-Beginner\"><a href=\"#Android-for-Beginner\" class=\"headerlink\" title=\"Android for Beginner\"></a>Android for Beginner</h1><h2 id=\"Layouting\"><a href=\"#Layouting\" class=\"headerlink\" title=\"Layouting\"></a>Layouting</h2><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><h4 id=\"Pengertian-View\"><a href=\"#Pengertian-View\" class=\"headerlink\" title=\"Pengertian View\"></a>Pengertian View</h4><p>View pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya.</p>\n<h4 id=\"Macam-macam-view-berdasar-kontenya\"><a href=\"#Macam-macam-view-berdasar-kontenya\" class=\"headerlink\" title=\"Macam - macam view berdasar kontenya\"></a>Macam - macam view berdasar kontenya</h4><ul>\n<li>Text View</li>\n<li>Image View</li>\n<li>Button</li>\n</ul>\n<p>Dalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail.</p>\n<p>IDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio.</p>\n<p>Bahasa yang digunakan untuk membuat view pada Android berupa XML.</p>\n<p>Untuk menulis kode xml anda dapat menggunakan <a href=\"https://udacity.github.io/android-layout\" target=\"_blank\" rel=\"external\">https://udacity.github.io/android-layout</a>.</p>\n<p>Kode XML digambarkan sebagai berikut :<br>    <!--gambar video ke 10--><br>    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Ini Text\"</span></div><div class=\"line\">\t<span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span></div><div class=\"line\">\t<span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/black\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<p>Kode tersebut memiliki ketentuan yaitu :</p>\n<ul>\n<li>Kode program ditulis di dalam tag. Tag didefinisikan dengan <code>&lt;&gt;</code> (kurung siku).</li>\n<li>Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda <code>/</code>(garis miring).<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">.....</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tag juga bisa didefinisikan seperti berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView.</li>\n<li>Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll.</li>\n<li>Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda  <code>=</code> (samadengan) dan ditulis di dalam <code>&quot;&quot;</code> (tanda petik dua).</li>\n</ul>\n<h4 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h4><p>Macam macam atribut untuk text view :</p>\n<ul>\n<li>Menulis text</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:text</span>=<span class=\"string\">\"tulis text anda di sini\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur tinggi dan lebar layout</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<p>Satuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan <code>dp</code>.<br>Atau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan <code>wrap_content</code>.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Mengganti warna text</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span></div><div class=\"line\">  <span class=\"attr\">atau</span></div><div class=\"line\">  <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#Kode_hexa_desimal\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Mengganti ukuran font</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<p>Satuan ukuran font didefinisikan dengan <code>sp</code>. Ukuran font dapat juga didefinisikan sebagai berikut :</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Referensi untuk design dapat dilihat di <a href=\"https://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\" rel=\"external\">Material Design Spec</a> atau <a href=\"https://plus.google.com/+AndroidDevelopers\" target=\"_blank\" rel=\"external\">google+ #AndroidDev #Protip</a></li>\n</ul>\n<h4 id=\"Image-view\"><a href=\"#Image-view\" class=\"headerlink\" title=\"Image view\"></a>Image view</h4><p>Macam-macam atribut untuk Image View :</p>\n<ul>\n<li>Memilih gambar dari resource/assets:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">  <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ocean\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur tinggi dan lebar layout</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur posisi dan skala gambar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">  <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">  <span class=\"attr\">atau</span></div><div class=\"line\">  <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Memposisikan-View\"><a href=\"#Memposisikan-View\" class=\"headerlink\" title=\"Memposisikan View\"></a>Memposisikan View</h3><h4 id=\"View-Group\"><a href=\"#View-Group\" class=\"headerlink\" title=\"View Group\"></a>View Group</h4><p>View group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti <code>div</code> pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.<br>Kode XML dari view grup digambarkan sebagai berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Note :<br>Perlu diketahui setiap XML yang kita buat harus kita tambahkan <code>xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code>. Kode tersebut biasa disebut <code>XML namespace declaration</code>. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android.  </p>\n<p>Macam-macam view grup :</p>\n<ol>\n<li>Linear Layout<br>View disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag <code>LinearLayout</code>.<ul>\n<li>Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut <code>android:orientation=&quot;vertical&quot;</code>.</li>\n<li>Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut <code>android:orientation=&quot;horizontal&quot;</code>.</li>\n</ul>\n</li>\n</ol>\n<p>Untuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Pada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar.</p>\n<p>Untuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan <code>android:layout_weight=&quot;1&quot;</code> dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  &gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>Relative Layout<br>View disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah.</p>\n<ul>\n<li>Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent.</li>\n</ul>\n<p>Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentButton</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true/false\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Untuk mengatur perataan konten dapat menggunakan</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true/false\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya.</p>\n<ul>\n<li>Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya.</li>\n</ul>\n<p>Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentButton</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true/false\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://icons8.com/android-icons/\" target=\"_blank\" rel=\"external\">https://icons8.com/android-icons/</a></p>\n","excerpt":"","more":"<p><img src=\"https://mediarealm.com.au/wp-content/uploads/2013/02/Android-Banner1.jpg\" alt=\"\"></p>\n<h1 id=\"Android-for-Beginner\"><a href=\"#Android-for-Beginner\" class=\"headerlink\" title=\"Android for Beginner\"></a>Android for Beginner</h1><h2 id=\"Layouting\"><a href=\"#Layouting\" class=\"headerlink\" title=\"Layouting\"></a>Layouting</h2><h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><h4 id=\"Pengertian-View\"><a href=\"#Pengertian-View\" class=\"headerlink\" title=\"Pengertian View\"></a>Pengertian View</h4><p>View pada dasarnya adalah sebuah kotak yang berisi berbagai macam konten. Konten tersebut dapat berupa kalimat gambar, tulisan tombol dan sebagainya.</p>\n<h4 id=\"Macam-macam-view-berdasar-kontenya\"><a href=\"#Macam-macam-view-berdasar-kontenya\" class=\"headerlink\" title=\"Macam - macam view berdasar kontenya\"></a>Macam - macam view berdasar kontenya</h4><ul>\n<li>Text View</li>\n<li>Image View</li>\n<li>Button</li>\n</ul>\n<p>Dalam menuliskan pemrograman, kita diharuskan untuk menulis kode program sebagai instruksi yang spesifik dan detail.</p>\n<p>IDE (Integrated Development Environment) merupakan suatu ruang kerja berupa perangkat lunak yang digunakan untuk menulis kode program. IDE yang biasa digunakan untuk menulis kode program android adalah Android Studio.</p>\n<p>Bahasa yang digunakan untuk membuat view pada Android berupa XML.</p>\n<p>Untuk menulis kode xml anda dapat menggunakan <a href=\"https://udacity.github.io/android-layout\">https://udacity.github.io/android-layout</a>.</p>\n<p>Kode XML digambarkan sebagai berikut :<br>    <!--gambar video ke 10--><br>    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Ini Text\"</span></div><div class=\"line\">\t<span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span></div><div class=\"line\">\t<span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/black\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Kode tersebut memiliki ketentuan yaitu :</p>\n<ul>\n<li>Kode program ditulis di dalam tag. Tag didefinisikan dengan <code>&lt;&gt;</code> (kurung siku).</li>\n<li>Terdapat 2 tag yaitu tag pembuka dan tag penutup. Perbedaan antara tag pembuka dan tag penutup terdapat tanda <code>/</code>(garis miring).<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">.....</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tag juga bisa didefinisikan seperti berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Terdapat nama tag yang mewakili view yang ingin dipakai. Dalam contoh diatas nama tag adalah TextView.</li>\n<li>Terdapat atribut(-atribut) yang digunakan untuk mengcustom view tersebut. Semisal untuk konten, warna tinggi dll.</li>\n<li>Setiap atribut memiliki nilai. Nilai mewakili apa yang akan dicustom pada setiap atribut. Nilai tersebut dipisahkan dari atributnya oleh tanda  <code>=</code> (samadengan) dan ditulis di dalam <code>&quot;&quot;</code> (tanda petik dua).</li>\n</ul>\n<h4 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h4><p>Macam macam atribut untuk text view :</p>\n<ul>\n<li>Menulis text</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:text</span>=<span class=\"string\">\"tulis text anda di sini\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur tinggi dan lebar layout</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<p>Satuan panjang (untuk panjang, tinggi dll) biasanya didefinisikan dengan satuan <code>dp</code>.<br>Atau untuk membuatnya menyesuaikan lebar dan tinggi text, anda dapat menggunakan mengisi nilainya dengan <code>wrap_content</code>.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>Mengganti warna text</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span></div><div class=\"line\">  <span class=\"attr\">atau</span></div><div class=\"line\">  <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#Kode_hexa_desimal\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Mengganti ukuran font</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<p>Satuan ukuran font didefinisikan dengan <code>sp</code>. Ukuran font dapat juga didefinisikan sebagai berikut :</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></div><div class=\"line\">  <span class=\"attr\">android:textAppearance</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Referensi untuk design dapat dilihat di <a href=\"https://www.google.com/design/spec/material-design/introduction.html\">Material Design Spec</a> atau <a href=\"https://plus.google.com/+AndroidDevelopers\">google+ #AndroidDev #Protip</a></li>\n</ul>\n<h4 id=\"Image-view\"><a href=\"#Image-view\" class=\"headerlink\" title=\"Image view\"></a>Image view</h4><p>Macam-macam atribut untuk Image View :</p>\n<ul>\n<li>Memilih gambar dari resource/assets:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">  <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ocean\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur tinggi dan lebar layout</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">  <span class=\"attr\">android:height_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">  <span class=\"attr\">android:width_layout</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Mengatur posisi dan skala gambar</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">  <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">  <span class=\"attr\">atau</span></div><div class=\"line\">  <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Memposisikan-View\"><a href=\"#Memposisikan-View\" class=\"headerlink\" title=\"Memposisikan View\"></a>Memposisikan View</h3><h4 id=\"View-Group\"><a href=\"#View-Group\" class=\"headerlink\" title=\"View Group\"></a>View Group</h4><p>View group ini digunakan untuk mengelompokkan berbagai macam view. Jadi dia seperti <code>div</code> pada html. View group ini juga dapat didefinisikan sebagai parent sedangkan view didefinisikan sebagai child.<br>Kode XML dari view grup digambarkan sebagai berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Note :<br>Perlu diketahui setiap XML yang kita buat harus kita tambahkan <code>xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</code>. Kode tersebut biasa disebut <code>XML namespace declaration</code>. Ini digunkan untuk mendefinisikan bahwa XML kita digunakan untuk android.  </p>\n<p>Macam-macam view grup :</p>\n<ol>\n<li>Linear Layout<br>View disusun secara berderet baik horizontal ataupun vertikal pada view grup. Untuk menggunakan Linear Layout cukup menggunakan tag <code>LinearLayout</code>.<ul>\n<li>Vertical row, yaitu view yang disusun secara vertical atas-bawah. Untuk menggunakan vertical row cukup tambahkan atribut <code>android:orientation=&quot;vertical&quot;</code>.</li>\n<li>Horizontal column, yaitu view yang disusun secara horizontal kanan-kiri. Untuk menggunakan horizontal column cukup tambahkan atribut <code>android:orientation=&quot;horizontal&quot;</code>.</li>\n</ul>\n</li>\n</ol>\n<p>Untuk mengatur panjang dan tinggi view dengan menyesuaikan parentnya dapat menggunakan sintaks sebagai berikut :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Pada kode diatas LinearLayout menggunakan match parent yang mengakibatkanya memiliki tinggi dan lebar sebesar resolusi layar. Begitu juga dengan text view yang menyesuaikan LinearLayout memiliki lebar sebesar layar.</p>\n<p>Untuk mengatur proporsi pajang dan lebar antar view kita dapat menggunakan <code>android:layout_weight=&quot;1&quot;</code> dan setiap panjang dan lebar diatur ke 0dp. Berikut contohnya :<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">  <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">  <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">  &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Guest List\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Kunai\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">    /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>Relative Layout<br>View disusun secara sembarang. Posisi view dapat dibagi menjadi yaitu bagian atas, kanan, kiri dan bawah.</p>\n<ul>\n<li>Relative to parent, yaitu view yang disusun relatif berdasarkan pada parent.</li>\n</ul>\n<p>Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentButton</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true/false\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Untuk mengatur perataan konten dapat menggunakan</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true/false\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Posisi tersebut dapat dicustom sesuka hati dan dapat di mix and match. Semisal untuk pojok kiri atas maka yang top dan left diberi nilai true dan seterusnya.</p>\n<ul>\n<li>Relative to other child, yaitu view yang disusun relatif berdasarkan pada child lainya.</li>\n</ul>\n<p>Untuk mengatur konten posisi konten berdasar parentnya dapat menggunakan atribut</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentButton</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true/false\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true/false\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://icons8.com/android-icons/\">https://icons8.com/android-icons/</a></p>\n"},{"title":"Component dan Module","date":"2017-04-28T03:01:37.000Z","_content":"![](/images/angular.png)\n## Komponen\nKomponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.\nUntuk membuat componen dapat menggunakan perintah sebagai berikut :\n```\nng g component NAMA_COMPONENT\n```\nSehingga Struktur foldernya akan menjadi seperti :\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n    ├── footer.component.css\n    ├── footer.component.html\n    ├── footer.component.spec.ts\n    └── footer.component.ts\n```\n\n## Membuat Module\nModule ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli & rekap. Transaksi merupakan modulenya dan jual beli & rekap adalah componentnya.\nUntuk membuat module dapat menggunakan perintah sebagai berikut :\n```\nng g module NAMA_MODULE\n```\nSetelah itu struktur foldernya akan seperti berikut\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n|    ├── footer.component.css\n|    ├── footer.component.html\n|    ├── footer.component.spec.ts\n|    └── footer.component.ts\n└── transaksi\n    └── transaksi.module.ts\n```\nKemudian kita buat beberapa component di dalamnya sehingga sebagai berikut\n```\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n|    ├── footer.component.css\n|    ├── footer.component.html\n|    ├── footer.component.spec.ts\n|    └── footer.component.ts\n└── transaksi\n    ├── jual\n    │   ├── jual.component.css\n    │   ├── beli.component.html\n    │   ├── beli.component.spec.ts\n    │   └── beli.component.ts\n    ├── beli\n    │   ├── beli.component.css\n    │   ├── beli.component.html\n    │   ├── beli.component.spec.ts\n    │   └── beli.component.ts\n    ├── rekap\n    │   ├── rekap.component.css\n    │   ├── rekap.component.html\n    │   ├── rekap.component.spec.ts\n    │   └── rekap.component.ts\n    └── transaksi.module.ts\n```\njual, beli dan rekap merupakan component dari module transaksi. Sedangkan navbar, sidebar dan footer dikenal sebagai layout component.\n","source":"_posts/pemrograman/angular/2-Component-dan-Module.md","raw":"---\ntitle: Component dan Module\ndate: 2017-04-28 10:01:37\ncategories:\n  - Pemrograman\n  - Angular\n---\n![](/images/angular.png)\n## Komponen\nKomponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.\nUntuk membuat componen dapat menggunakan perintah sebagai berikut :\n```\nng g component NAMA_COMPONENT\n```\nSehingga Struktur foldernya akan menjadi seperti :\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n    ├── footer.component.css\n    ├── footer.component.html\n    ├── footer.component.spec.ts\n    └── footer.component.ts\n```\n\n## Membuat Module\nModule ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli & rekap. Transaksi merupakan modulenya dan jual beli & rekap adalah componentnya.\nUntuk membuat module dapat menggunakan perintah sebagai berikut :\n```\nng g module NAMA_MODULE\n```\nSetelah itu struktur foldernya akan seperti berikut\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n|    ├── footer.component.css\n|    ├── footer.component.html\n|    ├── footer.component.spec.ts\n|    └── footer.component.ts\n└── transaksi\n    └── transaksi.module.ts\n```\nKemudian kita buat beberapa component di dalamnya sehingga sebagai berikut\n```\n├── navbar\n|   ├── navbar.component.css\n|   ├── navbar.component.html\n|   ├── navbar.component.spec.ts\n|   └── navbar.component.ts\n├── sidebar\n|   ├── sidebar.component.css\n|   ├── sidebar.component.html\n|   ├── sidebar.component.spec.ts\n|   └── sidebar.component.ts\n├── footer\n|    ├── footer.component.css\n|    ├── footer.component.html\n|    ├── footer.component.spec.ts\n|    └── footer.component.ts\n└── transaksi\n    ├── jual\n    │   ├── jual.component.css\n    │   ├── beli.component.html\n    │   ├── beli.component.spec.ts\n    │   └── beli.component.ts\n    ├── beli\n    │   ├── beli.component.css\n    │   ├── beli.component.html\n    │   ├── beli.component.spec.ts\n    │   └── beli.component.ts\n    ├── rekap\n    │   ├── rekap.component.css\n    │   ├── rekap.component.html\n    │   ├── rekap.component.spec.ts\n    │   └── rekap.component.ts\n    └── transaksi.module.ts\n```\njual, beli dan rekap merupakan component dari module transaksi. Sedangkan navbar, sidebar dan footer dikenal sebagai layout component.\n","slug":"pemrograman/angular/2-Component-dan-Module","published":1,"updated":"2017-05-19T15:26:32.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnhw001aislp4lmfxi9u","content":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h2 id=\"Komponen\"><a href=\"#Komponen\" class=\"headerlink\" title=\"Komponen\"></a>Komponen</h2><p>Komponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.<br>Untuk membuat componen dapat menggunakan perintah sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g component NAMA_COMPONENT</div></pre></td></tr></table></figure></p>\n<p>Sehingga Struktur foldernya akan menjadi seperti :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">    ├── footer.component.css</div><div class=\"line\">    ├── footer.component.html</div><div class=\"line\">    ├── footer.component.spec.ts</div><div class=\"line\">    └── footer.component.ts</div></pre></td></tr></table></figure></p>\n<h2 id=\"Membuat-Module\"><a href=\"#Membuat-Module\" class=\"headerlink\" title=\"Membuat Module\"></a>Membuat Module</h2><p>Module ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli &amp; rekap. Transaksi merupakan modulenya dan jual beli &amp; rekap adalah componentnya.<br>Untuk membuat module dapat menggunakan perintah sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g module NAMA_MODULE</div></pre></td></tr></table></figure></p>\n<p>Setelah itu struktur foldernya akan seperti berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">|    ├── footer.component.css</div><div class=\"line\">|    ├── footer.component.html</div><div class=\"line\">|    ├── footer.component.spec.ts</div><div class=\"line\">|    └── footer.component.ts</div><div class=\"line\">└── transaksi</div><div class=\"line\">    └── transaksi.module.ts</div></pre></td></tr></table></figure></p>\n<p>Kemudian kita buat beberapa component di dalamnya sehingga sebagai berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">|    ├── footer.component.css</div><div class=\"line\">|    ├── footer.component.html</div><div class=\"line\">|    ├── footer.component.spec.ts</div><div class=\"line\">|    └── footer.component.ts</div><div class=\"line\">└── transaksi</div><div class=\"line\">    ├── jual</div><div class=\"line\">    │   ├── jual.component.css</div><div class=\"line\">    │   ├── beli.component.html</div><div class=\"line\">    │   ├── beli.component.spec.ts</div><div class=\"line\">    │   └── beli.component.ts</div><div class=\"line\">    ├── beli</div><div class=\"line\">    │   ├── beli.component.css</div><div class=\"line\">    │   ├── beli.component.html</div><div class=\"line\">    │   ├── beli.component.spec.ts</div><div class=\"line\">    │   └── beli.component.ts</div><div class=\"line\">    ├── rekap</div><div class=\"line\">    │   ├── rekap.component.css</div><div class=\"line\">    │   ├── rekap.component.html</div><div class=\"line\">    │   ├── rekap.component.spec.ts</div><div class=\"line\">    │   └── rekap.component.ts</div><div class=\"line\">    └── transaksi.module.ts</div></pre></td></tr></table></figure></p>\n<p>jual, beli dan rekap merupakan component dari module transaksi. Sedangkan navbar, sidebar dan footer dikenal sebagai layout component.</p>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h2 id=\"Komponen\"><a href=\"#Komponen\" class=\"headerlink\" title=\"Komponen\"></a>Komponen</h2><p>Komponen ini dapat digunakan untuk membuat suatu layout atau menu. Contoh komponen yang digunakan sebagai layout yaitu seperti navbar, sidebar dan footer. Ada juga komponen yang digunakan sebagai menu seperti beranda, pengaturan, profil dan sebagainya.<br>Untuk membuat componen dapat menggunakan perintah sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g component NAMA_COMPONENT</div></pre></td></tr></table></figure></p>\n<p>Sehingga Struktur foldernya akan menjadi seperti :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">    ├── footer.component.css</div><div class=\"line\">    ├── footer.component.html</div><div class=\"line\">    ├── footer.component.spec.ts</div><div class=\"line\">    └── footer.component.ts</div></pre></td></tr></table></figure></p>\n<h2 id=\"Membuat-Module\"><a href=\"#Membuat-Module\" class=\"headerlink\" title=\"Membuat Module\"></a>Membuat Module</h2><p>Module ini seperti package atau folder. Dia berfungsi untuk menampung beberapa component yang memiliki fungsi yang sama. Analoginya seperti suatu transaksi memiliki aksi seperti jual, beli &amp; rekap. Transaksi merupakan modulenya dan jual beli &amp; rekap adalah componentnya.<br>Untuk membuat module dapat menggunakan perintah sebagai berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g module NAMA_MODULE</div></pre></td></tr></table></figure></p>\n<p>Setelah itu struktur foldernya akan seperti berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">|    ├── footer.component.css</div><div class=\"line\">|    ├── footer.component.html</div><div class=\"line\">|    ├── footer.component.spec.ts</div><div class=\"line\">|    └── footer.component.ts</div><div class=\"line\">└── transaksi</div><div class=\"line\">    └── transaksi.module.ts</div></pre></td></tr></table></figure></p>\n<p>Kemudian kita buat beberapa component di dalamnya sehingga sebagai berikut<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── navbar</div><div class=\"line\">|   ├── navbar.component.css</div><div class=\"line\">|   ├── navbar.component.html</div><div class=\"line\">|   ├── navbar.component.spec.ts</div><div class=\"line\">|   └── navbar.component.ts</div><div class=\"line\">├── sidebar</div><div class=\"line\">|   ├── sidebar.component.css</div><div class=\"line\">|   ├── sidebar.component.html</div><div class=\"line\">|   ├── sidebar.component.spec.ts</div><div class=\"line\">|   └── sidebar.component.ts</div><div class=\"line\">├── footer</div><div class=\"line\">|    ├── footer.component.css</div><div class=\"line\">|    ├── footer.component.html</div><div class=\"line\">|    ├── footer.component.spec.ts</div><div class=\"line\">|    └── footer.component.ts</div><div class=\"line\">└── transaksi</div><div class=\"line\">    ├── jual</div><div class=\"line\">    │   ├── jual.component.css</div><div class=\"line\">    │   ├── beli.component.html</div><div class=\"line\">    │   ├── beli.component.spec.ts</div><div class=\"line\">    │   └── beli.component.ts</div><div class=\"line\">    ├── beli</div><div class=\"line\">    │   ├── beli.component.css</div><div class=\"line\">    │   ├── beli.component.html</div><div class=\"line\">    │   ├── beli.component.spec.ts</div><div class=\"line\">    │   └── beli.component.ts</div><div class=\"line\">    ├── rekap</div><div class=\"line\">    │   ├── rekap.component.css</div><div class=\"line\">    │   ├── rekap.component.html</div><div class=\"line\">    │   ├── rekap.component.spec.ts</div><div class=\"line\">    │   └── rekap.component.ts</div><div class=\"line\">    └── transaksi.module.ts</div></pre></td></tr></table></figure></p>\n<p>jual, beli dan rekap merupakan component dari module transaksi. Sedangkan navbar, sidebar dan footer dikenal sebagai layout component.</p>\n"},{"title":"Routing","date":"2017-04-28T03:01:38.000Z","_content":"![](/images/angular.png)\nLaman Web pada umumnya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.\nRouting sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module.\n\n## Routing Top Level Component\n1. Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya, sebagai contoh kita akan membuat 2 buah component yaitu home dan help. Struktur foldernya akan menjadi seperti ini\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── home\n│   ├── home.component.css\n│   ├── home.component.html\n│   ├── home.component.spec.ts\n│   └── home.component.ts\n├── help\n    ├── help.component.css\n    ├── help.component.html\n    ├── help.component.spec.ts\n    └── help.component.ts\n```\n\n2. Selanjunya import `RouterModule` dan `Routes`  (app.module.ts)\n```ts\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n3. Selanjutnya routing tiap module (app.module.ts)\n```\nconst routingAplikasi : Routes = [\n  { path: \"help\", component: HelpComponent },\n  { path: \"**\", component: HomeComponent }\n]\n```\nKeteranga :\nRoutes diatas melakukan routing untuk HelpComponent ke url `help` dan WelcomeComponent ke url lainya.\n\n4. Inisialisasi router (app.module.ts)\n```\n@NgModule({\n  ....\n  imports: [\n    ....\n    RouterModule.forRoot(routingAplikasi)\n  ],\n  ...\n})\n```\n5. Mapping router ke html menggunakan `routerLink`\n```html\n<li><a routerLink=\"help\">Help</a></li>\n\n```\n6. Menambahkan router outlet sebagai tempat keluarnya konten sehabis di routing.\n(app.component.html)\n```html\n<router-outlet></router-outlet>\n```\n\n\n## Routing Component pada Module\n\n- import RouterModule dan Routes (transaksi.module.ts)\n```ts\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n- buat Routes beserta path (transaksi.module.ts)\n```ts\nconst routingTransaksi : Routes = [\n  { path: \"transaksi/beli\", component: BeliComponent },\n  { path: \"transaksi/jual\", component: JualComponent },\n  { path: \"transaksi/rekap\", component: RekapComponent }\n]\n```\n\n- Inisialisasi Routes (transaksi.module.ts)\n```ts\n@NgModule({\n  ....\n  imports: [\n    RouterModule.forChild(routingTransaksi)\n  ]\n```\n\n- import TransaksiComponent(app.module.ts)\n```\nimport { TransaksiModule } from './transaksi/transaksi.module';\n```\n\n- tambah path untuk routing module(app.module.ts)\n```ts\n{ path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\"}\n```\n\n- Inisialisasi Routes (app.module.ts)\n```ts\n@NgModule({\n  ....\n  imports: [\n    TransaksiModule,\n  ]\n```\n","source":"_posts/pemrograman/angular/3-Routing.md","raw":"---\ntitle: Routing\ndate: 2017-04-28 10:01:38\ncategories:\n  - Pemrograman\n  - Angular\n---\n![](/images/angular.png)\nLaman Web pada umumnya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.\nRouting sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module.\n\n## Routing Top Level Component\n1. Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya, sebagai contoh kita akan membuat 2 buah component yaitu home dan help. Struktur foldernya akan menjadi seperti ini\n```\napp/\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── home\n│   ├── home.component.css\n│   ├── home.component.html\n│   ├── home.component.spec.ts\n│   └── home.component.ts\n├── help\n    ├── help.component.css\n    ├── help.component.html\n    ├── help.component.spec.ts\n    └── help.component.ts\n```\n\n2. Selanjunya import `RouterModule` dan `Routes`  (app.module.ts)\n```ts\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n3. Selanjutnya routing tiap module (app.module.ts)\n```\nconst routingAplikasi : Routes = [\n  { path: \"help\", component: HelpComponent },\n  { path: \"**\", component: HomeComponent }\n]\n```\nKeteranga :\nRoutes diatas melakukan routing untuk HelpComponent ke url `help` dan WelcomeComponent ke url lainya.\n\n4. Inisialisasi router (app.module.ts)\n```\n@NgModule({\n  ....\n  imports: [\n    ....\n    RouterModule.forRoot(routingAplikasi)\n  ],\n  ...\n})\n```\n5. Mapping router ke html menggunakan `routerLink`\n```html\n<li><a routerLink=\"help\">Help</a></li>\n\n```\n6. Menambahkan router outlet sebagai tempat keluarnya konten sehabis di routing.\n(app.component.html)\n```html\n<router-outlet></router-outlet>\n```\n\n\n## Routing Component pada Module\n\n- import RouterModule dan Routes (transaksi.module.ts)\n```ts\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n- buat Routes beserta path (transaksi.module.ts)\n```ts\nconst routingTransaksi : Routes = [\n  { path: \"transaksi/beli\", component: BeliComponent },\n  { path: \"transaksi/jual\", component: JualComponent },\n  { path: \"transaksi/rekap\", component: RekapComponent }\n]\n```\n\n- Inisialisasi Routes (transaksi.module.ts)\n```ts\n@NgModule({\n  ....\n  imports: [\n    RouterModule.forChild(routingTransaksi)\n  ]\n```\n\n- import TransaksiComponent(app.module.ts)\n```\nimport { TransaksiModule } from './transaksi/transaksi.module';\n```\n\n- tambah path untuk routing module(app.module.ts)\n```ts\n{ path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\"}\n```\n\n- Inisialisasi Routes (app.module.ts)\n```ts\n@NgModule({\n  ....\n  imports: [\n    TransaksiModule,\n  ]\n```\n","slug":"pemrograman/angular/3-Routing","published":1,"updated":"2017-05-19T15:28:42.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsni6001cislpvymvng7r","content":"<p><img src=\"/images/angular.png\" alt=\"\"><br>Laman Web pada umumnya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.<br>Routing sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module.</p>\n<h2 id=\"Routing-Top-Level-Component\"><a href=\"#Routing-Top-Level-Component\" class=\"headerlink\" title=\"Routing Top Level Component\"></a>Routing Top Level Component</h2><ol>\n<li><p>Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya, sebagai contoh kita akan membuat 2 buah component yaitu home dan help. Struktur foldernya akan menjadi seperti ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── home</div><div class=\"line\">│   ├── home.component.css</div><div class=\"line\">│   ├── home.component.html</div><div class=\"line\">│   ├── home.component.spec.ts</div><div class=\"line\">│   └── home.component.ts</div><div class=\"line\">├── help</div><div class=\"line\">    ├── help.component.css</div><div class=\"line\">    ├── help.component.html</div><div class=\"line\">    ├── help.component.spec.ts</div><div class=\"line\">    └── help.component.ts</div></pre></td></tr></table></figure>\n</li>\n<li><p>Selanjunya import <code>RouterModule</code> dan <code>Routes</code>  (app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Selanjutnya routing tiap module (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingAplikasi : Routes = [</div><div class=\"line\">  &#123; path: &quot;help&quot;, component: HelpComponent &#125;,</div><div class=\"line\">  &#123; path: &quot;**&quot;, component: HomeComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Keteranga :<br>Routes diatas melakukan routing untuk HelpComponent ke url <code>help</code> dan WelcomeComponent ke url lainya.</p>\n<ol>\n<li><p>Inisialisasi router (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    ....</div><div class=\"line\">    RouterModule.forRoot(routingAplikasi)</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Mapping router ke html menggunakan <code>routerLink</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"help\"</span>&gt;</span>Help<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menambahkan router outlet sebagai tempat keluarnya konten sehabis di routing.<br>(app.component.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Routing-Component-pada-Module\"><a href=\"#Routing-Component-pada-Module\" class=\"headerlink\" title=\"Routing Component pada Module\"></a>Routing Component pada Module</h2><ul>\n<li><p>import RouterModule dan Routes (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>buat Routes beserta path (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routingTransaksi : Routes = [</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/beli\"</span>, component: BeliComponent &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/jual\"</span>, component: JualComponent &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/rekap\"</span>, component: RekapComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>Inisialisasi Routes (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routingTransaksi)</div><div class=\"line\">  ]</div></pre></td></tr></table></figure>\n</li>\n<li><p>import TransaksiComponent(app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; TransaksiModule &#125; from &apos;./transaksi/transaksi.module&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>tambah path untuk routing module(app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; path: <span class=\"string\">\"transaksi\"</span>, redirectTo: <span class=\"string\">\"/transaksi\"</span>, pathMatch: <span class=\"string\">\"full\"</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Inisialisasi Routes (app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    TransaksiModule,</div><div class=\"line\">  ]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"><br>Laman Web pada umumnya untuk berkomunikasi dengan menggunakan hyperlink. Sementara itu untuk berkomunikasi antar komponen, Angular menggunakan routing. Routing hampir seperti mapping di java. Untuk pergi ke komponen lain, jalurnya harus didefinisikan terlebih dahulu.<br>Routing sendiri berdasarkan letaknya dibedakan menjadi 2 yaitu routing Top Level Component dan routing Component pada Module.</p>\n<h2 id=\"Routing-Top-Level-Component\"><a href=\"#Routing-Top-Level-Component\" class=\"headerlink\" title=\"Routing Top Level Component\"></a>Routing Top Level Component</h2><ol>\n<li><p>Sebelum melakukan routing kita akan buat terlebih dahulu membuat top level componentnya, sebagai contoh kita akan membuat 2 buah component yaitu home dan help. Struktur foldernya akan menjadi seperti ini</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/</div><div class=\"line\">├── app.component.css</div><div class=\"line\">├── app.component.html</div><div class=\"line\">├── app.component.spec.ts</div><div class=\"line\">├── app.component.ts</div><div class=\"line\">├── app.module.ts</div><div class=\"line\">├── home</div><div class=\"line\">│   ├── home.component.css</div><div class=\"line\">│   ├── home.component.html</div><div class=\"line\">│   ├── home.component.spec.ts</div><div class=\"line\">│   └── home.component.ts</div><div class=\"line\">├── help</div><div class=\"line\">    ├── help.component.css</div><div class=\"line\">    ├── help.component.html</div><div class=\"line\">    ├── help.component.spec.ts</div><div class=\"line\">    └── help.component.ts</div></pre></td></tr></table></figure>\n</li>\n<li><p>Selanjunya import <code>RouterModule</code> dan <code>Routes</code>  (app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Selanjutnya routing tiap module (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingAplikasi : Routes = [</div><div class=\"line\">  &#123; path: &quot;help&quot;, component: HelpComponent &#125;,</div><div class=\"line\">  &#123; path: &quot;**&quot;, component: HomeComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Keteranga :<br>Routes diatas melakukan routing untuk HelpComponent ke url <code>help</code> dan WelcomeComponent ke url lainya.</p>\n<ol>\n<li><p>Inisialisasi router (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    ....</div><div class=\"line\">    RouterModule.forRoot(routingAplikasi)</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Mapping router ke html menggunakan <code>routerLink</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"help\"</span>&gt;</span>Help<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menambahkan router outlet sebagai tempat keluarnya konten sehabis di routing.<br>(app.component.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Routing-Component-pada-Module\"><a href=\"#Routing-Component-pada-Module\" class=\"headerlink\" title=\"Routing Component pada Module\"></a>Routing Component pada Module</h2><ul>\n<li><p>import RouterModule dan Routes (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>buat Routes beserta path (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> routingTransaksi : Routes = [</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/beli\"</span>, component: BeliComponent &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/jual\"</span>, component: JualComponent &#125;,</div><div class=\"line\">  &#123; path: <span class=\"string\">\"transaksi/rekap\"</span>, component: RekapComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>Inisialisasi Routes (transaksi.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    RouterModule.forChild(routingTransaksi)</div><div class=\"line\">  ]</div></pre></td></tr></table></figure>\n</li>\n<li><p>import TransaksiComponent(app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; TransaksiModule &#125; from &apos;./transaksi/transaksi.module&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>tambah path untuk routing module(app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; path: <span class=\"string\">\"transaksi\"</span>, redirectTo: <span class=\"string\">\"/transaksi\"</span>, pathMatch: <span class=\"string\">\"full\"</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Inisialisasi Routes (app.module.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  ....</div><div class=\"line\">  imports: [</div><div class=\"line\">    TransaksiModule,</div><div class=\"line\">  ]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Introduction to Hexo","date":"2017-05-07T05:44:17.000Z","sticky":true,"_content":"![](/images/hexo.png)\n# Sekilas tentang Hexo\n\n[Hexo](http://hexo.io/) merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan [markdown](https://en.wikipedia.org/wiki/Markdown) yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan [EJS](http://ejs.co/).\n\n# Roadmap Belajar Hexo\n- [Setup Project Hexo]()\n- [Menulis Konten pada Hexo]()\n- [Mengganti Tema pada Hexo]()\n- [Mengkonfigurasi Teman pada Hexo]()\n- [Hosting Hexo ke Github Page]()\n","source":"_posts/pemrograman/hexo/0-Introduction-to-Hexo.md","raw":"---\ntitle: Introduction to Hexo\ndate: 2017-05-07 12:44:17\ncategories:\n  - Pemrograman\n  - Hexo\nsticky: true\n---\n![](/images/hexo.png)\n# Sekilas tentang Hexo\n\n[Hexo](http://hexo.io/) merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan [markdown](https://en.wikipedia.org/wiki/Markdown) yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan [EJS](http://ejs.co/).\n\n# Roadmap Belajar Hexo\n- [Setup Project Hexo]()\n- [Menulis Konten pada Hexo]()\n- [Mengganti Tema pada Hexo]()\n- [Mengkonfigurasi Teman pada Hexo]()\n- [Hosting Hexo ke Github Page]()\n","slug":"pemrograman/hexo/0-Introduction-to-Hexo","published":1,"updated":"2017-05-08T14:18:21.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnia001fislp6feqpf19","content":"<p><img src=\"/images/hexo.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Hexo\"><a href=\"#Sekilas-tentang-Hexo\" class=\"headerlink\" title=\"Sekilas tentang Hexo\"></a>Sekilas tentang Hexo</h1><p><a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan <a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">markdown</a> yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan <a href=\"http://ejs.co/\" target=\"_blank\" rel=\"external\">EJS</a>.</p>\n<h1 id=\"Roadmap-Belajar-Hexo\"><a href=\"#Roadmap-Belajar-Hexo\" class=\"headerlink\" title=\"Roadmap Belajar Hexo\"></a>Roadmap Belajar Hexo</h1><ul>\n<li><a href=\"\">Setup Project Hexo</a></li>\n<li><a href=\"\">Menulis Konten pada Hexo</a></li>\n<li><a href=\"\">Mengganti Tema pada Hexo</a></li>\n<li><a href=\"\">Mengkonfigurasi Teman pada Hexo</a></li>\n<li><a href=\"\">Hosting Hexo ke Github Page</a></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/hexo.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Hexo\"><a href=\"#Sekilas-tentang-Hexo\" class=\"headerlink\" title=\"Sekilas tentang Hexo\"></a>Sekilas tentang Hexo</h1><p><a href=\"http://hexo.io/\">Hexo</a> merupakan suatu framework untuk mempermudah dalam membuat Blog atau Website probadi. Untuk mengulis konten pada Hexo, dapat menggunakan <a href=\"https://en.wikipedia.org/wiki/Markdown\">markdown</a> yang kemudian akan dicompile menjadi html. Untuk Layout dan Design dapat menggunkaan <a href=\"http://ejs.co/\">EJS</a>.</p>\n<h1 id=\"Roadmap-Belajar-Hexo\"><a href=\"#Roadmap-Belajar-Hexo\" class=\"headerlink\" title=\"Roadmap Belajar Hexo\"></a>Roadmap Belajar Hexo</h1><ul>\n<li><a href=\"\">Setup Project Hexo</a></li>\n<li><a href=\"\">Menulis Konten pada Hexo</a></li>\n<li><a href=\"\">Mengganti Tema pada Hexo</a></li>\n<li><a href=\"\">Mengkonfigurasi Teman pada Hexo</a></li>\n<li><a href=\"\">Hosting Hexo ke Github Page</a></li>\n</ul>\n"},{"title":"test","date":"2017-09-17T02:12:19.000Z","_content":"\n- buat class test pada rest dari class controller\n- tambahkan anotasi `@RunWith(SpringJUnit4ClassRunner::class)`\n- `private val productController : ProductController ?= null`\n- `private val mockMvc : MockMvc ?=null`. mock ini akan digunakan untuk menjalankan testing","source":"_posts/pemrograman/spring/test.md","raw":"---\ntitle: test\ndate: 2017-09-17 09:12:19\ntags:\n---\n\n- buat class test pada rest dari class controller\n- tambahkan anotasi `@RunWith(SpringJUnit4ClassRunner::class)`\n- `private val productController : ProductController ?= null`\n- `private val mockMvc : MockMvc ?=null`. mock ini akan digunakan untuk menjalankan testing","slug":"pemrograman/spring/test","published":1,"updated":"2017-10-15T13:34:46.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnif001hislpxk1f6ryg","content":"<ul>\n<li>buat class test pada rest dari class controller</li>\n<li>tambahkan anotasi <code>@RunWith(SpringJUnit4ClassRunner::class)</code></li>\n<li><code>private val productController : ProductController ?= null</code></li>\n<li><code>private val mockMvc : MockMvc ?=null</code>. mock ini akan digunakan untuk menjalankan testing</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>buat class test pada rest dari class controller</li>\n<li>tambahkan anotasi <code>@RunWith(SpringJUnit4ClassRunner::class)</code></li>\n<li><code>private val productController : ProductController ?= null</code></li>\n<li><code>private val mockMvc : MockMvc ?=null</code>. mock ini akan digunakan untuk menjalankan testing</li>\n</ul>\n"},{"title":"config-port","date":"2017-08-28T04:57:02.000Z","_content":"\nhttp://vertx.io/blog/vert-x-application-configuration/","source":"_posts/pemrograman/vertx/config-port.md","raw":"---\ntitle: config-port\ndate: 2017-08-28 11:57:02\ntags:\n---\n\nhttp://vertx.io/blog/vert-x-application-configuration/","slug":"pemrograman/vertx/config-port","published":1,"updated":"2017-08-28T04:57:14.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnij001kislp008e230i","content":"<p><a href=\"http://vertx.io/blog/vert-x-application-configuration/\" target=\"_blank\" rel=\"external\">http://vertx.io/blog/vert-x-application-configuration/</a></p>\n","excerpt":"","more":"<p><a href=\"http://vertx.io/blog/vert-x-application-configuration/\">http://vertx.io/blog/vert-x-application-configuration/</a></p>\n"},{"title":"security","date":"2017-08-28T08:40:16.000Z","_content":"\n\n# Session\n```\nRouter router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieHttpOnlyFlag(true)\n        .setCookieSecureFlag(true)\n    );\n\n    router.route().handler(routingContext -> {\n\n      Session session = routingContext.session();\n\n      Integer cnt = session.get(\"hitcount\");\n      cnt = (cnt == null ? 0 : cnt) + 1;\n\n      session.put(\"hitcount\", cnt);\n\n      routingContext.response().end(\"Hitcount: \" + cnt);\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n```\n\n# Security Header\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(ctx -> {\n      ctx.response()\n          // do not allow proxies to cache the data\n          .putHeader(\"Cache-Control\", \"no-store, no-cache\")\n          // prevents Internet Explorer from MIME - sniffing a\n          // response away from the declared content-type\n          .putHeader(\"X-Content-Type-Options\", \"nosniff\")\n          // Strict HTTPS (for about ~6Months)\n          .putHeader(\"Strict-Transport-Security\", \"max-age=\" + 15768000)\n          // IE8+ do not allow opening of attachments in the context of this resource\n          .putHeader(\"X-Download-Options\", \"noopen\")\n          // enable XSS for IE\n          .putHeader(\"X-XSS-Protection\", \"1; mode=block\")\n          // deny frames\n          .putHeader(\"X-FRAME-OPTIONS\", \"DENY\");\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n  }\n}\n```\n\n# CSFR\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieSecureFlag(true)\n    );\n    router.route().handler(CSRFHandler.create(\"not a good secret\"));\n\n    router.route().handler(ctx -> {\n      ...\n    });\n```\n# Limit Upload\n```\npublic class App extends AbstractVerticle {\n\n  private static final int KB = 1024;\n  private static final int MB = 1024 * KB;\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));\n```\n\n","source":"_posts/pemrograman/vertx/security.md","raw":"---\ntitle: security\ndate: 2017-08-28 15:40:16\ntags:\n---\n\n\n# Session\n```\nRouter router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieHttpOnlyFlag(true)\n        .setCookieSecureFlag(true)\n    );\n\n    router.route().handler(routingContext -> {\n\n      Session session = routingContext.session();\n\n      Integer cnt = session.get(\"hitcount\");\n      cnt = (cnt == null ? 0 : cnt) + 1;\n\n      session.put(\"hitcount\", cnt);\n\n      routingContext.response().end(\"Hitcount: \" + cnt);\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n```\n\n# Security Header\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(ctx -> {\n      ctx.response()\n          // do not allow proxies to cache the data\n          .putHeader(\"Cache-Control\", \"no-store, no-cache\")\n          // prevents Internet Explorer from MIME - sniffing a\n          // response away from the declared content-type\n          .putHeader(\"X-Content-Type-Options\", \"nosniff\")\n          // Strict HTTPS (for about ~6Months)\n          .putHeader(\"Strict-Transport-Security\", \"max-age=\" + 15768000)\n          // IE8+ do not allow opening of attachments in the context of this resource\n          .putHeader(\"X-Download-Options\", \"noopen\")\n          // enable XSS for IE\n          .putHeader(\"X-XSS-Protection\", \"1; mode=block\")\n          // deny frames\n          .putHeader(\"X-FRAME-OPTIONS\", \"DENY\");\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n  }\n}\n```\n\n# CSFR\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieSecureFlag(true)\n    );\n    router.route().handler(CSRFHandler.create(\"not a good secret\"));\n\n    router.route().handler(ctx -> {\n      ...\n    });\n```\n# Limit Upload\n```\npublic class App extends AbstractVerticle {\n\n  private static final int KB = 1024;\n  private static final int MB = 1024 * KB;\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));\n```\n\n","slug":"pemrograman/vertx/security","published":1,"updated":"2017-08-28T08:44:43.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnip001mislpiqbtyg8g","content":"<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router router = Router.router(vertx);</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(CookieHandler.create());</div><div class=\"line\">    router.route().handler(SessionHandler</div><div class=\"line\">        .create(LocalSessionStore.create(vertx))</div><div class=\"line\">        .setCookieHttpOnlyFlag(true)</div><div class=\"line\">        .setCookieSecureFlag(true)</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(routingContext -&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">      Session session = routingContext.session();</div><div class=\"line\"></div><div class=\"line\">      Integer cnt = session.get(&quot;hitcount&quot;);</div><div class=\"line\">      cnt = (cnt == null ? 0 : cnt) + 1;</div><div class=\"line\"></div><div class=\"line\">      session.put(&quot;hitcount&quot;, cnt);</div><div class=\"line\"></div><div class=\"line\">      routingContext.response().end(&quot;Hitcount: &quot; + cnt);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpServer().requestHandler(router::accept).listen(8080);</div></pre></td></tr></table></figure>\n<h1 id=\"Security-Header\"><a href=\"#Security-Header\" class=\"headerlink\" title=\"Security Header\"></a>Security Header</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\">    router.route().handler(ctx -&gt; &#123;</div><div class=\"line\">      ctx.response()</div><div class=\"line\">          // do not allow proxies to cache the data</div><div class=\"line\">          .putHeader(&quot;Cache-Control&quot;, &quot;no-store, no-cache&quot;)</div><div class=\"line\">          // prevents Internet Explorer from MIME - sniffing a</div><div class=\"line\">          // response away from the declared content-type</div><div class=\"line\">          .putHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;)</div><div class=\"line\">          // Strict HTTPS (for about ~6Months)</div><div class=\"line\">          .putHeader(&quot;Strict-Transport-Security&quot;, &quot;max-age=&quot; + 15768000)</div><div class=\"line\">          // IE8+ do not allow opening of attachments in the context of this resource</div><div class=\"line\">          .putHeader(&quot;X-Download-Options&quot;, &quot;noopen&quot;)</div><div class=\"line\">          // enable XSS for IE</div><div class=\"line\">          .putHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;)</div><div class=\"line\">          // deny frames</div><div class=\"line\">          .putHeader(&quot;X-FRAME-OPTIONS&quot;, &quot;DENY&quot;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpServer().requestHandler(router::accept).listen(8080);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"CSFR\"><a href=\"#CSFR\" class=\"headerlink\" title=\"CSFR\"></a>CSFR</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(CookieHandler.create());</div><div class=\"line\">    router.route().handler(SessionHandler</div><div class=\"line\">        .create(LocalSessionStore.create(vertx))</div><div class=\"line\">        .setCookieSecureFlag(true)</div><div class=\"line\">    );</div><div class=\"line\">    router.route().handler(CSRFHandler.create(&quot;not a good secret&quot;));</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(ctx -&gt; &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Limit-Upload\"><a href=\"#Limit-Upload\" class=\"headerlink\" title=\"Limit Upload\"></a>Limit Upload</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  private static final int KB = 1024;</div><div class=\"line\">  private static final int MB = 1024 * KB;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\">    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router router = Router.router(vertx);</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(CookieHandler.create());</div><div class=\"line\">    router.route().handler(SessionHandler</div><div class=\"line\">        .create(LocalSessionStore.create(vertx))</div><div class=\"line\">        .setCookieHttpOnlyFlag(true)</div><div class=\"line\">        .setCookieSecureFlag(true)</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(routingContext -&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">      Session session = routingContext.session();</div><div class=\"line\"></div><div class=\"line\">      Integer cnt = session.get(&quot;hitcount&quot;);</div><div class=\"line\">      cnt = (cnt == null ? 0 : cnt) + 1;</div><div class=\"line\"></div><div class=\"line\">      session.put(&quot;hitcount&quot;, cnt);</div><div class=\"line\"></div><div class=\"line\">      routingContext.response().end(&quot;Hitcount: &quot; + cnt);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpServer().requestHandler(router::accept).listen(8080);</div></pre></td></tr></table></figure>\n<h1 id=\"Security-Header\"><a href=\"#Security-Header\" class=\"headerlink\" title=\"Security Header\"></a>Security Header</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\">    router.route().handler(ctx -&gt; &#123;</div><div class=\"line\">      ctx.response()</div><div class=\"line\">          // do not allow proxies to cache the data</div><div class=\"line\">          .putHeader(&quot;Cache-Control&quot;, &quot;no-store, no-cache&quot;)</div><div class=\"line\">          // prevents Internet Explorer from MIME - sniffing a</div><div class=\"line\">          // response away from the declared content-type</div><div class=\"line\">          .putHeader(&quot;X-Content-Type-Options&quot;, &quot;nosniff&quot;)</div><div class=\"line\">          // Strict HTTPS (for about ~6Months)</div><div class=\"line\">          .putHeader(&quot;Strict-Transport-Security&quot;, &quot;max-age=&quot; + 15768000)</div><div class=\"line\">          // IE8+ do not allow opening of attachments in the context of this resource</div><div class=\"line\">          .putHeader(&quot;X-Download-Options&quot;, &quot;noopen&quot;)</div><div class=\"line\">          // enable XSS for IE</div><div class=\"line\">          .putHeader(&quot;X-XSS-Protection&quot;, &quot;1; mode=block&quot;)</div><div class=\"line\">          // deny frames</div><div class=\"line\">          .putHeader(&quot;X-FRAME-OPTIONS&quot;, &quot;DENY&quot;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpServer().requestHandler(router::accept).listen(8080);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"CSFR\"><a href=\"#CSFR\" class=\"headerlink\" title=\"CSFR\"></a>CSFR</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(CookieHandler.create());</div><div class=\"line\">    router.route().handler(SessionHandler</div><div class=\"line\">        .create(LocalSessionStore.create(vertx))</div><div class=\"line\">        .setCookieSecureFlag(true)</div><div class=\"line\">    );</div><div class=\"line\">    router.route().handler(CSRFHandler.create(&quot;not a good secret&quot;));</div><div class=\"line\"></div><div class=\"line\">    router.route().handler(ctx -&gt; &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Limit-Upload\"><a href=\"#Limit-Upload\" class=\"headerlink\" title=\"Limit Upload\"></a>Limit Upload</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class App extends AbstractVerticle &#123;</div><div class=\"line\"></div><div class=\"line\">  private static final int KB = 1024;</div><div class=\"line\">  private static final int MB = 1024 * KB;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void start() &#123;</div><div class=\"line\"></div><div class=\"line\">    Router router = Router.router(vertx);</div><div class=\"line\">    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));</div></pre></td></tr></table></figure>\n"},{"title":"vertx","date":"2017-08-27T10:31:34.000Z","_content":"\n# Membuat project vertx\nStruktur folder\n```\n.\n├── pom.xml\n├── src\n│   └── main\n│       └── kotlin\n├── target\n```\npom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.ciazhar</groupId>\n    <artifactId>vertx-rest</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <name>vertx-rest</name>\n</project>\n```\nproperties\n```xml\n<properties>\n    <main.verticle>com.ciazhar.vertx.rest.MainVerticle</main.verticle>\n    <vertx.version>3.4.1</vertx.version>\n</properties>\n```\ndependency\n```xml\n<dependencies>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-core</artifactId>\n      <version>${vertx.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-lang-kotlin</artifactId>\n      <version>${vertx.version}</version>\n    </dependency>\n  </dependencies>\n```\nbuild\n```\n<build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.1</version>\n          <configuration>\n            <source>1.8</source>\n            <target>1.8</target>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>kotlin-maven-plugin</artifactId>\n          <groupId>org.jetbrains.kotlin</groupId>\n          <version>1.1.0</version>\n          <executions>\n            <execution>\n              <id>compile</id>\n              <goals> <goal>compile</goal> </goals>\n              <configuration>\n                <sourceDirs>\n                  <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>\n                  <sourceDir>${project.basedir}/src/main/java</sourceDir>\n                </sourceDirs>\n              </configuration>\n            </execution>\n            <execution>\n              <id>test-compile</id>\n              <goals> <goal>test-compile</goal> </goals>\n              <configuration>\n                <sourceDirs>\n                  <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>\n                  <sourceDir>${project.basedir}/src/test/java</sourceDir>\n                </sourceDirs>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <artifactId>kotlin-maven-plugin</artifactId>\n        <groupId>org.jetbrains.kotlin</groupId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <version>2.3</version>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>shade</goal>\n            </goals>\n            <configuration>\n              <transformers>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                  <manifestEntries>\n                    <Main-Class>io.vertx.core.Launcher</Main-Class>\n                    <Main-Verticle>${main.verticle}</Main-Verticle>\n                  </manifestEntries>\n                </transformer>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>\n                </transformer>\n              </transformers>\n              <artifactSet>\n              </artifactSet>\n              <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n```\nsimple verticle\n```kotlin\npackage vertx\n\nimport io.vertx.core.AbstractVerticle\nimport io.vertx.core.Future\n\nclass MainVerticle : AbstractVerticle() {\n\n  override fun start(future: Future<Void>) {\n    vertx\n      .createHttpServer()\n      .requestHandler({\n          req -> req\n              .response()\n              .putHeader(\"content-type\", \"text/plain\")\n              .end(\"Hello from Vert.x!\")\n      })\n      .listen(8080,{\n          result ->\n          if(result.succeeded()){\n              future.complete()\n          }\n          else{\n              future.fail(result.cause())\n          }\n      })\n\n  }\n}\n```\n# Testing\ndependency\n```xml\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.12</version>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-unit</artifactId>\n  <version>3.0.0</version>\n  <scope>test</scope>\n</dependency>\n```\ntest\n```\n@RunWith(VertxUnitRunner.class)\npublic class MyFirstVerticleTest {\n\n  private Vertx vertx;\n\n  @Before\n  public void setUp(TestContext context) {\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n        context.asyncAssertSuccess());\n  }\n\n  @After\n  public void tearDown(TestContext context) {\n    vertx.close(context.asyncAssertSuccess());\n  }\n\n  @Test\n  public void testMyApplication(TestContext context) {\n    final Async async = context.async();\n\n    vertx.createHttpClient().getNow(8080, \"localhost\", \"/\",\n     response -> {\n      response.handler(body -> {\n        context.assertTrue(body.toString().contains(\"Hello\"));\n        async.complete();\n      });\n    });\n  }\n}\n```\n","source":"_posts/pemrograman/vertx/vertx.md","raw":"---\ntitle: vertx\ndate: 2017-08-27 17:31:34\ntags:\n---\n\n# Membuat project vertx\nStruktur folder\n```\n.\n├── pom.xml\n├── src\n│   └── main\n│       └── kotlin\n├── target\n```\npom.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.ciazhar</groupId>\n    <artifactId>vertx-rest</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <name>vertx-rest</name>\n</project>\n```\nproperties\n```xml\n<properties>\n    <main.verticle>com.ciazhar.vertx.rest.MainVerticle</main.verticle>\n    <vertx.version>3.4.1</vertx.version>\n</properties>\n```\ndependency\n```xml\n<dependencies>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-core</artifactId>\n      <version>${vertx.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-lang-kotlin</artifactId>\n      <version>${vertx.version}</version>\n    </dependency>\n  </dependencies>\n```\nbuild\n```\n<build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.1</version>\n          <configuration>\n            <source>1.8</source>\n            <target>1.8</target>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>kotlin-maven-plugin</artifactId>\n          <groupId>org.jetbrains.kotlin</groupId>\n          <version>1.1.0</version>\n          <executions>\n            <execution>\n              <id>compile</id>\n              <goals> <goal>compile</goal> </goals>\n              <configuration>\n                <sourceDirs>\n                  <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>\n                  <sourceDir>${project.basedir}/src/main/java</sourceDir>\n                </sourceDirs>\n              </configuration>\n            </execution>\n            <execution>\n              <id>test-compile</id>\n              <goals> <goal>test-compile</goal> </goals>\n              <configuration>\n                <sourceDirs>\n                  <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>\n                  <sourceDir>${project.basedir}/src/test/java</sourceDir>\n                </sourceDirs>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <artifactId>kotlin-maven-plugin</artifactId>\n        <groupId>org.jetbrains.kotlin</groupId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <version>2.3</version>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>shade</goal>\n            </goals>\n            <configuration>\n              <transformers>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                  <manifestEntries>\n                    <Main-Class>io.vertx.core.Launcher</Main-Class>\n                    <Main-Verticle>${main.verticle}</Main-Verticle>\n                  </manifestEntries>\n                </transformer>\n                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>\n                </transformer>\n              </transformers>\n              <artifactSet>\n              </artifactSet>\n              <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n```\nsimple verticle\n```kotlin\npackage vertx\n\nimport io.vertx.core.AbstractVerticle\nimport io.vertx.core.Future\n\nclass MainVerticle : AbstractVerticle() {\n\n  override fun start(future: Future<Void>) {\n    vertx\n      .createHttpServer()\n      .requestHandler({\n          req -> req\n              .response()\n              .putHeader(\"content-type\", \"text/plain\")\n              .end(\"Hello from Vert.x!\")\n      })\n      .listen(8080,{\n          result ->\n          if(result.succeeded()){\n              future.complete()\n          }\n          else{\n              future.fail(result.cause())\n          }\n      })\n\n  }\n}\n```\n# Testing\ndependency\n```xml\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.12</version>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-unit</artifactId>\n  <version>3.0.0</version>\n  <scope>test</scope>\n</dependency>\n```\ntest\n```\n@RunWith(VertxUnitRunner.class)\npublic class MyFirstVerticleTest {\n\n  private Vertx vertx;\n\n  @Before\n  public void setUp(TestContext context) {\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n        context.asyncAssertSuccess());\n  }\n\n  @After\n  public void tearDown(TestContext context) {\n    vertx.close(context.asyncAssertSuccess());\n  }\n\n  @Test\n  public void testMyApplication(TestContext context) {\n    final Async async = context.async();\n\n    vertx.createHttpClient().getNow(8080, \"localhost\", \"/\",\n     response -> {\n      response.handler(body -> {\n        context.assertTrue(body.toString().contains(\"Hello\"));\n        async.complete();\n      });\n    });\n  }\n}\n```\n","slug":"pemrograman/vertx/vertx","published":1,"updated":"2017-08-28T04:56:44.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsniw001pislpdrjo98kx","content":"<h1 id=\"Membuat-project-vertx\"><a href=\"#Membuat-project-vertx\" class=\"headerlink\" title=\"Membuat project vertx\"></a>Membuat project vertx</h1><p>Struktur folder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── pom.xml</div><div class=\"line\">├── src</div><div class=\"line\">│   └── main</div><div class=\"line\">│       └── kotlin</div><div class=\"line\">├── target</div></pre></td></tr></table></figure></p>\n<p>pom.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ciazhar<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>vertx-rest<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>properties<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main.verticle</span>&gt;</span>com.ciazhar.vertx.rest.MainVerticle<span class=\"tag\">&lt;/<span class=\"name\">main.verticle</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vertx.version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">vertx.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>dependency<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;vertx.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-lang-kotlin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;vertx.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>build<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;</div><div class=\"line\">    &lt;pluginManagement&gt;</div><div class=\"line\">      &lt;plugins&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">          &lt;version&gt;3.1&lt;/version&gt;</div><div class=\"line\">          &lt;configuration&gt;</div><div class=\"line\">            &lt;source&gt;1.8&lt;/source&gt;</div><div class=\"line\">            &lt;target&gt;1.8&lt;/target&gt;</div><div class=\"line\">          &lt;/configuration&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">          &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">          &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;</div><div class=\"line\">          &lt;version&gt;1.1.0&lt;/version&gt;</div><div class=\"line\">          &lt;executions&gt;</div><div class=\"line\">            &lt;execution&gt;</div><div class=\"line\">              &lt;id&gt;compile&lt;/id&gt;</div><div class=\"line\">              &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt;</div><div class=\"line\">              &lt;configuration&gt;</div><div class=\"line\">                &lt;sourceDirs&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/main/kotlin&lt;/sourceDir&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/main/java&lt;/sourceDir&gt;</div><div class=\"line\">                &lt;/sourceDirs&gt;</div><div class=\"line\">              &lt;/configuration&gt;</div><div class=\"line\">            &lt;/execution&gt;</div><div class=\"line\">            &lt;execution&gt;</div><div class=\"line\">              &lt;id&gt;test-compile&lt;/id&gt;</div><div class=\"line\">              &lt;goals&gt; &lt;goal&gt;test-compile&lt;/goal&gt; &lt;/goals&gt;</div><div class=\"line\">              &lt;configuration&gt;</div><div class=\"line\">                &lt;sourceDirs&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/test/kotlin&lt;/sourceDir&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/test/java&lt;/sourceDir&gt;</div><div class=\"line\">                &lt;/sourceDirs&gt;</div><div class=\"line\">              &lt;/configuration&gt;</div><div class=\"line\">            &lt;/execution&gt;</div><div class=\"line\">          &lt;/executions&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">      &lt;/plugins&gt;</div><div class=\"line\">    &lt;/pluginManagement&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;plugins&gt;</div><div class=\"line\">      &lt;plugin&gt;</div><div class=\"line\">        &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;</div><div class=\"line\">      &lt;/plugin&gt;</div><div class=\"line\">      &lt;plugin&gt;</div><div class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.3&lt;/version&gt;</div><div class=\"line\">        &lt;executions&gt;</div><div class=\"line\">          &lt;execution&gt;</div><div class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">            &lt;goals&gt;</div><div class=\"line\">              &lt;goal&gt;shade&lt;/goal&gt;</div><div class=\"line\">            &lt;/goals&gt;</div><div class=\"line\">            &lt;configuration&gt;</div><div class=\"line\">              &lt;transformers&gt;</div><div class=\"line\">                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</div><div class=\"line\">                  &lt;manifestEntries&gt;</div><div class=\"line\">                    &lt;Main-Class&gt;io.vertx.core.Launcher&lt;/Main-Class&gt;</div><div class=\"line\">                    &lt;Main-Verticle&gt;$&#123;main.verticle&#125;&lt;/Main-Verticle&gt;</div><div class=\"line\">                  &lt;/manifestEntries&gt;</div><div class=\"line\">                &lt;/transformer&gt;</div><div class=\"line\">                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;</div><div class=\"line\">                  &lt;resource&gt;META-INF/services/io.vertx.core.spi.VerticleFactory&lt;/resource&gt;</div><div class=\"line\">                &lt;/transformer&gt;</div><div class=\"line\">              &lt;/transformers&gt;</div><div class=\"line\">              &lt;artifactSet&gt;</div><div class=\"line\">              &lt;/artifactSet&gt;</div><div class=\"line\">              &lt;outputFile&gt;$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;-fat.jar&lt;/outputFile&gt;</div><div class=\"line\">            &lt;/configuration&gt;</div><div class=\"line\">          &lt;/execution&gt;</div><div class=\"line\">        &lt;/executions&gt;</div><div class=\"line\">      &lt;/plugin&gt;</div><div class=\"line\">    &lt;/plugins&gt;</div><div class=\"line\">  &lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<p>simple verticle<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> vertx</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.AbstractVerticle</div><div class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Future</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainVerticle</span> : <span class=\"type\">AbstractVerticle</span></span>() &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">start</span><span class=\"params\">(future: <span class=\"type\">Future</span>&lt;<span class=\"type\">Void</span>&gt;)</span></span> &#123;</div><div class=\"line\">    vertx</div><div class=\"line\">      .createHttpServer()</div><div class=\"line\">      .requestHandler(&#123;</div><div class=\"line\">          req -&gt; req</div><div class=\"line\">              .response()</div><div class=\"line\">              .putHeader(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</div><div class=\"line\">              .end(<span class=\"string\">\"Hello from Vert.x!\"</span>)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .listen(<span class=\"number\">8080</span>,&#123;</div><div class=\"line\">          result -&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span>(result.succeeded())&#123;</div><div class=\"line\">              future.complete()</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              future.fail(result.cause())</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>dependency<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-unit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>test<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RunWith(VertxUnitRunner.class)</div><div class=\"line\">public class MyFirstVerticleTest &#123;</div><div class=\"line\"></div><div class=\"line\">  private Vertx vertx;</div><div class=\"line\"></div><div class=\"line\">  @Before</div><div class=\"line\">  public void setUp(TestContext context) &#123;</div><div class=\"line\">    vertx = Vertx.vertx();</div><div class=\"line\">    vertx.deployVerticle(MyFirstVerticle.class.getName(),</div><div class=\"line\">        context.asyncAssertSuccess());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @After</div><div class=\"line\">  public void tearDown(TestContext context) &#123;</div><div class=\"line\">    vertx.close(context.asyncAssertSuccess());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Test</div><div class=\"line\">  public void testMyApplication(TestContext context) &#123;</div><div class=\"line\">    final Async async = context.async();</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpClient().getNow(8080, &quot;localhost&quot;, &quot;/&quot;,</div><div class=\"line\">     response -&gt; &#123;</div><div class=\"line\">      response.handler(body -&gt; &#123;</div><div class=\"line\">        context.assertTrue(body.toString().contains(&quot;Hello&quot;));</div><div class=\"line\">        async.complete();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Membuat-project-vertx\"><a href=\"#Membuat-project-vertx\" class=\"headerlink\" title=\"Membuat project vertx\"></a>Membuat project vertx</h1><p>Struktur folder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── pom.xml</div><div class=\"line\">├── src</div><div class=\"line\">│   └── main</div><div class=\"line\">│       └── kotlin</div><div class=\"line\">├── target</div></pre></td></tr></table></figure></p>\n<p>pom.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ciazhar<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-rest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>vertx-rest<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>properties<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">main.verticle</span>&gt;</span>com.ciazhar.vertx.rest.MainVerticle<span class=\"tag\">&lt;/<span class=\"name\">main.verticle</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vertx.version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">vertx.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>dependency<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;vertx.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-lang-kotlin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;vertx.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>build<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;build&gt;</div><div class=\"line\">    &lt;pluginManagement&gt;</div><div class=\"line\">      &lt;plugins&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class=\"line\">          &lt;version&gt;3.1&lt;/version&gt;</div><div class=\"line\">          &lt;configuration&gt;</div><div class=\"line\">            &lt;source&gt;1.8&lt;/source&gt;</div><div class=\"line\">            &lt;target&gt;1.8&lt;/target&gt;</div><div class=\"line\">          &lt;/configuration&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">        &lt;plugin&gt;</div><div class=\"line\">          &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">          &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;</div><div class=\"line\">          &lt;version&gt;1.1.0&lt;/version&gt;</div><div class=\"line\">          &lt;executions&gt;</div><div class=\"line\">            &lt;execution&gt;</div><div class=\"line\">              &lt;id&gt;compile&lt;/id&gt;</div><div class=\"line\">              &lt;goals&gt; &lt;goal&gt;compile&lt;/goal&gt; &lt;/goals&gt;</div><div class=\"line\">              &lt;configuration&gt;</div><div class=\"line\">                &lt;sourceDirs&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/main/kotlin&lt;/sourceDir&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/main/java&lt;/sourceDir&gt;</div><div class=\"line\">                &lt;/sourceDirs&gt;</div><div class=\"line\">              &lt;/configuration&gt;</div><div class=\"line\">            &lt;/execution&gt;</div><div class=\"line\">            &lt;execution&gt;</div><div class=\"line\">              &lt;id&gt;test-compile&lt;/id&gt;</div><div class=\"line\">              &lt;goals&gt; &lt;goal&gt;test-compile&lt;/goal&gt; &lt;/goals&gt;</div><div class=\"line\">              &lt;configuration&gt;</div><div class=\"line\">                &lt;sourceDirs&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/test/kotlin&lt;/sourceDir&gt;</div><div class=\"line\">                  &lt;sourceDir&gt;$&#123;project.basedir&#125;/src/test/java&lt;/sourceDir&gt;</div><div class=\"line\">                &lt;/sourceDirs&gt;</div><div class=\"line\">              &lt;/configuration&gt;</div><div class=\"line\">            &lt;/execution&gt;</div><div class=\"line\">          &lt;/executions&gt;</div><div class=\"line\">        &lt;/plugin&gt;</div><div class=\"line\">      &lt;/plugins&gt;</div><div class=\"line\">    &lt;/pluginManagement&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;plugins&gt;</div><div class=\"line\">      &lt;plugin&gt;</div><div class=\"line\">        &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;</div><div class=\"line\">      &lt;/plugin&gt;</div><div class=\"line\">      &lt;plugin&gt;</div><div class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.3&lt;/version&gt;</div><div class=\"line\">        &lt;executions&gt;</div><div class=\"line\">          &lt;execution&gt;</div><div class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">            &lt;goals&gt;</div><div class=\"line\">              &lt;goal&gt;shade&lt;/goal&gt;</div><div class=\"line\">            &lt;/goals&gt;</div><div class=\"line\">            &lt;configuration&gt;</div><div class=\"line\">              &lt;transformers&gt;</div><div class=\"line\">                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</div><div class=\"line\">                  &lt;manifestEntries&gt;</div><div class=\"line\">                    &lt;Main-Class&gt;io.vertx.core.Launcher&lt;/Main-Class&gt;</div><div class=\"line\">                    &lt;Main-Verticle&gt;$&#123;main.verticle&#125;&lt;/Main-Verticle&gt;</div><div class=\"line\">                  &lt;/manifestEntries&gt;</div><div class=\"line\">                &lt;/transformer&gt;</div><div class=\"line\">                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;</div><div class=\"line\">                  &lt;resource&gt;META-INF/services/io.vertx.core.spi.VerticleFactory&lt;/resource&gt;</div><div class=\"line\">                &lt;/transformer&gt;</div><div class=\"line\">              &lt;/transformers&gt;</div><div class=\"line\">              &lt;artifactSet&gt;</div><div class=\"line\">              &lt;/artifactSet&gt;</div><div class=\"line\">              &lt;outputFile&gt;$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;-fat.jar&lt;/outputFile&gt;</div><div class=\"line\">            &lt;/configuration&gt;</div><div class=\"line\">          &lt;/execution&gt;</div><div class=\"line\">        &lt;/executions&gt;</div><div class=\"line\">      &lt;/plugin&gt;</div><div class=\"line\">    &lt;/plugins&gt;</div><div class=\"line\">  &lt;/build&gt;</div></pre></td></tr></table></figure></p>\n<p>simple verticle<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> vertx</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.AbstractVerticle</div><div class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Future</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainVerticle</span> : <span class=\"type\">AbstractVerticle</span></span>() &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">start</span><span class=\"params\">(future: <span class=\"type\">Future</span>&lt;<span class=\"type\">Void</span>&gt;)</span></span> &#123;</div><div class=\"line\">    vertx</div><div class=\"line\">      .createHttpServer()</div><div class=\"line\">      .requestHandler(&#123;</div><div class=\"line\">          req -&gt; req</div><div class=\"line\">              .response()</div><div class=\"line\">              .putHeader(<span class=\"string\">\"content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</div><div class=\"line\">              .end(<span class=\"string\">\"Hello from Vert.x!\"</span>)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .listen(<span class=\"number\">8080</span>,&#123;</div><div class=\"line\">          result -&gt;</div><div class=\"line\">          <span class=\"keyword\">if</span>(result.succeeded())&#123;</div><div class=\"line\">              future.complete()</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              future.fail(result.cause())</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h1><p>dependency<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.vertx<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>vertx-unit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>test<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RunWith(VertxUnitRunner.class)</div><div class=\"line\">public class MyFirstVerticleTest &#123;</div><div class=\"line\"></div><div class=\"line\">  private Vertx vertx;</div><div class=\"line\"></div><div class=\"line\">  @Before</div><div class=\"line\">  public void setUp(TestContext context) &#123;</div><div class=\"line\">    vertx = Vertx.vertx();</div><div class=\"line\">    vertx.deployVerticle(MyFirstVerticle.class.getName(),</div><div class=\"line\">        context.asyncAssertSuccess());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @After</div><div class=\"line\">  public void tearDown(TestContext context) &#123;</div><div class=\"line\">    vertx.close(context.asyncAssertSuccess());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Test</div><div class=\"line\">  public void testMyApplication(TestContext context) &#123;</div><div class=\"line\">    final Async async = context.async();</div><div class=\"line\"></div><div class=\"line\">    vertx.createHttpClient().getNow(8080, &quot;localhost&quot;, &quot;/&quot;,</div><div class=\"line\">     response -&gt; &#123;</div><div class=\"line\">      response.handler(body -&gt; &#123;</div><div class=\"line\">        context.assertTrue(body.toString().contains(&quot;Hello&quot;));</div><div class=\"line\">        async.complete();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Service","date":"2017-05-09T13:24:21.000Z","_content":"![](/images/angular.png)\nService ini pada dasarnya digunakan untuk membuat suatu layanan.\n- Untuk membuat service dapat menggunakan perintah sebagai berikut :\n```\nng g service NAMA_SERVICE;\n```\nSebagai contoh kita akan membuat service di dalam transaksi.\n- Struktur foldernya akan seperti berikut\n```\ntransaksi\n├── beli\n│   ├── beli.component.css\n│   ├── beli.component.html\n│   ├── beli.component.spec.ts\n│   └── beli.component.ts\n├── jual\n│   ├── jual.component.css\n│   ├── jual.component.html\n│   ├── jual.component.spec.ts\n│   └── jual.component.ts\n├── rekap\n│   ├── rekap.component.css\n│   ├── rekap.component.html\n│   ├── rekap.component.spec.ts\n│   └── rekap.component.ts\n├── transaksi.module.ts\n├── transaksi.service.spec.ts\n└── transaksi.service.ts\n```\n- Pada file service.ts terdapat anotasi `@Injectable`. Anotasi ini berfungsi untuk menandai koding javascript agar langsung injek ketika proses compilasi berlangsung.\n\n- Buat methode sederhana untuk service(transaksi.service.ts)\n```\ngetDaftarTransaksi(){\n  let dataTransaksi = [\n    {tanggal : \"tanggal\", keterangan : \"Saldo awal\",nilai : 0, saldo : 0},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 10, saldo : 10},\n    {tanggal : \"tanggal\", keterangan : \"Kurang\",nilai : 5, saldo : 5},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 20, saldo : 25}\n  ];\n}\n```\n\n- Buat promise untuk menjembatani apabila service mengalami kegagalan dalam http request.(transaksi.service.ts)\n```ts\ngetDaftarTransaksi(){\n  let dataTransaksi = [\n    {tanggal : \"tanggal\", keterangan : \"Saldo awal\",nilai : 0, saldo : 0},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 10, saldo : 10},\n    {tanggal : \"tanggal\", keterangan : \"Kurang\",nilai : 5, saldo : 5},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 20, saldo : 25}\n  ];\n  return Promise.resolve(dataTransaksi);\n}\n```\n\n- Import service (transaksi.module.ts)\n```\nimport { TransaksiService } from './transaksi.service'\n```\n- Definisikan pada ngModule sebagai provider (transaksi.module.ts)\n```\n@NgModule({\n  provider:[\n    TransaksiService\n  ]  \n})\n```\n- Service telah siap digunakan. Kemudian kita akan menggunakanya di component rekap(rekap.component.ts)\n```\nexport class RekapComponent implements OnIt {\n\n  dataTransaksi = [];\n\n  constructor(private transaksiService : TransaksiService){}\n\n  ngOnIt(){\n    this.transaksiService.getDaftarTransaksi().then(hasil => this.dataTransaksi = hasil)\n  }\n}\n```\n- Tampilkan hasilnya di UI(rekap.component.html)\n```\n<table class=\"table table-hover table-condensed table-striped\">\n  <thead>\n    <tr>\n      <th>Tanggal</th>\n      <th>Keterangan</th>\n      <th>Beli</th>\n      <th>Jual</th>\n      <th>Saldo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let transaksi of dataTransaksi\">\n      <th>{{transaksi.tanggal}}</th>\n      <th>{{transaksi.keterangan}}</th>\n      <th>{{transaksi.nilai}}</th>\n      <th>{{transaksi.nilai}}</th>\n      <th>{{transaksi.saldo}}</th>\n    </tr>\n  </tbody>\n</table>\n```\n","source":"_posts/pemrograman/angular/4-Service.md","raw":"---\ntitle: Service\ndate: 2017-05-09 20:24:21\ncategories:\n  - Pemrograman\n  - Angular\n---\n![](/images/angular.png)\nService ini pada dasarnya digunakan untuk membuat suatu layanan.\n- Untuk membuat service dapat menggunakan perintah sebagai berikut :\n```\nng g service NAMA_SERVICE;\n```\nSebagai contoh kita akan membuat service di dalam transaksi.\n- Struktur foldernya akan seperti berikut\n```\ntransaksi\n├── beli\n│   ├── beli.component.css\n│   ├── beli.component.html\n│   ├── beli.component.spec.ts\n│   └── beli.component.ts\n├── jual\n│   ├── jual.component.css\n│   ├── jual.component.html\n│   ├── jual.component.spec.ts\n│   └── jual.component.ts\n├── rekap\n│   ├── rekap.component.css\n│   ├── rekap.component.html\n│   ├── rekap.component.spec.ts\n│   └── rekap.component.ts\n├── transaksi.module.ts\n├── transaksi.service.spec.ts\n└── transaksi.service.ts\n```\n- Pada file service.ts terdapat anotasi `@Injectable`. Anotasi ini berfungsi untuk menandai koding javascript agar langsung injek ketika proses compilasi berlangsung.\n\n- Buat methode sederhana untuk service(transaksi.service.ts)\n```\ngetDaftarTransaksi(){\n  let dataTransaksi = [\n    {tanggal : \"tanggal\", keterangan : \"Saldo awal\",nilai : 0, saldo : 0},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 10, saldo : 10},\n    {tanggal : \"tanggal\", keterangan : \"Kurang\",nilai : 5, saldo : 5},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 20, saldo : 25}\n  ];\n}\n```\n\n- Buat promise untuk menjembatani apabila service mengalami kegagalan dalam http request.(transaksi.service.ts)\n```ts\ngetDaftarTransaksi(){\n  let dataTransaksi = [\n    {tanggal : \"tanggal\", keterangan : \"Saldo awal\",nilai : 0, saldo : 0},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 10, saldo : 10},\n    {tanggal : \"tanggal\", keterangan : \"Kurang\",nilai : 5, saldo : 5},\n    {tanggal : \"tanggal\", keterangan : \"Tambah\",nilai : 20, saldo : 25}\n  ];\n  return Promise.resolve(dataTransaksi);\n}\n```\n\n- Import service (transaksi.module.ts)\n```\nimport { TransaksiService } from './transaksi.service'\n```\n- Definisikan pada ngModule sebagai provider (transaksi.module.ts)\n```\n@NgModule({\n  provider:[\n    TransaksiService\n  ]  \n})\n```\n- Service telah siap digunakan. Kemudian kita akan menggunakanya di component rekap(rekap.component.ts)\n```\nexport class RekapComponent implements OnIt {\n\n  dataTransaksi = [];\n\n  constructor(private transaksiService : TransaksiService){}\n\n  ngOnIt(){\n    this.transaksiService.getDaftarTransaksi().then(hasil => this.dataTransaksi = hasil)\n  }\n}\n```\n- Tampilkan hasilnya di UI(rekap.component.html)\n```\n<table class=\"table table-hover table-condensed table-striped\">\n  <thead>\n    <tr>\n      <th>Tanggal</th>\n      <th>Keterangan</th>\n      <th>Beli</th>\n      <th>Jual</th>\n      <th>Saldo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let transaksi of dataTransaksi\">\n      <th>{{transaksi.tanggal}}</th>\n      <th>{{transaksi.keterangan}}</th>\n      <th>{{transaksi.nilai}}</th>\n      <th>{{transaksi.nilai}}</th>\n      <th>{{transaksi.saldo}}</th>\n    </tr>\n  </tbody>\n</table>\n```\n","slug":"pemrograman/angular/4-Service","published":1,"updated":"2017-05-21T14:18:15.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsniz001rislpt367eiu7","content":"<p><img src=\"/images/angular.png\" alt=\"\"><br>Service ini pada dasarnya digunakan untuk membuat suatu layanan.</p>\n<ul>\n<li>Untuk membuat service dapat menggunakan perintah sebagai berikut :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g service NAMA_SERVICE;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Sebagai contoh kita akan membuat service di dalam transaksi.</p>\n<ul>\n<li><p>Struktur foldernya akan seperti berikut</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">transaksi</div><div class=\"line\">├── beli</div><div class=\"line\">│   ├── beli.component.css</div><div class=\"line\">│   ├── beli.component.html</div><div class=\"line\">│   ├── beli.component.spec.ts</div><div class=\"line\">│   └── beli.component.ts</div><div class=\"line\">├── jual</div><div class=\"line\">│   ├── jual.component.css</div><div class=\"line\">│   ├── jual.component.html</div><div class=\"line\">│   ├── jual.component.spec.ts</div><div class=\"line\">│   └── jual.component.ts</div><div class=\"line\">├── rekap</div><div class=\"line\">│   ├── rekap.component.css</div><div class=\"line\">│   ├── rekap.component.html</div><div class=\"line\">│   ├── rekap.component.spec.ts</div><div class=\"line\">│   └── rekap.component.ts</div><div class=\"line\">├── transaksi.module.ts</div><div class=\"line\">├── transaksi.service.spec.ts</div><div class=\"line\">└── transaksi.service.ts</div></pre></td></tr></table></figure>\n</li>\n<li><p>Pada file service.ts terdapat anotasi <code>@Injectable</code>. Anotasi ini berfungsi untuk menandai koding javascript agar langsung injek ketika proses compilasi berlangsung.</p>\n</li>\n<li><p>Buat methode sederhana untuk service(transaksi.service.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDaftarTransaksi()&#123;</div><div class=\"line\">  let dataTransaksi = [</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Saldo awal&quot;,nilai : 0, saldo : 0&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 10, saldo : 10&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Kurang&quot;,nilai : 5, saldo : 5&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 20, saldo : 25&#125;</div><div class=\"line\">  ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat promise untuk menjembatani apabila service mengalami kegagalan dalam http request.(transaksi.service.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDaftarTransaksi()&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> dataTransaksi = [</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Saldo awal\"</span>,nilai : <span class=\"number\">0</span>, saldo : <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Tambah\"</span>,nilai : <span class=\"number\">10</span>, saldo : <span class=\"number\">10</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Kurang\"</span>,nilai : <span class=\"number\">5</span>, saldo : <span class=\"number\">5</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Tambah\"</span>,nilai : <span class=\"number\">20</span>, saldo : <span class=\"number\">25</span>&#125;</div><div class=\"line\">  ];</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(dataTransaksi);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Import service (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; TransaksiService &#125; from &apos;./transaksi.service&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Definisikan pada ngModule sebagai provider (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  provider:[</div><div class=\"line\">    TransaksiService</div><div class=\"line\">  ]  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service telah siap digunakan. Kemudian kita akan menggunakanya di component rekap(rekap.component.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">export class RekapComponent implements OnIt &#123;</div><div class=\"line\"></div><div class=\"line\">  dataTransaksi = [];</div><div class=\"line\"></div><div class=\"line\">  constructor(private transaksiService : TransaksiService)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnIt()&#123;</div><div class=\"line\">    this.transaksiService.getDaftarTransaksi().then(hasil =&gt; this.dataTransaksi = hasil)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tampilkan hasilnya di UI(rekap.component.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table table-hover table-condensed table-striped&quot;&gt;</div><div class=\"line\">  &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">      &lt;th&gt;Tanggal&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Keterangan&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Beli&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Jual&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Saldo&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/thead&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">    &lt;tr *ngFor=&quot;let transaksi of dataTransaksi&quot;&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.tanggal&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.keterangan&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.saldo&#125;&#125;&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"><br>Service ini pada dasarnya digunakan untuk membuat suatu layanan.</p>\n<ul>\n<li>Untuk membuat service dapat menggunakan perintah sebagai berikut :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g service NAMA_SERVICE;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Sebagai contoh kita akan membuat service di dalam transaksi.</p>\n<ul>\n<li><p>Struktur foldernya akan seperti berikut</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">transaksi</div><div class=\"line\">├── beli</div><div class=\"line\">│   ├── beli.component.css</div><div class=\"line\">│   ├── beli.component.html</div><div class=\"line\">│   ├── beli.component.spec.ts</div><div class=\"line\">│   └── beli.component.ts</div><div class=\"line\">├── jual</div><div class=\"line\">│   ├── jual.component.css</div><div class=\"line\">│   ├── jual.component.html</div><div class=\"line\">│   ├── jual.component.spec.ts</div><div class=\"line\">│   └── jual.component.ts</div><div class=\"line\">├── rekap</div><div class=\"line\">│   ├── rekap.component.css</div><div class=\"line\">│   ├── rekap.component.html</div><div class=\"line\">│   ├── rekap.component.spec.ts</div><div class=\"line\">│   └── rekap.component.ts</div><div class=\"line\">├── transaksi.module.ts</div><div class=\"line\">├── transaksi.service.spec.ts</div><div class=\"line\">└── transaksi.service.ts</div></pre></td></tr></table></figure>\n</li>\n<li><p>Pada file service.ts terdapat anotasi <code>@Injectable</code>. Anotasi ini berfungsi untuk menandai koding javascript agar langsung injek ketika proses compilasi berlangsung.</p>\n</li>\n<li><p>Buat methode sederhana untuk service(transaksi.service.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDaftarTransaksi()&#123;</div><div class=\"line\">  let dataTransaksi = [</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Saldo awal&quot;,nilai : 0, saldo : 0&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 10, saldo : 10&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Kurang&quot;,nilai : 5, saldo : 5&#125;,</div><div class=\"line\">    &#123;tanggal : &quot;tanggal&quot;, keterangan : &quot;Tambah&quot;,nilai : 20, saldo : 25&#125;</div><div class=\"line\">  ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat promise untuk menjembatani apabila service mengalami kegagalan dalam http request.(transaksi.service.ts)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDaftarTransaksi()&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> dataTransaksi = [</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Saldo awal\"</span>,nilai : <span class=\"number\">0</span>, saldo : <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Tambah\"</span>,nilai : <span class=\"number\">10</span>, saldo : <span class=\"number\">10</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Kurang\"</span>,nilai : <span class=\"number\">5</span>, saldo : <span class=\"number\">5</span>&#125;,</div><div class=\"line\">    &#123;tanggal : <span class=\"string\">\"tanggal\"</span>, keterangan : <span class=\"string\">\"Tambah\"</span>,nilai : <span class=\"number\">20</span>, saldo : <span class=\"number\">25</span>&#125;</div><div class=\"line\">  ];</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(dataTransaksi);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Import service (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; TransaksiService &#125; from &apos;./transaksi.service&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Definisikan pada ngModule sebagai provider (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  provider:[</div><div class=\"line\">    TransaksiService</div><div class=\"line\">  ]  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Service telah siap digunakan. Kemudian kita akan menggunakanya di component rekap(rekap.component.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">export class RekapComponent implements OnIt &#123;</div><div class=\"line\"></div><div class=\"line\">  dataTransaksi = [];</div><div class=\"line\"></div><div class=\"line\">  constructor(private transaksiService : TransaksiService)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  ngOnIt()&#123;</div><div class=\"line\">    this.transaksiService.getDaftarTransaksi().then(hasil =&gt; this.dataTransaksi = hasil)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tampilkan hasilnya di UI(rekap.component.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table class=&quot;table table-hover table-condensed table-striped&quot;&gt;</div><div class=\"line\">  &lt;thead&gt;</div><div class=\"line\">    &lt;tr&gt;</div><div class=\"line\">      &lt;th&gt;Tanggal&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Keterangan&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Beli&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Jual&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;Saldo&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/thead&gt;</div><div class=\"line\">  &lt;tbody&gt;</div><div class=\"line\">    &lt;tr *ngFor=&quot;let transaksi of dataTransaksi&quot;&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.tanggal&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.keterangan&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.nilai&#125;&#125;&lt;/th&gt;</div><div class=\"line\">      &lt;th&gt;&#123;&#123;transaksi.saldo&#125;&#125;&lt;/th&gt;</div><div class=\"line\">    &lt;/tr&gt;</div><div class=\"line\">  &lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Setup Project Hexo","date":"2017-05-07T09:35:07.000Z","_content":"![](/images/hexo.png)\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/pemrograman/hexo/1-Setup-Project-Hexo.md","raw":"---\ntitle: Setup Project Hexo\ndate: 2017-05-07 16:35:07\ncategories:\n  - Pemrograman\n  - Hexo\n---\n![](/images/hexo.png)\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"pemrograman/hexo/1-Setup-Project-Hexo","published":1,"updated":"2017-05-07T09:37:05.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnj3001uislpv0f4xt8n","content":"<p><img src=\"/images/hexo.png\" alt=\"\"></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p><img src=\"/images/hexo.png\" alt=\"\"></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Authorization and Authentification Service","date":"2017-05-20T14:03:29.000Z","_content":"![](/images/angular.png)\n# Membuat service otorisasi\n\n- Membuat shared module.\n```\nng g module shared\n```\n- Membuat service auth di dalam shared module\n```\ncd shared\nng g service auth\n```\n- Membuat service (auth.service.ts)\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthService {\n\n  constructor() { }\n\n  isLogin() : boolean{\n    return localStorage.getItem(\"authentification\")!=null;\n  }\n\n  getUserInfo() : any{\n    return localStorage.getItem(\"authentification\");\n  }\n\n  login(username : string, password : string) : boolean{\n    if(username == \"admin\" && password == \"123\"){\n      let userObject = {\n        username: \"admin\",\n        permissions: [\n          \"TRANSAKSI_VIEW\",\n          \"TRANSAKSI_EDIT\"\n        ]\n      }\n      localStorage.setItem(\"authentification\",JSON.stringify(userObject));\n      return true;\n    }\n    return false;\n  }\n\n  logout(){\n    localStorage.removeItem(\"authentification\");\n  }\n}\n```\n- Import auth service (shared.module.ts)\n```\nimport { AuthService } from './auth.service';\n```\n- Definisikan di ngModule sebagai exports\n```\n@NgModule({\n  exports: [\n    AuthService\n  ]\n})\n```\n- Membuat file authguard.ts\n```\nimport { Injectable }     from '@angular/core';\nimport { CanActivate, CanActivateChild }    from '@angular/router';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(private auth : AuthService){}\n\n  canActivate() {\n    console.log('AuthGuard#canActivate called');\n    return this.auth.isLogin();\n  }\n\n  canActivateChild() {\n\t  console.log('AuthGuard#canActivateChild called');\n      return this.canActivate();\n  }\n}\n```\n- import shared module (app.module.ts)\n```\nimport { AuthService } from './shared/auth.service';\nimport { AuthGuard } from './shared/authguard';\n```\n- definisikan di ngModule sebagai provider\n```\n@NgModule({\n  providers: [\n    AuthGuard, AuthService\n  ],\n})\n```\n- implement ke routing (app.module.ts)\n```\nconst routingAplikasi: Routes = [\n  { path: \"about\", component: AboutComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\", canActivateChild : [AuthGuard]},\n  { path: \"**\", component: WelcomeComponent }\n]\n```\n- implement ke routing (transaksi.module.ts)\n```\nconst routingTransaksi : Routes = [\n  { path: \"transaksi/beli\", component: BeliComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi/jual\", component: JualComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi/rekap\", component: RekapComponent }\n]\n```\n\n## Mengatur kondisi layout jika belum login\nApabila anda ingin membuat suatu menu tidak ditampilkan jika belum login, anda dapat menggunakan fungsi `isLogin` yang telah kita buat tadi. Anda cukup menyisipkan menu yang tidak ingin ditampilkan diantara tag yang berisi kondisi isLogin. Berikut adalah contoh penggunaannya :\n```html\n<span *ngIf=\"authService.isLogin()\"> <a routerLink=\"path\">Menu yang tidak ingin ditampilkan</a> </span>\n```\nKemudian definisikan service pada konstruktor pada module.ts nya.\n```\nconstructor(private authService : AuthService) { }\n```\nJangan lupa di import AuthService nya\n\n# Membuat Form Login\n- membuat component login form\n```\ncd shared\nng g component login\n```\n- membuat html nya\n```\n<div class=\"container\">\n  <form class=\"form-signin\">\n   <h2 class=\"form-signin-heading\">Please sign in</h2>\n   <label for=\"username\" class=\"sr-only\">Username</label>\n   <input [(ngModel)]=\"username\" type=\"text\" id=\"username\" name=\"username\" class=\"form-control\" placeholder=\"Username\" required autofocus>\n   <label for=\"password\" class=\"sr-only\">Password</label>\n   <input [(ngModel)]=\"password\" type=\"password\" id=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Password\" required>\n   <button class=\"btn btn-lg btn-primary btn-block\" (click)=login()>Sign in</button>\n </form>\n</div>\n```\n\n- import shared.module\n```\nimport { FormsModule } from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\n```\n- definisikan\n```\n@NgModule({\n  imports: [\n    FormsModule\n  ],\n  declarations: [LoginComponent],\n})\n\n```\n\n- import app.module\n```\nimport { LoginComponent } from './shared/login/login.component';\n```\n- definisikan\n```\n@NgModule({\n  declarations: [LoginComponent],\n})\n\n```\n- routing\n```\n{ path: \"login\", component: LoginComponent},\n```\n\n\n- method login login.component\n```\nusername : string;\npassword : string;\n\nlogin(){\n  let apa = this.authService.login(this.username, this.password);\n}\n```\n- constructor\n```\nconstructor (private authService : AuthService){}\n```\n- import\n```\nimport { AuthService } from '../auth.service';\n```\n\n# Membuat Logout\n```\n<li *ngIf=\"authService.isLogin()\"><a (click)=\"logout()\">Keluar</a></li>\n```\n```\nlogout(){\n  this.authService.logout();\n  this.router.navigate(['login']);\n}\n```\n```\nimport { AuthService } from '../shared/auth.service';\nimport { Router }   from '@angular/router';\n```\n","source":"_posts/pemrograman/angular/5-Auth-Service.md","raw":"---\ntitle: Authorization and Authentification Service\ndate: 2017-05-20 21:03:29\ncategories:\n  - Pemrograman\n  - Angular\n---\n![](/images/angular.png)\n# Membuat service otorisasi\n\n- Membuat shared module.\n```\nng g module shared\n```\n- Membuat service auth di dalam shared module\n```\ncd shared\nng g service auth\n```\n- Membuat service (auth.service.ts)\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthService {\n\n  constructor() { }\n\n  isLogin() : boolean{\n    return localStorage.getItem(\"authentification\")!=null;\n  }\n\n  getUserInfo() : any{\n    return localStorage.getItem(\"authentification\");\n  }\n\n  login(username : string, password : string) : boolean{\n    if(username == \"admin\" && password == \"123\"){\n      let userObject = {\n        username: \"admin\",\n        permissions: [\n          \"TRANSAKSI_VIEW\",\n          \"TRANSAKSI_EDIT\"\n        ]\n      }\n      localStorage.setItem(\"authentification\",JSON.stringify(userObject));\n      return true;\n    }\n    return false;\n  }\n\n  logout(){\n    localStorage.removeItem(\"authentification\");\n  }\n}\n```\n- Import auth service (shared.module.ts)\n```\nimport { AuthService } from './auth.service';\n```\n- Definisikan di ngModule sebagai exports\n```\n@NgModule({\n  exports: [\n    AuthService\n  ]\n})\n```\n- Membuat file authguard.ts\n```\nimport { Injectable }     from '@angular/core';\nimport { CanActivate, CanActivateChild }    from '@angular/router';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(private auth : AuthService){}\n\n  canActivate() {\n    console.log('AuthGuard#canActivate called');\n    return this.auth.isLogin();\n  }\n\n  canActivateChild() {\n\t  console.log('AuthGuard#canActivateChild called');\n      return this.canActivate();\n  }\n}\n```\n- import shared module (app.module.ts)\n```\nimport { AuthService } from './shared/auth.service';\nimport { AuthGuard } from './shared/authguard';\n```\n- definisikan di ngModule sebagai provider\n```\n@NgModule({\n  providers: [\n    AuthGuard, AuthService\n  ],\n})\n```\n- implement ke routing (app.module.ts)\n```\nconst routingAplikasi: Routes = [\n  { path: \"about\", component: AboutComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi\", redirectTo: \"/transaksi\", pathMatch: \"full\", canActivateChild : [AuthGuard]},\n  { path: \"**\", component: WelcomeComponent }\n]\n```\n- implement ke routing (transaksi.module.ts)\n```\nconst routingTransaksi : Routes = [\n  { path: \"transaksi/beli\", component: BeliComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi/jual\", component: JualComponent, canActivate : [AuthGuard] },\n  { path: \"transaksi/rekap\", component: RekapComponent }\n]\n```\n\n## Mengatur kondisi layout jika belum login\nApabila anda ingin membuat suatu menu tidak ditampilkan jika belum login, anda dapat menggunakan fungsi `isLogin` yang telah kita buat tadi. Anda cukup menyisipkan menu yang tidak ingin ditampilkan diantara tag yang berisi kondisi isLogin. Berikut adalah contoh penggunaannya :\n```html\n<span *ngIf=\"authService.isLogin()\"> <a routerLink=\"path\">Menu yang tidak ingin ditampilkan</a> </span>\n```\nKemudian definisikan service pada konstruktor pada module.ts nya.\n```\nconstructor(private authService : AuthService) { }\n```\nJangan lupa di import AuthService nya\n\n# Membuat Form Login\n- membuat component login form\n```\ncd shared\nng g component login\n```\n- membuat html nya\n```\n<div class=\"container\">\n  <form class=\"form-signin\">\n   <h2 class=\"form-signin-heading\">Please sign in</h2>\n   <label for=\"username\" class=\"sr-only\">Username</label>\n   <input [(ngModel)]=\"username\" type=\"text\" id=\"username\" name=\"username\" class=\"form-control\" placeholder=\"Username\" required autofocus>\n   <label for=\"password\" class=\"sr-only\">Password</label>\n   <input [(ngModel)]=\"password\" type=\"password\" id=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Password\" required>\n   <button class=\"btn btn-lg btn-primary btn-block\" (click)=login()>Sign in</button>\n </form>\n</div>\n```\n\n- import shared.module\n```\nimport { FormsModule } from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\n```\n- definisikan\n```\n@NgModule({\n  imports: [\n    FormsModule\n  ],\n  declarations: [LoginComponent],\n})\n\n```\n\n- import app.module\n```\nimport { LoginComponent } from './shared/login/login.component';\n```\n- definisikan\n```\n@NgModule({\n  declarations: [LoginComponent],\n})\n\n```\n- routing\n```\n{ path: \"login\", component: LoginComponent},\n```\n\n\n- method login login.component\n```\nusername : string;\npassword : string;\n\nlogin(){\n  let apa = this.authService.login(this.username, this.password);\n}\n```\n- constructor\n```\nconstructor (private authService : AuthService){}\n```\n- import\n```\nimport { AuthService } from '../auth.service';\n```\n\n# Membuat Logout\n```\n<li *ngIf=\"authService.isLogin()\"><a (click)=\"logout()\">Keluar</a></li>\n```\n```\nlogout(){\n  this.authService.logout();\n  this.router.navigate(['login']);\n}\n```\n```\nimport { AuthService } from '../shared/auth.service';\nimport { Router }   from '@angular/router';\n```\n","slug":"pemrograman/angular/5-Auth-Service","published":1,"updated":"2017-05-24T11:04:25.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnje001wislpfs7exyp0","content":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h1 id=\"Membuat-service-otorisasi\"><a href=\"#Membuat-service-otorisasi\" class=\"headerlink\" title=\"Membuat service otorisasi\"></a>Membuat service otorisasi</h1><ul>\n<li><p>Membuat shared module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g module shared</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat service auth di dalam shared module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd shared</div><div class=\"line\">ng g service auth</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat service (auth.service.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\">export class AuthService &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor() &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">  isLogin() : boolean&#123;</div><div class=\"line\">    return localStorage.getItem(&quot;authentification&quot;)!=null;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getUserInfo() : any&#123;</div><div class=\"line\">    return localStorage.getItem(&quot;authentification&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  login(username : string, password : string) : boolean&#123;</div><div class=\"line\">    if(username == &quot;admin&quot; &amp;&amp; password == &quot;123&quot;)&#123;</div><div class=\"line\">      let userObject = &#123;</div><div class=\"line\">        username: &quot;admin&quot;,</div><div class=\"line\">        permissions: [</div><div class=\"line\">          &quot;TRANSAKSI_VIEW&quot;,</div><div class=\"line\">          &quot;TRANSAKSI_EDIT&quot;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">      localStorage.setItem(&quot;authentification&quot;,JSON.stringify(userObject));</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  logout()&#123;</div><div class=\"line\">    localStorage.removeItem(&quot;authentification&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Import auth service (shared.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;./auth.service&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Definisikan di ngModule sebagai exports</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  exports: [</div><div class=\"line\">    AuthService</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file authguard.ts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Injectable &#125;     from &apos;@angular/core&apos;;</div><div class=\"line\">import &#123; CanActivate, CanActivateChild &#125;    from &apos;@angular/router&apos;;</div><div class=\"line\"></div><div class=\"line\">import &#123; AuthService &#125; from &apos;./auth.service&apos;;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\">export class AuthGuard implements CanActivate, CanActivateChild &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(private auth : AuthService)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  canActivate() &#123;</div><div class=\"line\">    console.log(&apos;AuthGuard#canActivate called&apos;);</div><div class=\"line\">    return this.auth.isLogin();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  canActivateChild() &#123;</div><div class=\"line\">\t  console.log(&apos;AuthGuard#canActivateChild called&apos;);</div><div class=\"line\">      return this.canActivate();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import shared module (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;./shared/auth.service&apos;;</div><div class=\"line\">import &#123; AuthGuard &#125; from &apos;./shared/authguard&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan di ngModule sebagai provider</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  providers: [</div><div class=\"line\">    AuthGuard, AuthService</div><div class=\"line\">  ],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>implement ke routing (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingAplikasi: Routes = [</div><div class=\"line\">  &#123; path: &quot;about&quot;, component: AboutComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi&quot;, redirectTo: &quot;/transaksi&quot;, pathMatch: &quot;full&quot;, canActivateChild : [AuthGuard]&#125;,</div><div class=\"line\">  &#123; path: &quot;**&quot;, component: WelcomeComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>implement ke routing (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingTransaksi : Routes = [</div><div class=\"line\">  &#123; path: &quot;transaksi/beli&quot;, component: BeliComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi/jual&quot;, component: JualComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi/rekap&quot;, component: RekapComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Mengatur-kondisi-layout-jika-belum-login\"><a href=\"#Mengatur-kondisi-layout-jika-belum-login\" class=\"headerlink\" title=\"Mengatur kondisi layout jika belum login\"></a>Mengatur kondisi layout jika belum login</h2><p>Apabila anda ingin membuat suatu menu tidak ditampilkan jika belum login, anda dapat menggunakan fungsi <code>isLogin</code> yang telah kita buat tadi. Anda cukup menyisipkan menu yang tidak ingin ditampilkan diantara tag yang berisi kondisi isLogin. Berikut adalah contoh penggunaannya :<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"authService.isLogin()\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"path\"</span>&gt;</span>Menu yang tidak ingin ditampilkan<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Kemudian definisikan service pada konstruktor pada module.ts nya.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor(private authService : AuthService) &#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>Jangan lupa di import AuthService nya</p>\n<h1 id=\"Membuat-Form-Login\"><a href=\"#Membuat-Form-Login\" class=\"headerlink\" title=\"Membuat Form Login\"></a>Membuat Form Login</h1><ul>\n<li><p>membuat component login form</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd shared</div><div class=\"line\">ng g component login</div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat html nya</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">  &lt;form class=&quot;form-signin&quot;&gt;</div><div class=\"line\">   &lt;h2 class=&quot;form-signin-heading&quot;&gt;Please sign in&lt;/h2&gt;</div><div class=\"line\">   &lt;label for=&quot;username&quot; class=&quot;sr-only&quot;&gt;Username&lt;/label&gt;</div><div class=\"line\">   &lt;input [(ngModel)]=&quot;username&quot; type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required autofocus&gt;</div><div class=\"line\">   &lt;label for=&quot;password&quot; class=&quot;sr-only&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">   &lt;input [(ngModel)]=&quot;password&quot; type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required&gt;</div><div class=\"line\">   &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; (click)=login()&gt;Sign in&lt;/button&gt;</div><div class=\"line\"> &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import shared.module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; FormsModule &#125; from &apos;@angular/forms&apos;;</div><div class=\"line\">import &#123; LoginComponent &#125; from &apos;./login/login.component&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    FormsModule</div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [LoginComponent],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>import app.module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; LoginComponent &#125; from &apos;./shared/login/login.component&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [LoginComponent],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>routing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; path: &quot;login&quot;, component: LoginComponent&#125;,</div></pre></td></tr></table></figure>\n</li>\n<li><p>method login login.component</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">username : string;</div><div class=\"line\">password : string;</div><div class=\"line\"></div><div class=\"line\">login()&#123;</div><div class=\"line\">  let apa = this.authService.login(this.username, this.password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>constructor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor (private authService : AuthService)&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;../auth.service&apos;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Membuat-Logout\"><a href=\"#Membuat-Logout\" class=\"headerlink\" title=\"Membuat Logout\"></a>Membuat Logout</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li *ngIf=&quot;authService.isLogin()&quot;&gt;&lt;a (click)=&quot;logout()&quot;&gt;Keluar&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">logout()&#123;</div><div class=\"line\">  this.authService.logout();</div><div class=\"line\">  this.router.navigate([&apos;login&apos;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;../shared/auth.service&apos;;</div><div class=\"line\">import &#123; Router &#125;   from &apos;@angular/router&apos;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><img src=\"/images/angular.png\" alt=\"\"></p>\n<h1 id=\"Membuat-service-otorisasi\"><a href=\"#Membuat-service-otorisasi\" class=\"headerlink\" title=\"Membuat service otorisasi\"></a>Membuat service otorisasi</h1><ul>\n<li><p>Membuat shared module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ng g module shared</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat service auth di dalam shared module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd shared</div><div class=\"line\">ng g service auth</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat service (auth.service.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Injectable &#125; from &apos;@angular/core&apos;;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\">export class AuthService &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor() &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">  isLogin() : boolean&#123;</div><div class=\"line\">    return localStorage.getItem(&quot;authentification&quot;)!=null;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getUserInfo() : any&#123;</div><div class=\"line\">    return localStorage.getItem(&quot;authentification&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  login(username : string, password : string) : boolean&#123;</div><div class=\"line\">    if(username == &quot;admin&quot; &amp;&amp; password == &quot;123&quot;)&#123;</div><div class=\"line\">      let userObject = &#123;</div><div class=\"line\">        username: &quot;admin&quot;,</div><div class=\"line\">        permissions: [</div><div class=\"line\">          &quot;TRANSAKSI_VIEW&quot;,</div><div class=\"line\">          &quot;TRANSAKSI_EDIT&quot;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">      localStorage.setItem(&quot;authentification&quot;,JSON.stringify(userObject));</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  logout()&#123;</div><div class=\"line\">    localStorage.removeItem(&quot;authentification&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Import auth service (shared.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;./auth.service&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Definisikan di ngModule sebagai exports</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  exports: [</div><div class=\"line\">    AuthService</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file authguard.ts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Injectable &#125;     from &apos;@angular/core&apos;;</div><div class=\"line\">import &#123; CanActivate, CanActivateChild &#125;    from &apos;@angular/router&apos;;</div><div class=\"line\"></div><div class=\"line\">import &#123; AuthService &#125; from &apos;./auth.service&apos;;</div><div class=\"line\"></div><div class=\"line\">@Injectable()</div><div class=\"line\">export class AuthGuard implements CanActivate, CanActivateChild &#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(private auth : AuthService)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  canActivate() &#123;</div><div class=\"line\">    console.log(&apos;AuthGuard#canActivate called&apos;);</div><div class=\"line\">    return this.auth.isLogin();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  canActivateChild() &#123;</div><div class=\"line\">\t  console.log(&apos;AuthGuard#canActivateChild called&apos;);</div><div class=\"line\">      return this.canActivate();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import shared module (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;./shared/auth.service&apos;;</div><div class=\"line\">import &#123; AuthGuard &#125; from &apos;./shared/authguard&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan di ngModule sebagai provider</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  providers: [</div><div class=\"line\">    AuthGuard, AuthService</div><div class=\"line\">  ],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>implement ke routing (app.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingAplikasi: Routes = [</div><div class=\"line\">  &#123; path: &quot;about&quot;, component: AboutComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi&quot;, redirectTo: &quot;/transaksi&quot;, pathMatch: &quot;full&quot;, canActivateChild : [AuthGuard]&#125;,</div><div class=\"line\">  &#123; path: &quot;**&quot;, component: WelcomeComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>implement ke routing (transaksi.module.ts)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">const routingTransaksi : Routes = [</div><div class=\"line\">  &#123; path: &quot;transaksi/beli&quot;, component: BeliComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi/jual&quot;, component: JualComponent, canActivate : [AuthGuard] &#125;,</div><div class=\"line\">  &#123; path: &quot;transaksi/rekap&quot;, component: RekapComponent &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Mengatur-kondisi-layout-jika-belum-login\"><a href=\"#Mengatur-kondisi-layout-jika-belum-login\" class=\"headerlink\" title=\"Mengatur kondisi layout jika belum login\"></a>Mengatur kondisi layout jika belum login</h2><p>Apabila anda ingin membuat suatu menu tidak ditampilkan jika belum login, anda dapat menggunakan fungsi <code>isLogin</code> yang telah kita buat tadi. Anda cukup menyisipkan menu yang tidak ingin ditampilkan diantara tag yang berisi kondisi isLogin. Berikut adalah contoh penggunaannya :<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"authService.isLogin()\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"path\"</span>&gt;</span>Menu yang tidak ingin ditampilkan<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>Kemudian definisikan service pada konstruktor pada module.ts nya.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor(private authService : AuthService) &#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>Jangan lupa di import AuthService nya</p>\n<h1 id=\"Membuat-Form-Login\"><a href=\"#Membuat-Form-Login\" class=\"headerlink\" title=\"Membuat Form Login\"></a>Membuat Form Login</h1><ul>\n<li><p>membuat component login form</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd shared</div><div class=\"line\">ng g component login</div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat html nya</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot;&gt;</div><div class=\"line\">  &lt;form class=&quot;form-signin&quot;&gt;</div><div class=\"line\">   &lt;h2 class=&quot;form-signin-heading&quot;&gt;Please sign in&lt;/h2&gt;</div><div class=\"line\">   &lt;label for=&quot;username&quot; class=&quot;sr-only&quot;&gt;Username&lt;/label&gt;</div><div class=\"line\">   &lt;input [(ngModel)]=&quot;username&quot; type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required autofocus&gt;</div><div class=\"line\">   &lt;label for=&quot;password&quot; class=&quot;sr-only&quot;&gt;Password&lt;/label&gt;</div><div class=\"line\">   &lt;input [(ngModel)]=&quot;password&quot; type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required&gt;</div><div class=\"line\">   &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; (click)=login()&gt;Sign in&lt;/button&gt;</div><div class=\"line\"> &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import shared.module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; FormsModule &#125; from &apos;@angular/forms&apos;;</div><div class=\"line\">import &#123; LoginComponent &#125; from &apos;./login/login.component&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  imports: [</div><div class=\"line\">    FormsModule</div><div class=\"line\">  ],</div><div class=\"line\">  declarations: [LoginComponent],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>import app.module</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; LoginComponent &#125; from &apos;./shared/login/login.component&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>definisikan</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@NgModule(&#123;</div><div class=\"line\">  declarations: [LoginComponent],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>routing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; path: &quot;login&quot;, component: LoginComponent&#125;,</div></pre></td></tr></table></figure>\n</li>\n<li><p>method login login.component</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">username : string;</div><div class=\"line\">password : string;</div><div class=\"line\"></div><div class=\"line\">login()&#123;</div><div class=\"line\">  let apa = this.authService.login(this.username, this.password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>constructor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">constructor (private authService : AuthService)&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>import</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;../auth.service&apos;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Membuat-Logout\"><a href=\"#Membuat-Logout\" class=\"headerlink\" title=\"Membuat Logout\"></a>Membuat Logout</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li *ngIf=&quot;authService.isLogin()&quot;&gt;&lt;a (click)=&quot;logout()&quot;&gt;Keluar&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">logout()&#123;</div><div class=\"line\">  this.authService.logout();</div><div class=\"line\">  this.router.navigate([&apos;login&apos;]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; AuthService &#125; from &apos;../shared/auth.service&apos;;</div><div class=\"line\">import &#123; Router &#125;   from &apos;@angular/router&apos;;</div></pre></td></tr></table></figure>\n"},{"title":"Database Mirgation dengan FlywayDB","date":"2017-05-28T09:03:30.000Z","_content":"![](/images/springboot.png)\n\n\n\n- jalankan seperti biasa projectnya maka akan di generate folder resource/db/migration\n- koneksikan dengan database agar model dapat di ubah menjadi tabel\n- show create table nama_tabel \n- copy trus paste ke file sql \n- jalankan dan sukses","source":"_posts/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB.md","raw":"---\ntitle: Database Mirgation dengan FlywayDB\ndate: 2017-05-28 16:03:30\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n\n\n- jalankan seperti biasa projectnya maka akan di generate folder resource/db/migration\n- koneksikan dengan database agar model dapat di ubah menjadi tabel\n- show create table nama_tabel \n- copy trus paste ke file sql \n- jalankan dan sukses","slug":"pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB","published":1,"updated":"2017-08-14T04:47:40.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnl1003bislpyj0im8um","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<ul>\n<li>jalankan seperti biasa projectnya maka akan di generate folder resource/db/migration</li>\n<li>koneksikan dengan database agar model dapat di ubah menjadi tabel</li>\n<li>show create table nama_tabel </li>\n<li>copy trus paste ke file sql </li>\n<li>jalankan dan sukses</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<ul>\n<li>jalankan seperti biasa projectnya maka akan di generate folder resource/db/migration</li>\n<li>koneksikan dengan database agar model dapat di ubah menjadi tabel</li>\n<li>show create table nama_tabel </li>\n<li>copy trus paste ke file sql </li>\n<li>jalankan dan sukses</li>\n</ul>\n"},{"title":"Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL","date":"2017-04-23T07:17:31.000Z","_content":"![](/images/springboot.png)\n\n# Setup Project untuk CRUD\nPada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.\nBerikut ini merupakan langkah-langkahnya :\n\n## Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)\n\n```xml\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>6.0.6</version>\n  </dependency>\n```\nUntuk mencari dependency dapat dilihat di [Maven Repostory](https://mvnrepository.com)\n\n## Setting Database (main/resources/application.properties)\n\n```yml\n  spring.datasource.url=jdbc:mysql://localhost:3306/pelatihan\n  spring.datasource.username=pelatihanuser\n  spring.datasource.password=pelatihanpasswd\n```\nKeterangan :\n1. `spring.datasource.url` merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan)\n2. `spring.datasource.username` merupakan username database.\n3. `spring.datasource.password` merupakan password database.\n\n\n## Membuat Schema (CLI).\nUntuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql.\n- Login ke mysql. Jika sudah login dapat diabaikan langkah ini.\n\n```\n  mysql -u root -p\n```\n- Memasang otentifikasi database\n\n```\ngrant all on pelatihan.* to pelatihanuser@localhost identified by 'pelatihanpasswd'\n```\n- Membuat database\n\n```\ncreate database pelatihan;\n```\n\n## Meggunakan MySQL (CLI)\nBerikut adalah sintaks yang akan sering digunakan dalam mysql.\n- Menggunakan database\n\n```\n  use pelatihan;\n```\n- Melihat list tabel dalam database\n\n```\n  show tables;\n```\n- Melihat atribut pada tabel secara detail\n\n```\t\t\n  show create table nama_tabel \\G\n```\n- Melihat data pada tabel\n\n```\n  select * from nama_tabel\n```\n- Menghapus data pada tabel\n\n```\n  drop table peserta;\n```\n","source":"_posts/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql.md","raw":"---\ntitle: Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL\ndate: 2017-04-23 14:17:31\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n# Setup Project untuk CRUD\nPada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.\nBerikut ini merupakan langkah-langkahnya :\n\n## Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)\n\n```xml\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>6.0.6</version>\n  </dependency>\n```\nUntuk mencari dependency dapat dilihat di [Maven Repostory](https://mvnrepository.com)\n\n## Setting Database (main/resources/application.properties)\n\n```yml\n  spring.datasource.url=jdbc:mysql://localhost:3306/pelatihan\n  spring.datasource.username=pelatihanuser\n  spring.datasource.password=pelatihanpasswd\n```\nKeterangan :\n1. `spring.datasource.url` merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan)\n2. `spring.datasource.username` merupakan username database.\n3. `spring.datasource.password` merupakan password database.\n\n\n## Membuat Schema (CLI).\nUntuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql.\n- Login ke mysql. Jika sudah login dapat diabaikan langkah ini.\n\n```\n  mysql -u root -p\n```\n- Memasang otentifikasi database\n\n```\ngrant all on pelatihan.* to pelatihanuser@localhost identified by 'pelatihanpasswd'\n```\n- Membuat database\n\n```\ncreate database pelatihan;\n```\n\n## Meggunakan MySQL (CLI)\nBerikut adalah sintaks yang akan sering digunakan dalam mysql.\n- Menggunakan database\n\n```\n  use pelatihan;\n```\n- Melihat list tabel dalam database\n\n```\n  show tables;\n```\n- Melihat atribut pada tabel secara detail\n\n```\t\t\n  show create table nama_tabel \\G\n```\n- Melihat data pada tabel\n\n```\n  select * from nama_tabel\n```\n- Menghapus data pada tabel\n\n```\n  drop table peserta;\n```\n","slug":"pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql","published":1,"updated":"2017-05-28T08:56:04.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnl3003cislpym1ig67m","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Setup-Project-untuk-CRUD\"><a href=\"#Setup-Project-untuk-CRUD\" class=\"headerlink\" title=\"Setup Project untuk CRUD\"></a>Setup Project untuk CRUD</h1><p>Pada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.<br>Berikut ini merupakan langkah-langkahnya :</p>\n<h2 id=\"Pertama-tama-kita-akan-tambahkan-dependendcy-spring-data-jpa-pom-xml\"><a href=\"#Pertama-tama-kita-akan-tambahkan-dependendcy-spring-data-jpa-pom-xml\" class=\"headerlink\" title=\"Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)\"></a>Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Untuk mencari dependency dapat dilihat di <a href=\"https://mvnrepository.com\" target=\"_blank\" rel=\"external\">Maven Repostory</a></p>\n<h2 id=\"Setting-Database-main-resources-application-properties\"><a href=\"#Setting-Database-main-resources-application-properties\" class=\"headerlink\" title=\"Setting Database (main/resources/application.properties)\"></a>Setting Database (main/resources/application.properties)</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">spring.datasource.url=jdbc:mysql://localhost:3306/pelatihan</span></div><div class=\"line\"><span class=\"string\">spring.datasource.username=pelatihanuser</span></div><div class=\"line\"><span class=\"string\">spring.datasource.password=pelatihanpasswd</span></div></pre></td></tr></table></figure>\n<p>Keterangan :</p>\n<ol>\n<li><code>spring.datasource.url</code> merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan)</li>\n<li><code>spring.datasource.username</code> merupakan username database.</li>\n<li><code>spring.datasource.password</code> merupakan password database.</li>\n</ol>\n<h2 id=\"Membuat-Schema-CLI\"><a href=\"#Membuat-Schema-CLI\" class=\"headerlink\" title=\"Membuat Schema (CLI).\"></a>Membuat Schema (CLI).</h2><p>Untuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql.</p>\n<ul>\n<li>Login ke mysql. Jika sudah login dapat diabaikan langkah ini.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div></pre></td></tr></table></figure>\n<ul>\n<li>Memasang otentifikasi database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all on pelatihan.* to pelatihanuser@localhost identified by &apos;pelatihanpasswd&apos;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database pelatihan;</div></pre></td></tr></table></figure>\n<h2 id=\"Meggunakan-MySQL-CLI\"><a href=\"#Meggunakan-MySQL-CLI\" class=\"headerlink\" title=\"Meggunakan MySQL (CLI)\"></a>Meggunakan MySQL (CLI)</h2><p>Berikut adalah sintaks yang akan sering digunakan dalam mysql.</p>\n<ul>\n<li>Menggunakan database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use pelatihan;</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat list tabel dalam database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show tables;</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat atribut pada tabel secara detail</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create table nama_tabel \\G</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat data pada tabel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from nama_tabel</div></pre></td></tr></table></figure>\n<ul>\n<li>Menghapus data pada tabel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table peserta;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Setup-Project-untuk-CRUD\"><a href=\"#Setup-Project-untuk-CRUD\" class=\"headerlink\" title=\"Setup Project untuk CRUD\"></a>Setup Project untuk CRUD</h1><p>Pada tutorial kali ini kita akan melakukan Create Read Update Delete (CRUD) menggunakan Spring Data JPA. Kita akan menggunakan mysql untuk databasenya, jadi anda harus menginstallnya terlebih dahulu.<br>Berikut ini merupakan langkah-langkahnya :</p>\n<h2 id=\"Pertama-tama-kita-akan-tambahkan-dependendcy-spring-data-jpa-pom-xml\"><a href=\"#Pertama-tama-kita-akan-tambahkan-dependendcy-spring-data-jpa-pom-xml\" class=\"headerlink\" title=\"Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)\"></a>Pertama-tama kita akan tambahkan dependendcy spring data jpa (pom.xml)</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Untuk mencari dependency dapat dilihat di <a href=\"https://mvnrepository.com\">Maven Repostory</a></p>\n<h2 id=\"Setting-Database-main-resources-application-properties\"><a href=\"#Setting-Database-main-resources-application-properties\" class=\"headerlink\" title=\"Setting Database (main/resources/application.properties)\"></a>Setting Database (main/resources/application.properties)</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">spring.datasource.url=jdbc:mysql://localhost:3306/pelatihan</span></div><div class=\"line\"><span class=\"string\">spring.datasource.username=pelatihanuser</span></div><div class=\"line\"><span class=\"string\">spring.datasource.password=pelatihanpasswd</span></div></pre></td></tr></table></figure>\n<p>Keterangan :</p>\n<ol>\n<li><code>spring.datasource.url</code> merupakan url untuk database. Dalam pengisianya harap disesuaikan dengan jenis database, port pada perangkat, dan nama database yang telah dibuat. Pada contoh tersebut menggunakan jenis database (mysql), port pada perangkat (3306), dan nama database(pelatihan)</li>\n<li><code>spring.datasource.username</code> merupakan username database.</li>\n<li><code>spring.datasource.password</code> merupakan password database.</li>\n</ol>\n<h2 id=\"Membuat-Schema-CLI\"><a href=\"#Membuat-Schema-CLI\" class=\"headerlink\" title=\"Membuat Schema (CLI).\"></a>Membuat Schema (CLI).</h2><p>Untuk schema tetap harus dibuat manual. Berikut langkah-langkahnya untuk mysql.</p>\n<ul>\n<li>Login ke mysql. Jika sudah login dapat diabaikan langkah ini.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div></pre></td></tr></table></figure>\n<ul>\n<li>Memasang otentifikasi database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all on pelatihan.* to pelatihanuser@localhost identified by &apos;pelatihanpasswd&apos;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database pelatihan;</div></pre></td></tr></table></figure>\n<h2 id=\"Meggunakan-MySQL-CLI\"><a href=\"#Meggunakan-MySQL-CLI\" class=\"headerlink\" title=\"Meggunakan MySQL (CLI)\"></a>Meggunakan MySQL (CLI)</h2><p>Berikut adalah sintaks yang akan sering digunakan dalam mysql.</p>\n<ul>\n<li>Menggunakan database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use pelatihan;</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat list tabel dalam database</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show tables;</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat atribut pada tabel secara detail</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create table nama_tabel \\G</div></pre></td></tr></table></figure>\n<ul>\n<li>Melihat data pada tabel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from nama_tabel</div></pre></td></tr></table></figure>\n<ul>\n<li>Menghapus data pada tabel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table peserta;</div></pre></td></tr></table></figure>\n"},{"title":"CRUD Menggunakan Spring Data JPA dan Thymeleaf","date":"2017-04-23T07:17:32.000Z","_content":"![](/images/springboot.png)\n\n# CRUD menggunakan Spring Data JPA\n\nUntuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu :\n- Membuat Model.\n  Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database.\n- Membuat DAO.\n  Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller.\n- Membuat Controller.\n  Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url.\n- Membuat View (List dan Form).\n  View ini akan menjadi apa yang akan dilihat oleh user.\nJadi Struktur foldernya akan seperti ini :\nStruktur foldernya akan seperti berikut :\n```\nsrc\n └── main\n |    ├── java\n |       └── com\n |           └── example\n |               ├── DemoApplication.java\n |               ├── controllers\n |               ├── dao\n |               └── model\n └── resources\n         ├── application.properties\n         ├── static\n         │   ├── css\n         │   ├── fonts\n         │   └── js\n         └── templates\n```\n\nCRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side.  Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja.\n\n## Membuat Model\n- Membuat class untuk model\n\n```java\n@Entity\npublic class Peserta {\n}\n```\nKeterangan :\nUntuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi `Entity` pada bagian atasnya.\n- Menambahkan atribut\n\n```java\n@Entity\npublic class Peserta {\n\n    private String id;\n    private String nama;\n    private String email;\n    private String noHp;\n}\n```\n- Menambahkan validasi tiap atribut\n\n```java\n@Entity @Table(name = \"tabel_peserta\")\npublic class Peserta {\n\n    @Id @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private String id;\n\n    @Column(nullable=false)\n    @NotNull\n    @NotEmpty\n    @Size(min = 1, max = 150)\n    private String nama;  \n\n    @Column(nullable=false,unique=true)\n    @Email\n    @NotNull\n    @NotEmpty\n    private String email;\n\n    @Column(nullable=false,unique=true)\n    @NotNull\n    @NotEmpty\n    private String noHp;\n}\n```\nKeterangan :\nValidasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll.\n\n- Menambahkan getter dan setter\n\n```java\npublic String getId() {\n    return id;\n}\n\npublic void setId(String id) {\n    this.id = id;\n}\n\npublic String getNama() {\n    return nama;\n}\n\npublic void setNama(String nama) {\n    this.nama = nama;\n}\n\npublic String getEmail() {\n    return email;\n}\n\npublic void setEmail(String email) {\n    this.email = email;\n}\n\npublic String getNoHp() {\n    return noHp;\n}\n\npublic void setNoHp(String noHp) {\n    this.noHp = noHp;\n}\n```\n\n## Membuat DAO\n- Membuat interface dao dan menginherit class PagingAndSortingRepository\n\n```java\npublic interface PesertaDao extends PagingAndSortingRepository<Peserta, String>{\n\n}\n```\nKeterangan :\nDengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll.\n\n- Membuat methode untuk searching (optional)\n\n```java\npublic interface PesertaDao extends PagingAndSortingRepository<Peserta, String>{\n\n  @Query(value = \"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\")\n  public Page<Peserta> findByKelasId(String id_kelas, Pageable pageable);\n\n}\n```\nKeterangan :\nSelain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa.\n\n\n- Membuat controller (src/main/java/domain/controller/PesertaPagingController.java)\n  ```java\n    @Controller\n    @RequestMapping(\"/peserta\")\n    public class PesertaPagingController {\n\n        @Autowired\n        PesertaPagingDao pesertaPagingDao;\n\n        @RequestMapping(\"/list\")\n        public String listPeserta(ModelMap modelMap){\n            modelMap.put(\"peserta\",pesertaPagingDao.findAll());\n            return \"/peserta/list\";\n        }\n\n        @RequestMapping(value = \"/form\", method = RequestMethod.GET)\n        public void tampilkanForm(\n                @RequestParam(required = false, name = \"id\") PesertaPaging peserta,\n                ModelMap mm){\n            if(peserta != null){\n                mm.addAttribute(\"peserta\", peserta);\n            } else {\n                mm.addAttribute(\"peserta\", new PesertaPaging());\n            }\n        }\n        @RequestMapping(value = \"/form\", method = RequestMethod.POST)\n        public String prosesForm(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi){\n            if(hasilValidasi.hasErrors()){\n                return \"/peserta/form\";\n            }\n            pesertaPagingDao.save(p);\n            return \"redirect:list\";\n        }\n        @RequestMapping(value = \"/hapus\")\n        public String hapusPeserta(@RequestParam(name = \"id\")String id,ModelMap modelMap){\n            pesertaPagingDao.delete(id);\n            return \"redirect:list\";\n        }\n    }\n  ```\n- Membuat UI untuk list(src/main/resources/templates/peserta/list.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <title>Aplikasi Spring Boot</title>\n        <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n        <link rel=\"stylesheet\" th:href=\"@{/css/starter-template.css}\" media=\"screen\"/>\n\n    </head>\n\n    <body>\n\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n            </div>\n            <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li class=\"active\"><a th:href=\"@{/peserta}\">Daftar Peserta</a></li>\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                </ul>\n            </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n\n\n    <div class=\"container\">\n        <h1>Daftar Peserta</h1>\n        <div th:if=\"${not #lists.isEmpty(peserta)}\">\n            <table class=\"table table-striped\">\n                <tr>\n                    <th>Nama</th>\n                    <th>Email</th>\n                    <th>No Hp</th>\n                    <th>Action</th>\n                </tr>\n                <tr th:each=\"pesertas : ${peserta}\">\n                    <td th:text=\"${pesertas.nama}\"></td>\n                    <td th:text=\"${pesertas.email}\"></td>\n                    <td th:text=\"${pesertas.noHp}\"></td>\n                    <td>\n                        <a th:href=\"@{/peserta/form(id=${pesertas.id})}\"><span class=\"glyphicon glyphicon-edit\"></span></a>\n                        <a th:href=\"@{/peserta/hapus(id=${pesertas.id})}\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <div>\n            <a class=\"btn btn-default\" th:href=\"@{/peserta/form}\">New</a>\n        </div>\n    </div>\n\n\n    <script th:src=\"@{/js/jquery.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n    </html>\n  ```\n- Membuat UI untuk form(src/main/resources/templates/peserta/form.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <title>Aplikasi Spring Boot</title>\n        <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n        <link rel=\"stylesheet\" th:href=\"@{/css/starter-template.css}\" media=\"screen\"/>\n\n    </head>\n\n    <body>\n\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n            </div>\n            <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li class=\"active\"><a th:href=\"@{/peserta}\">Daftar Peserta</a></li>\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                </ul>\n            </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n\n    <div class=\"container\">\n        <h1>Form Peserta</h1>\n        <div class=\"row\">\n            <div class=\"col-sm-8\">\n                <form class=\"form-horizontal\" th:object=\"${peserta}\" th:action=\"@{/peserta/form}\" method=\"post\">\n                    <input type=\"hidden\" th:field=\"*{id}\"/>\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Nama:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" th:field=\"*{nama}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Email:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"email\" class=\"form-control\" th:field=\"*{email}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Nomer HP:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" th:field=\"*{noHp}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <button type=\"submit\" class=\"btn btn-deffault\">Simpan</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n\n    <script th:src=\"@{/js/jquery.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n    </html>\n  ```\n","source":"_posts/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf.md","raw":"---\ntitle: CRUD Menggunakan Spring Data JPA dan Thymeleaf\ndate: 2017-04-23 14:17:32\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n# CRUD menggunakan Spring Data JPA\n\nUntuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu :\n- Membuat Model.\n  Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database.\n- Membuat DAO.\n  Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller.\n- Membuat Controller.\n  Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url.\n- Membuat View (List dan Form).\n  View ini akan menjadi apa yang akan dilihat oleh user.\nJadi Struktur foldernya akan seperti ini :\nStruktur foldernya akan seperti berikut :\n```\nsrc\n └── main\n |    ├── java\n |       └── com\n |           └── example\n |               ├── DemoApplication.java\n |               ├── controllers\n |               ├── dao\n |               └── model\n └── resources\n         ├── application.properties\n         ├── static\n         │   ├── css\n         │   ├── fonts\n         │   └── js\n         └── templates\n```\n\nCRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side.  Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja.\n\n## Membuat Model\n- Membuat class untuk model\n\n```java\n@Entity\npublic class Peserta {\n}\n```\nKeterangan :\nUntuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi `Entity` pada bagian atasnya.\n- Menambahkan atribut\n\n```java\n@Entity\npublic class Peserta {\n\n    private String id;\n    private String nama;\n    private String email;\n    private String noHp;\n}\n```\n- Menambahkan validasi tiap atribut\n\n```java\n@Entity @Table(name = \"tabel_peserta\")\npublic class Peserta {\n\n    @Id @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private String id;\n\n    @Column(nullable=false)\n    @NotNull\n    @NotEmpty\n    @Size(min = 1, max = 150)\n    private String nama;  \n\n    @Column(nullable=false,unique=true)\n    @Email\n    @NotNull\n    @NotEmpty\n    private String email;\n\n    @Column(nullable=false,unique=true)\n    @NotNull\n    @NotEmpty\n    private String noHp;\n}\n```\nKeterangan :\nValidasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll.\n\n- Menambahkan getter dan setter\n\n```java\npublic String getId() {\n    return id;\n}\n\npublic void setId(String id) {\n    this.id = id;\n}\n\npublic String getNama() {\n    return nama;\n}\n\npublic void setNama(String nama) {\n    this.nama = nama;\n}\n\npublic String getEmail() {\n    return email;\n}\n\npublic void setEmail(String email) {\n    this.email = email;\n}\n\npublic String getNoHp() {\n    return noHp;\n}\n\npublic void setNoHp(String noHp) {\n    this.noHp = noHp;\n}\n```\n\n## Membuat DAO\n- Membuat interface dao dan menginherit class PagingAndSortingRepository\n\n```java\npublic interface PesertaDao extends PagingAndSortingRepository<Peserta, String>{\n\n}\n```\nKeterangan :\nDengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll.\n\n- Membuat methode untuk searching (optional)\n\n```java\npublic interface PesertaDao extends PagingAndSortingRepository<Peserta, String>{\n\n  @Query(value = \"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\")\n  public Page<Peserta> findByKelasId(String id_kelas, Pageable pageable);\n\n}\n```\nKeterangan :\nSelain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa.\n\n\n- Membuat controller (src/main/java/domain/controller/PesertaPagingController.java)\n  ```java\n    @Controller\n    @RequestMapping(\"/peserta\")\n    public class PesertaPagingController {\n\n        @Autowired\n        PesertaPagingDao pesertaPagingDao;\n\n        @RequestMapping(\"/list\")\n        public String listPeserta(ModelMap modelMap){\n            modelMap.put(\"peserta\",pesertaPagingDao.findAll());\n            return \"/peserta/list\";\n        }\n\n        @RequestMapping(value = \"/form\", method = RequestMethod.GET)\n        public void tampilkanForm(\n                @RequestParam(required = false, name = \"id\") PesertaPaging peserta,\n                ModelMap mm){\n            if(peserta != null){\n                mm.addAttribute(\"peserta\", peserta);\n            } else {\n                mm.addAttribute(\"peserta\", new PesertaPaging());\n            }\n        }\n        @RequestMapping(value = \"/form\", method = RequestMethod.POST)\n        public String prosesForm(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi){\n            if(hasilValidasi.hasErrors()){\n                return \"/peserta/form\";\n            }\n            pesertaPagingDao.save(p);\n            return \"redirect:list\";\n        }\n        @RequestMapping(value = \"/hapus\")\n        public String hapusPeserta(@RequestParam(name = \"id\")String id,ModelMap modelMap){\n            pesertaPagingDao.delete(id);\n            return \"redirect:list\";\n        }\n    }\n  ```\n- Membuat UI untuk list(src/main/resources/templates/peserta/list.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <title>Aplikasi Spring Boot</title>\n        <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n        <link rel=\"stylesheet\" th:href=\"@{/css/starter-template.css}\" media=\"screen\"/>\n\n    </head>\n\n    <body>\n\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n            </div>\n            <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li class=\"active\"><a th:href=\"@{/peserta}\">Daftar Peserta</a></li>\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                </ul>\n            </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n\n\n    <div class=\"container\">\n        <h1>Daftar Peserta</h1>\n        <div th:if=\"${not #lists.isEmpty(peserta)}\">\n            <table class=\"table table-striped\">\n                <tr>\n                    <th>Nama</th>\n                    <th>Email</th>\n                    <th>No Hp</th>\n                    <th>Action</th>\n                </tr>\n                <tr th:each=\"pesertas : ${peserta}\">\n                    <td th:text=\"${pesertas.nama}\"></td>\n                    <td th:text=\"${pesertas.email}\"></td>\n                    <td th:text=\"${pesertas.noHp}\"></td>\n                    <td>\n                        <a th:href=\"@{/peserta/form(id=${pesertas.id})}\"><span class=\"glyphicon glyphicon-edit\"></span></a>\n                        <a th:href=\"@{/peserta/hapus(id=${pesertas.id})}\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n                    </td>\n                </tr>\n            </table>\n        </div>\n        <div>\n            <a class=\"btn btn-default\" th:href=\"@{/peserta/form}\">New</a>\n        </div>\n    </div>\n\n\n    <script th:src=\"@{/js/jquery.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n    </html>\n  ```\n- Membuat UI untuk form(src/main/resources/templates/peserta/form.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <title>Aplikasi Spring Boot</title>\n        <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n        <link rel=\"stylesheet\" th:href=\"@{/css/starter-template.css}\" media=\"screen\"/>\n\n    </head>\n\n    <body>\n\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n            </div>\n            <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li class=\"active\"><a th:href=\"@{/peserta}\">Daftar Peserta</a></li>\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                </ul>\n            </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n\n    <div class=\"container\">\n        <h1>Form Peserta</h1>\n        <div class=\"row\">\n            <div class=\"col-sm-8\">\n                <form class=\"form-horizontal\" th:object=\"${peserta}\" th:action=\"@{/peserta/form}\" method=\"post\">\n                    <input type=\"hidden\" th:field=\"*{id}\"/>\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Nama:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" th:field=\"*{nama}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Email:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"email\" class=\"form-control\" th:field=\"*{email}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-2 control-label\">Nomer HP:</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" th:field=\"*{noHp}\"/>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <button type=\"submit\" class=\"btn btn-deffault\">Simpan</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n\n    <script th:src=\"@{/js/jquery.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n    </html>\n  ```\n","slug":"pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf","published":1,"updated":"2017-08-04T20:15:34.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnld003dislpbjyk4d74","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"CRUD-menggunakan-Spring-Data-JPA\"><a href=\"#CRUD-menggunakan-Spring-Data-JPA\" class=\"headerlink\" title=\"CRUD menggunakan Spring Data JPA\"></a>CRUD menggunakan Spring Data JPA</h1><p>Untuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu :</p>\n<ul>\n<li>Membuat Model.<br>Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database.</li>\n<li>Membuat DAO.<br>Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller.</li>\n<li>Membuat Controller.<br>Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url.</li>\n<li>Membuat View (List dan Form).<br>View ini akan menjadi apa yang akan dilihat oleh user.<br>Jadi Struktur foldernya akan seperti ini :<br>Struktur foldernya akan seperti berikut :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">src</div><div class=\"line\"> └── main</div><div class=\"line\"> |    ├── java</div><div class=\"line\"> |       └── com</div><div class=\"line\"> |           └── example</div><div class=\"line\"> |               ├── DemoApplication.java</div><div class=\"line\"> |               ├── controllers</div><div class=\"line\"> |               ├── dao</div><div class=\"line\"> |               └── model</div><div class=\"line\"> └── resources</div><div class=\"line\">         ├── application.properties</div><div class=\"line\">         ├── static</div><div class=\"line\">         │   ├── css</div><div class=\"line\">         │   ├── fonts</div><div class=\"line\">         │   └── js</div><div class=\"line\">         └── templates</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>CRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side.  Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja.</p>\n<h2 id=\"Membuat-Model\"><a href=\"#Membuat-Model\" class=\"headerlink\" title=\"Membuat Model\"></a>Membuat Model</h2><ul>\n<li>Membuat class untuk model</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Untuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi <code>Entity</code> pada bagian atasnya.</p>\n<ul>\n<li>Menambahkan atribut</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nama;</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">    <span class=\"keyword\">private</span> String noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Menambahkan validasi tiap atribut</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"meta\">@Table</span>(name = <span class=\"string\">\"tabel_peserta\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"meta\">@GeneratedValue</span>(generator = <span class=\"string\">\"uuid\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GenericGenerator</span>(name = <span class=\"string\">\"uuid\"</span>, strategy = <span class=\"string\">\"uuid2\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>)</div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"meta\">@Size</span>(min = <span class=\"number\">1</span>, max = <span class=\"number\">150</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String nama;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>,unique=<span class=\"keyword\">true</span>)</div><div class=\"line\">    <span class=\"meta\">@Email</span></div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>,unique=<span class=\"keyword\">true</span>)</div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Validasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll.</p>\n<ul>\n<li>Menambahkan getter dan setter</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNama</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> nama;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNama</span><span class=\"params\">(String nama)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.nama = nama;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> email;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNoHp</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> noHp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNoHp</span><span class=\"params\">(String noHp)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.noHp = noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Membuat-DAO\"><a href=\"#Membuat-DAO\" class=\"headerlink\" title=\"Membuat DAO\"></a>Membuat DAO</h2><ul>\n<li>Membuat interface dao dan menginherit class PagingAndSortingRepository</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PesertaDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagingAndSortingRepository</span>&lt;<span class=\"title\">Peserta</span>, <span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Dengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll.</p>\n<ul>\n<li>Membuat methode untuk searching (optional)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PesertaDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagingAndSortingRepository</span>&lt;<span class=\"title\">Peserta</span>, <span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Query</span>(value = <span class=\"string\">\"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Peserta&gt; <span class=\"title\">findByKelasId</span><span class=\"params\">(String id_kelas, Pageable pageable)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Selain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa.</p>\n<ul>\n<li><p>Membuat controller (src/main/java/domain/controller/PesertaPagingController.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/peserta\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PesertaPagingController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    PesertaPagingDao pesertaPagingDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">listPeserta</span><span class=\"params\">(ModelMap modelMap)</span></span>&#123;</div><div class=\"line\">        modelMap.put(<span class=\"string\">\"peserta\"</span>,pesertaPagingDao.findAll());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"/peserta/list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/form\"</span>, method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tampilkanForm</span><span class=\"params\">(</span></span></div><div class=\"line\">            @RequestParam(required = <span class=\"keyword\">false</span>, name = <span class=\"string\">\"id\"</span>) PesertaPaging peserta,</div><div class=\"line\">            ModelMap mm)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(peserta != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            mm.addAttribute(<span class=\"string\">\"peserta\"</span>, peserta);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mm.addAttribute(<span class=\"string\">\"peserta\"</span>, <span class=\"keyword\">new</span> PesertaPaging());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/form\"</span>, method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">prosesForm</span><span class=\"params\">(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasilValidasi.hasErrors())&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"/peserta/form\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pesertaPagingDao.save(p);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hapus\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hapusPeserta</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"id\"</span>)</span>String id,ModelMap modelMap)</span>&#123;</div><div class=\"line\">        pesertaPagingDao.delete(id);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat UI untuk list(src/main/resources/templates/peserta/list.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/starter-template.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navbar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"collapse navbar-collapse\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--/.nav-collapse --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;not #lists.isEmpty(peserta)&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-striped\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>No Hp<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Action<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"pesertas : $&#123;peserta&#125;\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.nama&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.noHp&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/form(id=$&#123;pesertas.id&#125;)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/hapus(id=$&#123;pesertas.id&#125;)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/form&#125;\"</span>&gt;</span>New<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat UI untuk form(src/main/resources/templates/peserta/form.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/starter-template.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navbar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"collapse navbar-collapse\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--/.nav-collapse --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Form Peserta<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-8\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;peserta&#125;\"</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/peserta/form&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;id&#125;\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Nama:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;nama&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;email&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Nomer HP:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;noHp&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-deffault\"</span>&gt;</span>Simpan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"CRUD-menggunakan-Spring-Data-JPA\"><a href=\"#CRUD-menggunakan-Spring-Data-JPA\" class=\"headerlink\" title=\"CRUD menggunakan Spring Data JPA\"></a>CRUD menggunakan Spring Data JPA</h1><p>Untuk melakukan CRUD, setiap entitas didefinisikan dengan beberapa tahap yaitu :</p>\n<ul>\n<li>Membuat Model.<br>Di model ini akan terdapat atribut-atribut yang nantinya akan ditrasformasikan menjadi tabel pada Database.</li>\n<li>Membuat DAO.<br>Dia yang bertugas mendefinisikan metode apa saja yang dibutuhkan oleh Controller.</li>\n<li>Membuat Controller.<br>Controller ini berfungsi untuk mengatur apa yang akan ditampilkan ke view, apa yang akan disimpan ke database dan melakukan mapping url.</li>\n<li>Membuat View (List dan Form).<br>View ini akan menjadi apa yang akan dilihat oleh user.<br>Jadi Struktur foldernya akan seperti ini :<br>Struktur foldernya akan seperti berikut :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">src</div><div class=\"line\"> └── main</div><div class=\"line\"> |    ├── java</div><div class=\"line\"> |       └── com</div><div class=\"line\"> |           └── example</div><div class=\"line\"> |               ├── DemoApplication.java</div><div class=\"line\"> |               ├── controllers</div><div class=\"line\"> |               ├── dao</div><div class=\"line\"> |               └── model</div><div class=\"line\"> └── resources</div><div class=\"line\">         ├── application.properties</div><div class=\"line\">         ├── static</div><div class=\"line\">         │   ├── css</div><div class=\"line\">         │   ├── fonts</div><div class=\"line\">         │   └── js</div><div class=\"line\">         └── templates</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>CRUD sendiri dapat dibagi menjadi 2 tipe tergantung dimana menggenerate contenya, yaitu client side dan server side.  Dalam mengiplementasikanya, bentuk Model dan Dao nya tetap sama, yang membedakan adalah controller dan viewnya saja.</p>\n<h2 id=\"Membuat-Model\"><a href=\"#Membuat-Model\" class=\"headerlink\" title=\"Membuat Model\"></a>Membuat Model</h2><ul>\n<li>Membuat class untuk model</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Untuk setiap kelas yang ingin dibuat menjadi model, harus diberi anotasi <code>Entity</code> pada bagian atasnya.</p>\n<ul>\n<li>Menambahkan atribut</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nama;</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">    <span class=\"keyword\">private</span> String noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Menambahkan validasi tiap atribut</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span> <span class=\"meta\">@Table</span>(name = <span class=\"string\">\"tabel_peserta\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Peserta</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Id</span> <span class=\"meta\">@GeneratedValue</span>(generator = <span class=\"string\">\"uuid\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GenericGenerator</span>(name = <span class=\"string\">\"uuid\"</span>, strategy = <span class=\"string\">\"uuid2\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>)</div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"meta\">@Size</span>(min = <span class=\"number\">1</span>, max = <span class=\"number\">150</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String nama;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>,unique=<span class=\"keyword\">true</span>)</div><div class=\"line\">    <span class=\"meta\">@Email</span></div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Column</span>(nullable=<span class=\"keyword\">false</span>,unique=<span class=\"keyword\">true</span>)</div><div class=\"line\">    <span class=\"meta\">@NotNull</span></div><div class=\"line\">    <span class=\"meta\">@NotEmpty</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Validasi di spring sendiri menggunkan JSR-303. Setiap variabel dapat didefinisikan secara spesifik menggunakan validasi. Sebagai Table, NotNull, NotEmpty dll.</p>\n<ul>\n<li>Menambahkan getter dan setter</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNama</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> nama;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNama</span><span class=\"params\">(String nama)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.nama = nama;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> email;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.email = email;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getNoHp</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> noHp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNoHp</span><span class=\"params\">(String noHp)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.noHp = noHp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Membuat-DAO\"><a href=\"#Membuat-DAO\" class=\"headerlink\" title=\"Membuat DAO\"></a>Membuat DAO</h2><ul>\n<li>Membuat interface dao dan menginherit class PagingAndSortingRepository</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PesertaDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagingAndSortingRepository</span>&lt;<span class=\"title\">Peserta</span>, <span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Dengan menginherit class PagingAndSortingRepository kita dapat menggunakan method yang biasa digunakan untuk CRUD seperti findAll, findOne, save, delete dll.</p>\n<ul>\n<li>Membuat methode untuk searching (optional)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PesertaDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagingAndSortingRepository</span>&lt;<span class=\"title\">Peserta</span>, <span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Query</span>(value = <span class=\"string\">\"select p from Peserta p where p.kelas.id = ?1 ORDER BY id_kelas\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Peserta&gt; <span class=\"title\">findByKelasId</span><span class=\"params\">(String id_kelas, Pageable pageable)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>Selain spring sudah mendefinisikan method yang sering digunakan, spring juga memperbolehkan kita untuk membuat method sesuai yang kita inginkan. Sebagai contoh diatas kita membuat Page yang berisi daftar peserta berdasar kelas tertentu. Dalam pembuatanya spring juga memperbolehkan menggunakan query sql atau query jpa.</p>\n<ul>\n<li><p>Membuat controller (src/main/java/domain/controller/PesertaPagingController.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/peserta\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PesertaPagingController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    PesertaPagingDao pesertaPagingDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/list\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">listPeserta</span><span class=\"params\">(ModelMap modelMap)</span></span>&#123;</div><div class=\"line\">        modelMap.put(<span class=\"string\">\"peserta\"</span>,pesertaPagingDao.findAll());</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"/peserta/list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/form\"</span>, method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tampilkanForm</span><span class=\"params\">(</div><div class=\"line\">            @RequestParam(required = <span class=\"keyword\">false</span>, name = <span class=\"string\">\"id\"</span>)</span> PesertaPaging peserta,</div><div class=\"line\">            ModelMap mm)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(peserta != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            mm.addAttribute(<span class=\"string\">\"peserta\"</span>, peserta);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mm.addAttribute(<span class=\"string\">\"peserta\"</span>, <span class=\"keyword\">new</span> PesertaPaging());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/form\"</span>, method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">prosesForm</span><span class=\"params\">(@ModelAttribute @Valid PesertaPaging p, BindingResult hasilValidasi)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasilValidasi.hasErrors())&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"/peserta/form\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pesertaPagingDao.save(p);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hapus\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hapusPeserta</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"id\"</span>)</span>String id,ModelMap modelMap)</span>&#123;</div><div class=\"line\">        pesertaPagingDao.delete(id);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:list\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat UI untuk list(src/main/resources/templates/peserta/list.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/starter-template.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navbar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"collapse navbar-collapse\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--/.nav-collapse --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;not #lists.isEmpty(peserta)&#125;\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-striped\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>No Hp<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Action<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"pesertas : $&#123;peserta&#125;\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.nama&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.noHp&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/form(id=$&#123;pesertas.id&#125;)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/hapus(id=$&#123;pesertas.id&#125;)&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta/form&#125;\"</span>&gt;</span>New<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat UI untuk form(src/main/resources/templates/peserta/form.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/starter-template.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"navbar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"collapse navbar-collapse\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"active\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#contact\"</span>&gt;</span>Contact<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--/.nav-collapse --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Form Peserta<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-8\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-horizontal\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;peserta&#125;\"</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/peserta/form&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;id&#125;\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Nama:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;nama&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;email&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;</span>Nomer HP:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-sm-10\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;noHp&#125;\"</span>/&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-deffault\"</span>&gt;</span>Simpan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Introduction to Spring","date":"2017-04-23T07:17:28.000Z","sticky":true,"_content":"\n![](/images/spring.png)\n# Sekilas tentang Spring\n\nThe [Spring Framework](http://spring.io) provides a comprehensive programming and configuration model for modern [Java-based](https://en.wikipedia.org/wiki/List_of_JVM_languages) enterprise applications - on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.\n\n# Features\n\n- Dependency Injection\n- Aspect-Oriented Programming including Spring's declarative transaction management\n- Spring MVC web application and RESTful web service framework\n- Foundational support for JDBC, JPA, JMS\n- Much more…\n\nAll available features and modules are described in [the Modules section of the reference documentation](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#overview-modules). Their [maven/gradle coordinates are also described there](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#dependency-management).\n\n\n# Roadmap Belajar Spring\nBerikut sekilas peta jalan yang akan kita pelajari untuk dapat membuat aplikasi spring :\n\n## Setup Project\n- [Setup Project Spring Boot](https://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/)\n\n## Web\n- [Membuat Web Menggunakan Spring Boot dan Thymeleaf](https://ciazhar.github.io/2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/)\n\n## Template Engine\n- [Template Engine Thymeleaf](https://ciazhar.github.io/2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/)\n\n## Create Read Update Delete\n- [Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/)\n- [CRUD dengan Spring Data JPA + Thymeleaf (Server Side Rendering)](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/)\n- [CRUD dengan Spring Data JPA + AngularJS (Client Side Rendering / RESTfull API)](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/)\n<!-- - [Spring Boot REST API Design Pattern](https://ciazhar.github.io/2017/05/27/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended)/) -->\n<!-- - [Kardinalitas pada Spring Data JPA](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/3-kardinalitas/)  -->\n- [Debug Spring Data JPA](https://ciazhar.github.io/2017/05/28/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA/)  \n\n## Security\n- [Otoriasai login dengan Spring Security](https://ciazhar.github.io/2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/)\n- [Otorisasi controller dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/) \n- [Debug Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/3-debug-spring-security/) \n- [Melihat Data User Login dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/)   \n- [Securing Spring Boot App with Spring OAuth2 + JSON Web Token (JWT)](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/5-oauth2-spring/)\n- [Single Signed On dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/)\n\n## Report\n- [Membuat Report dengan Jasper Report](https://ciazhar.github.io/2017/04/23/pemrograman/spring/report/jasper-report/)\n\n## Mail\n- [Membuat Register dengan Verifikasi Email](https://ciazhar.github.io/2017/08/17/pemrograman/spring/mail/sending-mail/)\n\n## Database Migration\n- [Migrasi Database dengan FlywayDB](https://ciazhar.github.io/2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/)\n\n## Microservice\n- [Microservice dengan Spring Cloud](https://ciazhar.github.io/2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/)\n- [Spring Cloud Discovery Service (Eureka)](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/)\n- [Spring Cloud Circuit Breaker (Hystrix)](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/)\n- [Spring Cloud API Gateway (Zuul)](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/)\n- [Spring Cloud Config Service : Intro](https://ciazhar.github.io/2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/)\n- [Spring Cloud Config Service : File System](https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/)\n- [Spring Cloud Config Service : Vault Server](https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/)\n- [Spring Cloud Config Service : Git Repositoty](https://ciazhar.github.io/2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/)\n- [Spring Cloud Config Service : Config Client](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/) \n- [Spring Cloud Config Service : Encryption & Decryption](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Encryption-Decryption/) \n- [Spring Cloud Config Service : Refresh Scope & Health](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/) \n- [Spring Cloud Config Service : Security](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/) \n","source":"_posts/pemrograman/spring/intro/1-introduction-to-spring-boot.md","raw":"---\ntitle: Introduction to Spring\ndate: 2017-04-23 14:17:28\ncategories:\n  - Pemrograman\n  - Spring\nsticky: true\n---\n\n![](/images/spring.png)\n# Sekilas tentang Spring\n\nThe [Spring Framework](http://spring.io) provides a comprehensive programming and configuration model for modern [Java-based](https://en.wikipedia.org/wiki/List_of_JVM_languages) enterprise applications - on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.\n\n# Features\n\n- Dependency Injection\n- Aspect-Oriented Programming including Spring's declarative transaction management\n- Spring MVC web application and RESTful web service framework\n- Foundational support for JDBC, JPA, JMS\n- Much more…\n\nAll available features and modules are described in [the Modules section of the reference documentation](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#overview-modules). Their [maven/gradle coordinates are also described there](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#dependency-management).\n\n\n# Roadmap Belajar Spring\nBerikut sekilas peta jalan yang akan kita pelajari untuk dapat membuat aplikasi spring :\n\n## Setup Project\n- [Setup Project Spring Boot](https://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/)\n\n## Web\n- [Membuat Web Menggunakan Spring Boot dan Thymeleaf](https://ciazhar.github.io/2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/)\n\n## Template Engine\n- [Template Engine Thymeleaf](https://ciazhar.github.io/2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/)\n\n## Create Read Update Delete\n- [Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/)\n- [CRUD dengan Spring Data JPA + Thymeleaf (Server Side Rendering)](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/)\n- [CRUD dengan Spring Data JPA + AngularJS (Client Side Rendering / RESTfull API)](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/)\n<!-- - [Spring Boot REST API Design Pattern](https://ciazhar.github.io/2017/05/27/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended)/) -->\n<!-- - [Kardinalitas pada Spring Data JPA](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/3-kardinalitas/)  -->\n- [Debug Spring Data JPA](https://ciazhar.github.io/2017/05/28/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA/)  \n\n## Security\n- [Otoriasai login dengan Spring Security](https://ciazhar.github.io/2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/)\n- [Otorisasi controller dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/) \n- [Debug Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/3-debug-spring-security/) \n- [Melihat Data User Login dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/)   \n- [Securing Spring Boot App with Spring OAuth2 + JSON Web Token (JWT)](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/5-oauth2-spring/)\n- [Single Signed On dengan Spring Security](https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/)\n\n## Report\n- [Membuat Report dengan Jasper Report](https://ciazhar.github.io/2017/04/23/pemrograman/spring/report/jasper-report/)\n\n## Mail\n- [Membuat Register dengan Verifikasi Email](https://ciazhar.github.io/2017/08/17/pemrograman/spring/mail/sending-mail/)\n\n## Database Migration\n- [Migrasi Database dengan FlywayDB](https://ciazhar.github.io/2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/)\n\n## Microservice\n- [Microservice dengan Spring Cloud](https://ciazhar.github.io/2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/)\n- [Spring Cloud Discovery Service (Eureka)](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/)\n- [Spring Cloud Circuit Breaker (Hystrix)](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/)\n- [Spring Cloud API Gateway (Zuul)](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/)\n- [Spring Cloud Config Service : Intro](https://ciazhar.github.io/2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/)\n- [Spring Cloud Config Service : File System](https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/)\n- [Spring Cloud Config Service : Vault Server](https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/)\n- [Spring Cloud Config Service : Git Repositoty](https://ciazhar.github.io/2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/)\n- [Spring Cloud Config Service : Config Client](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/) \n- [Spring Cloud Config Service : Encryption & Decryption](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Encryption-Decryption/) \n- [Spring Cloud Config Service : Refresh Scope & Health](https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/) \n- [Spring Cloud Config Service : Security](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/) \n","slug":"pemrograman/spring/intro/1-introduction-to-spring-boot","published":1,"updated":"2017-08-18T23:17:47.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnlk003fislplggdfv3r","content":"<p><img src=\"/images/spring.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Spring\"><a href=\"#Sekilas-tentang-Spring\" class=\"headerlink\" title=\"Sekilas tentang Spring\"></a>Sekilas tentang Spring</h1><p>The <a href=\"http://spring.io\" target=\"_blank\" rel=\"external\">Spring Framework</a> provides a comprehensive programming and configuration model for modern <a href=\"https://en.wikipedia.org/wiki/List_of_JVM_languages\" target=\"_blank\" rel=\"external\">Java-based</a> enterprise applications - on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>\n<h1 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h1><ul>\n<li>Dependency Injection</li>\n<li>Aspect-Oriented Programming including Spring’s declarative transaction management</li>\n<li>Spring MVC web application and RESTful web service framework</li>\n<li>Foundational support for JDBC, JPA, JMS</li>\n<li>Much more…</li>\n</ul>\n<p>All available features and modules are described in <a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#overview-modules\" target=\"_blank\" rel=\"external\">the Modules section of the reference documentation</a>. Their <a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#dependency-management\" target=\"_blank\" rel=\"external\">maven/gradle coordinates are also described there</a>.</p>\n<h1 id=\"Roadmap-Belajar-Spring\"><a href=\"#Roadmap-Belajar-Spring\" class=\"headerlink\" title=\"Roadmap Belajar Spring\"></a>Roadmap Belajar Spring</h1><p>Berikut sekilas peta jalan yang akan kita pelajari untuk dapat membuat aplikasi spring :</p>\n<h2 id=\"Setup-Project\"><a href=\"#Setup-Project\" class=\"headerlink\" title=\"Setup Project\"></a>Setup Project</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/\">Setup Project Spring Boot</a></li>\n</ul>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/\">Membuat Web Menggunakan Spring Boot dan Thymeleaf</a></li>\n</ul>\n<h2 id=\"Template-Engine\"><a href=\"#Template-Engine\" class=\"headerlink\" title=\"Template Engine\"></a>Template Engine</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/\">Template Engine Thymeleaf</a></li>\n</ul>\n<h2 id=\"Create-Read-Update-Delete\"><a href=\"#Create-Read-Update-Delete\" class=\"headerlink\" title=\"Create Read Update Delete\"></a>Create Read Update Delete</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/\">Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/\">CRUD dengan Spring Data JPA + Thymeleaf (Server Side Rendering)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/\">CRUD dengan Spring Data JPA + AngularJS (Client Side Rendering / RESTfull API)</a><!-- - [Spring Boot REST API Design Pattern](https://ciazhar.github.io/2017/05/27/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended)/) -->\n<!-- - [Kardinalitas pada Spring Data JPA](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/3-kardinalitas/)  --></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA/\">Debug Spring Data JPA</a>  </li>\n</ul>\n<h2 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/\">Otoriasai login dengan Spring Security</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/\">Otorisasi controller dengan Spring Security</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/3-debug-spring-security/\">Debug Spring Security</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/\">Melihat Data User Login dengan Spring Security</a>   </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/5-oauth2-spring/\">Securing Spring Boot App with Spring OAuth2 + JSON Web Token (JWT)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/\">Single Signed On dengan Spring Security</a></li>\n</ul>\n<h2 id=\"Report\"><a href=\"#Report\" class=\"headerlink\" title=\"Report\"></a>Report</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/report/jasper-report/\">Membuat Report dengan Jasper Report</a></li>\n</ul>\n<h2 id=\"Mail\"><a href=\"#Mail\" class=\"headerlink\" title=\"Mail\"></a>Mail</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/08/17/pemrograman/spring/mail/sending-mail/\">Membuat Register dengan Verifikasi Email</a></li>\n</ul>\n<h2 id=\"Database-Migration\"><a href=\"#Database-Migration\" class=\"headerlink\" title=\"Database Migration\"></a>Database Migration</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/\">Migrasi Database dengan FlywayDB</a></li>\n</ul>\n<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/\">Microservice dengan Spring Cloud</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/\">Spring Cloud Discovery Service (Eureka)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/\">Spring Cloud Circuit Breaker (Hystrix)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/\">Spring Cloud API Gateway (Zuul)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/\">Spring Cloud Config Service : Intro</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/\">Spring Cloud Config Service : File System</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/\">Spring Cloud Config Service : Vault Server</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/\">Spring Cloud Config Service : Git Repositoty</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/\">Spring Cloud Config Service : Config Client</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Encryption-Decryption/\">Spring Cloud Config Service : Encryption &amp; Decryption</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/\">Spring Cloud Config Service : Refresh Scope &amp; Health</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/\">Spring Cloud Config Service : Security</a> </li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/spring.png\" alt=\"\"></p>\n<h1 id=\"Sekilas-tentang-Spring\"><a href=\"#Sekilas-tentang-Spring\" class=\"headerlink\" title=\"Sekilas tentang Spring\"></a>Sekilas tentang Spring</h1><p>The <a href=\"http://spring.io\">Spring Framework</a> provides a comprehensive programming and configuration model for modern <a href=\"https://en.wikipedia.org/wiki/List_of_JVM_languages\">Java-based</a> enterprise applications - on any kind of deployment platform. A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>\n<h1 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h1><ul>\n<li>Dependency Injection</li>\n<li>Aspect-Oriented Programming including Spring’s declarative transaction management</li>\n<li>Spring MVC web application and RESTful web service framework</li>\n<li>Foundational support for JDBC, JPA, JMS</li>\n<li>Much more…</li>\n</ul>\n<p>All available features and modules are described in <a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#overview-modules\">the Modules section of the reference documentation</a>. Their <a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/overview.html#dependency-management\">maven/gradle coordinates are also described there</a>.</p>\n<h1 id=\"Roadmap-Belajar-Spring\"><a href=\"#Roadmap-Belajar-Spring\" class=\"headerlink\" title=\"Roadmap Belajar Spring\"></a>Roadmap Belajar Spring</h1><p>Berikut sekilas peta jalan yang akan kita pelajari untuk dapat membuat aplikasi spring :</p>\n<h2 id=\"Setup-Project\"><a href=\"#Setup-Project\" class=\"headerlink\" title=\"Setup Project\"></a>Setup Project</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/intro/2-setup-project-spring-boot/\">Setup Project Spring Boot</a></li>\n</ul>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf/\">Membuat Web Menggunakan Spring Boot dan Thymeleaf</a></li>\n</ul>\n<h2 id=\"Template-Engine\"><a href=\"#Template-Engine\" class=\"headerlink\" title=\"Template Engine\"></a>Template Engine</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/template-engine/layout-dengan-thymeleaf/\">Template Engine Thymeleaf</a></li>\n</ul>\n<h2 id=\"Create-Read-Update-Delete\"><a href=\"#Create-Read-Update-Delete\" class=\"headerlink\" title=\"Create Read Update Delete\"></a>Create Read Update Delete</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/1-setup-project-crud-jpa-mysql/\">Setup Project Untuk CRUD dengan Spring Data JPA dan MySQL</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.1-crud-jpa-thymeleaf/\">CRUD dengan Spring Data JPA + Thymeleaf (Server Side Rendering)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS/\">CRUD dengan Spring Data JPA + AngularJS (Client Side Rendering / RESTfull API)</a><!-- - [Spring Boot REST API Design Pattern](https://ciazhar.github.io/2017/05/27/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended)/) -->\n<!-- - [Kardinalitas pada Spring Data JPA](https://ciazhar.github.io/2017/04/23/pemrograman/spring/jpa/3-kardinalitas/)  --></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA/\">Debug Spring Data JPA</a>  </li>\n</ul>\n<h2 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security/\">Otoriasai login dengan Spring Security</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security/\">Otorisasi controller dengan Spring Security</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/3-debug-spring-security/\">Debug Spring Security</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md/\">Melihat Data User Login dengan Spring Security</a>   </li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/5-oauth2-spring/\">Securing Spring Boot App with Spring OAuth2 + JSON Web Token (JWT)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/05/27/pemrograman/spring/security/6-SSO-dengan-Spring-Security/\">Single Signed On dengan Spring Security</a></li>\n</ul>\n<h2 id=\"Report\"><a href=\"#Report\" class=\"headerlink\" title=\"Report\"></a>Report</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/report/jasper-report/\">Membuat Report dengan Jasper Report</a></li>\n</ul>\n<h2 id=\"Mail\"><a href=\"#Mail\" class=\"headerlink\" title=\"Mail\"></a>Mail</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/08/17/pemrograman/spring/mail/sending-mail/\">Membuat Register dengan Verifikasi Email</a></li>\n</ul>\n<h2 id=\"Database-Migration\"><a href=\"#Database-Migration\" class=\"headerlink\" title=\"Database Migration\"></a>Database Migration</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/database-migration/Database-Mirgation-dengan-FlywayDB/\">Migrasi Database dengan FlywayDB</a></li>\n</ul>\n<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><ul>\n<li><a href=\"https://ciazhar.github.io/2017/05/28/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud/\">Microservice dengan Spring Cloud</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/\">Spring Cloud Discovery Service (Eureka)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/\">Spring Cloud Circuit Breaker (Hystrix)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway/\">Spring Cloud API Gateway (Zuul)</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/22/pemrograman/spring/microservice/config-service/1.GS-Config-Service/\">Spring Cloud Config Service : Intro</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/2.Config-Service-File-System/\">Spring Cloud Config Service : File System</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/07/28/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server/\">Spring Cloud Config Service : Vault Server</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/05/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository/\">Spring Cloud Config Service : Git Repositoty</a></li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Cient/\">Spring Cloud Config Service : Config Client</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/5-Config-Service-Encryption-Decryption/\">Spring Cloud Config Service : Encryption &amp; Decryption</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/14/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check/\">Spring Cloud Config Service : Refresh Scope &amp; Health</a> </li>\n<li><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security/\">Spring Cloud Config Service : Security</a> </li>\n</ul>\n"},{"title":"CRUD dengan Content digenerate di Client Side Menggunakan Spring Data JPA dan AngularJS","date":"2017-04-23T07:17:35.000Z","_content":"![](/images/springboot.png)\n\n\n## Memulai AngularJS ##\n- Membuat file html (src/main/resources/templates/materi/listMateri.html)\n  ```html\n  <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Daftar Materi</title>\n    </head>\n    <body ng-app=\"\">\n      <h1>Daftar Materi</h1>\n      <script th:src=\"@{/js/angular.min.js}\"></script>\n    </body>\n  </html>\n  ```\n- Register view(src/main/java/domain/config/KonfigurasiWeb)\n  ```java\n    registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\");\n  ```\n\n## Binding ##\n  Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh\n  ```html\n  <body ng-app=\"\">\n\n    Nama anda : <input type=\"text\" ng-model=\"nama\"/>\n    Selamat datang {{nama}}\n    <script th:src=\"@{/js/angular.min.js}\"></script>\n  </body>\n  ```\n\n## Menggunakan $scope ##\n$scope digunakan untuk menghubungkan variabel di html dengan javascript.\n### Mencetak data Array ####\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n  <div ng-controller=\"MateriController\">\n    Input Materi <input type=\"text\" ng-model=\"namaMateri\"/><br/>\n    Materi {{namaMateri}} berhasil diinput.\n    <ul>\n      <li ng-repeat=\"materi in daftarMateri\">{{materi}}</li>\n    </ul>\n  </div>\n\n  <script th:src=\"@{/js/materi.js}\"></script>\n  ```\n- Membuat file JS(/src/main/resources/static/js/materi.js)\n  ```js\n  var materiapp = angular.module ('materiapp',[]);\n  materiapp.controller('MateriController', function($scope){\n      $scope.daftarMateri = [\n        'Java Fundamental',\n        'Spring Framework'\n      ];\n  });\n  ```\n### Memasukkan Data ke Array ###\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n    <button ng-click=\"tambahMateri()\">Tambahkan</button>\n  ```\n- (/src/main/resources/static/js/materi.js)\n  ```js\n  $scope.tambahMateri = function(){\n    $scope.daftarMateri.push($scope.namaMateri);\n  }\n  ```\n### Menghapus Data dari Array ###\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n    <button ng-click=\"tambahMateri()\">Tambahkan</button>\n  ```\n- (/src/main/resources/static/js/materi.js)\n  ```js\n  $scope.tambahMateri = function(){\n    $scope.daftarMateri.push($scope.namaMateri);\n  }\n  ```\n-\n\n\n## Generate daftar Materi ##\n- membuat controller\n  ```java\n    @RestController\n    @RequestMapping(\"/api\")\n    public class MateriApiController {\n        @Autowired private MateriDao md;\n\n        @RequestMapping(value = \"/materi\", method = RequestMethod.GET)\n        public Page<Materi> daftarMateri(Pageable page){\n            return md.findAll(page);\n        }\n    }\n  ```\n  Keteranga :\n  Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json).\n- javascript\n  ```js\n    materiapp.controller('GenerateMateriController', function($http, $scope){\n      $scope.daftarMateri = {};\n\n      $scope.listMateri = function(){\n        $http.get('/api/materi').then(sukses,gagal);\n\n        function sukses(response){\n          $scope.daftarMateri = response.data;\n          console.log($scope.daftarMateri);\n        };\n\n        function gagal(response){\n          console.log(response);\n          alert('Error'+response);\n        };\n      };\n      $scope.listMateri();\n    });\n  ```\n  Keterangan:\n  Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari `/api/materi` menggunakan fungsi listMateri.\n- html\n  ```html\n    <div ng-controller=\"GenerateMateriController\">\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <td>Kode</td>\n            <td>Nama</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat= \"materi in daftarMateri.content\">\n            <td>{{materi.kode}}</td>\n            <td>{{materi.nama}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  ```\n  Keterangan :\n  membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat.\n\n## Menghapus materi ##\n- membuat fungsi hapus (javascript)\n  ```js\n    $scope.hapusMateri = function(materi){\n         $http.delete('/api/materi/'+materi.id).then(sukses, gagal);\n         function sukses(response){\n             $scope.listMateri();\n         }\n         function gagal(response){\n             console.log(response);\n             alert('Error : '+response);\n         };\n     };\n  ```\n- menambahkan button hapus (html)\n  ```html\n    <td><button ng-click=\"hapusMateri(materi)\">hapus</button></td>\n  ```\n## Menyimpan materi ##\n- membuat fungsi simpan (javascript)\n  ```js\n    $scope.simpanMateri = function(){\n      $http.post('/api/materi', $scope.materi).then(sukses,gagal);\n      function sukses(response){\n         $scope.listMateri();\n      }\n      function gagal(response){\n         console.log(response);\n         alert('Error : '+response);\n       };\n    };  \n  ```\n- menambahkan form input (html)\n  ```html\n    <table>\n      <tr>\n        <td>Kode</td>\n        <td><input type=\"text\" ng-model=\"materi.kode\" required=\"true\"/></td>\n        <td>Kode</td>\n      </tr>\n      <tr>\n        <td>Nama</td>\n        <td><input type=\"text\" ng-model=\"materi.nama\" required=\"true\"/></td>\n        <td>Kode</td>\n      </tr>\n      <tr>\n        <td>&nbsp;</td>\n        <td><button ng-click=\"simpanMateri()\">Simpan</button></td>\n        <td>Kode</td>\n      </tr>\n    </table>\n  ```\n","source":"_posts/pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS.md","raw":"---\ntitle: CRUD dengan Content digenerate di Client Side Menggunakan Spring Data JPA dan AngularJS\ndate: 2017-04-23 14:17:35\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n\n## Memulai AngularJS ##\n- Membuat file html (src/main/resources/templates/materi/listMateri.html)\n  ```html\n  <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Daftar Materi</title>\n    </head>\n    <body ng-app=\"\">\n      <h1>Daftar Materi</h1>\n      <script th:src=\"@{/js/angular.min.js}\"></script>\n    </body>\n  </html>\n  ```\n- Register view(src/main/java/domain/config/KonfigurasiWeb)\n  ```java\n    registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\");\n  ```\n\n## Binding ##\n  Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh\n  ```html\n  <body ng-app=\"\">\n\n    Nama anda : <input type=\"text\" ng-model=\"nama\"/>\n    Selamat datang {{nama}}\n    <script th:src=\"@{/js/angular.min.js}\"></script>\n  </body>\n  ```\n\n## Menggunakan $scope ##\n$scope digunakan untuk menghubungkan variabel di html dengan javascript.\n### Mencetak data Array ####\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n  <div ng-controller=\"MateriController\">\n    Input Materi <input type=\"text\" ng-model=\"namaMateri\"/><br/>\n    Materi {{namaMateri}} berhasil diinput.\n    <ul>\n      <li ng-repeat=\"materi in daftarMateri\">{{materi}}</li>\n    </ul>\n  </div>\n\n  <script th:src=\"@{/js/materi.js}\"></script>\n  ```\n- Membuat file JS(/src/main/resources/static/js/materi.js)\n  ```js\n  var materiapp = angular.module ('materiapp',[]);\n  materiapp.controller('MateriController', function($scope){\n      $scope.daftarMateri = [\n        'Java Fundamental',\n        'Spring Framework'\n      ];\n  });\n  ```\n### Memasukkan Data ke Array ###\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n    <button ng-click=\"tambahMateri()\">Tambahkan</button>\n  ```\n- (/src/main/resources/static/js/materi.js)\n  ```js\n  $scope.tambahMateri = function(){\n    $scope.daftarMateri.push($scope.namaMateri);\n  }\n  ```\n### Menghapus Data dari Array ###\n- (src/main/resources/templates/materi/listMateri.html)\n  ```html\n    <button ng-click=\"tambahMateri()\">Tambahkan</button>\n  ```\n- (/src/main/resources/static/js/materi.js)\n  ```js\n  $scope.tambahMateri = function(){\n    $scope.daftarMateri.push($scope.namaMateri);\n  }\n  ```\n-\n\n\n## Generate daftar Materi ##\n- membuat controller\n  ```java\n    @RestController\n    @RequestMapping(\"/api\")\n    public class MateriApiController {\n        @Autowired private MateriDao md;\n\n        @RequestMapping(value = \"/materi\", method = RequestMethod.GET)\n        public Page<Materi> daftarMateri(Pageable page){\n            return md.findAll(page);\n        }\n    }\n  ```\n  Keteranga :\n  Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json).\n- javascript\n  ```js\n    materiapp.controller('GenerateMateriController', function($http, $scope){\n      $scope.daftarMateri = {};\n\n      $scope.listMateri = function(){\n        $http.get('/api/materi').then(sukses,gagal);\n\n        function sukses(response){\n          $scope.daftarMateri = response.data;\n          console.log($scope.daftarMateri);\n        };\n\n        function gagal(response){\n          console.log(response);\n          alert('Error'+response);\n        };\n      };\n      $scope.listMateri();\n    });\n  ```\n  Keterangan:\n  Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari `/api/materi` menggunakan fungsi listMateri.\n- html\n  ```html\n    <div ng-controller=\"GenerateMateriController\">\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <td>Kode</td>\n            <td>Nama</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat= \"materi in daftarMateri.content\">\n            <td>{{materi.kode}}</td>\n            <td>{{materi.nama}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  ```\n  Keterangan :\n  membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat.\n\n## Menghapus materi ##\n- membuat fungsi hapus (javascript)\n  ```js\n    $scope.hapusMateri = function(materi){\n         $http.delete('/api/materi/'+materi.id).then(sukses, gagal);\n         function sukses(response){\n             $scope.listMateri();\n         }\n         function gagal(response){\n             console.log(response);\n             alert('Error : '+response);\n         };\n     };\n  ```\n- menambahkan button hapus (html)\n  ```html\n    <td><button ng-click=\"hapusMateri(materi)\">hapus</button></td>\n  ```\n## Menyimpan materi ##\n- membuat fungsi simpan (javascript)\n  ```js\n    $scope.simpanMateri = function(){\n      $http.post('/api/materi', $scope.materi).then(sukses,gagal);\n      function sukses(response){\n         $scope.listMateri();\n      }\n      function gagal(response){\n         console.log(response);\n         alert('Error : '+response);\n       };\n    };  \n  ```\n- menambahkan form input (html)\n  ```html\n    <table>\n      <tr>\n        <td>Kode</td>\n        <td><input type=\"text\" ng-model=\"materi.kode\" required=\"true\"/></td>\n        <td>Kode</td>\n      </tr>\n      <tr>\n        <td>Nama</td>\n        <td><input type=\"text\" ng-model=\"materi.nama\" required=\"true\"/></td>\n        <td>Kode</td>\n      </tr>\n      <tr>\n        <td>&nbsp;</td>\n        <td><button ng-click=\"simpanMateri()\">Simpan</button></td>\n        <td>Kode</td>\n      </tr>\n    </table>\n  ```\n","slug":"pemrograman/spring/jpa/2.3-generate-content-dari-client-side-dengan-AngularJS","published":1,"updated":"2017-08-14T14:36:30.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnlt003gislpuz5cc3gw","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h2 id=\"Memulai-AngularJS\"><a href=\"#Memulai-AngularJS\" class=\"headerlink\" title=\"Memulai AngularJS\"></a>Memulai AngularJS</h2><ul>\n<li><p>Membuat file html (src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Daftar Materi<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Daftar Materi<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/angular.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Register view(src/main/java/domain/config/KonfigurasiWeb)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">registry.addViewController(<span class=\"string\">\"/materi/list\"</span>).setViewName(<span class=\"string\">\"materi/listMateri\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Binding\"><a href=\"#Binding\" class=\"headerlink\" title=\"Binding\"></a>Binding</h2><p>  Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  Nama anda : <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"nama\"</span>/&gt;</span></div><div class=\"line\">  Selamat datang &#123;&#123;nama&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/angular.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Menggunakan-scope\"><a href=\"#Menggunakan-scope\" class=\"headerlink\" title=\"Menggunakan $scope\"></a>Menggunakan $scope</h2><p>$scope digunakan untuk menghubungkan variabel di html dengan javascript.</p>\n<h3 id=\"Mencetak-data-Array\"><a href=\"#Mencetak-data-Array\" class=\"headerlink\" title=\"Mencetak data Array\"></a>Mencetak data Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MateriController\"</span>&gt;</span></div><div class=\"line\">  Input Materi <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"namaMateri\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">  Materi &#123;&#123;namaMateri&#125;&#125; berhasil diinput.</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"materi in daftarMateri\"</span>&gt;</span>&#123;&#123;materi&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/materi.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file JS(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> materiapp = angular.module (<span class=\"string\">'materiapp'</span>,[]);</div><div class=\"line\">materiapp.controller(<span class=\"string\">'MateriController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">    $scope.daftarMateri = [</div><div class=\"line\">      <span class=\"string\">'Java Fundamental'</span>,</div><div class=\"line\">      <span class=\"string\">'Spring Framework'</span></div><div class=\"line\">    ];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Memasukkan-Data-ke-Array\"><a href=\"#Memasukkan-Data-ke-Array\" class=\"headerlink\" title=\"Memasukkan Data ke Array\"></a>Memasukkan Data ke Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"tambahMateri()\"</span>&gt;</span>Tambahkan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.tambahMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri.push($scope.namaMateri);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Menghapus-Data-dari-Array\"><a href=\"#Menghapus-Data-dari-Array\" class=\"headerlink\" title=\"Menghapus Data dari Array\"></a>Menghapus Data dari Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"tambahMateri()\"</span>&gt;</span>Tambahkan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.tambahMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri.push($scope.namaMateri);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-</p>\n<h2 id=\"Generate-daftar-Materi\"><a href=\"#Generate-daftar-Materi\" class=\"headerlink\" title=\"Generate daftar Materi\"></a>Generate daftar Materi</h2><ul>\n<li><p>membuat controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MateriApiController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> MateriDao md;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/materi\"</span>, method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Materi&gt; <span class=\"title\">daftarMateri</span><span class=\"params\">(Pageable page)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> md.findAll(page);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keteranga :<br>Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json).</p>\n</li>\n<li><p>javascript</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">materiapp.controller(<span class=\"string\">'GenerateMateriController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $scope</span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  $scope.listMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $http.get(<span class=\"string\">'/api/materi'</span>).then(sukses,gagal);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">      $scope.daftarMateri = response.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log($scope.daftarMateri);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">      alert(<span class=\"string\">'Error'</span>+response);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  $scope.listMateri();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Keterangan:<br>Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari <code>/api/materi</code> menggunakan fungsi listMateri.</p>\n</li>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"GenerateMateriController\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>= <span class=\"string\">\"materi in daftarMateri.content\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;materi.kode&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;materi.nama&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Keterangan :<br>membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat.</p>\n</li>\n</ul>\n<h2 id=\"Menghapus-materi\"><a href=\"#Menghapus-materi\" class=\"headerlink\" title=\"Menghapus materi\"></a>Menghapus materi</h2><ul>\n<li><p>membuat fungsi hapus (javascript)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.hapusMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">materi</span>)</span>&#123;</div><div class=\"line\">     $http.delete(<span class=\"string\">'/api/materi/'</span>+materi.id).then(sukses, gagal);</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">         $scope.listMateri();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">         alert(<span class=\"string\">'Error : '</span>+response);</div><div class=\"line\">     &#125;;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>menambahkan button hapus (html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"hapusMateri(materi)\"</span>&gt;</span>hapus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Menyimpan-materi\"><a href=\"#Menyimpan-materi\" class=\"headerlink\" title=\"Menyimpan materi\"></a>Menyimpan materi</h2><ul>\n<li><p>membuat fungsi simpan (javascript)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.simpanMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $http.post(<span class=\"string\">'/api/materi'</span>, $scope.materi).then(sukses,gagal);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     $scope.listMateri();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">     alert(<span class=\"string\">'Error : '</span>+response);</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>menambahkan form input (html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"materi.kode\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"materi.nama\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&amp;nbsp;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"simpanMateri()\"</span>&gt;</span>Simpan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h2 id=\"Memulai-AngularJS\"><a href=\"#Memulai-AngularJS\" class=\"headerlink\" title=\"Memulai AngularJS\"></a>Memulai AngularJS</h2><ul>\n<li><p>Membuat file html (src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Daftar Materi<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Daftar Materi<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/angular.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Register view(src/main/java/domain/config/KonfigurasiWeb)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">registry.addViewController(<span class=\"string\">\"/materi/list\"</span>).setViewName(<span class=\"string\">\"materi/listMateri\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Binding\"><a href=\"#Binding\" class=\"headerlink\" title=\"Binding\"></a>Binding</h2><p>  Binding yaitu menggunakan data input untuk di outputkan secara dinamis(tanpa submit/client side). Prosesnya adalah user menginputkan data. Kemudian data itu disimpan ke sebuah variabel. Kemudian variabel itu dioutputkan lagi. Contoh<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  Nama anda : <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"nama\"</span>/&gt;</span></div><div class=\"line\">  Selamat datang &#123;&#123;nama&#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/angular.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Menggunakan-scope\"><a href=\"#Menggunakan-scope\" class=\"headerlink\" title=\"Menggunakan $scope\"></a>Menggunakan $scope</h2><p>$scope digunakan untuk menghubungkan variabel di html dengan javascript.</p>\n<h3 id=\"Mencetak-data-Array\"><a href=\"#Mencetak-data-Array\" class=\"headerlink\" title=\"Mencetak data Array\"></a>Mencetak data Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MateriController\"</span>&gt;</span></div><div class=\"line\">  Input Materi <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"namaMateri\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">  Materi &#123;&#123;namaMateri&#125;&#125; berhasil diinput.</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"materi in daftarMateri\"</span>&gt;</span>&#123;&#123;materi&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/materi.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file JS(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> materiapp = angular.module (<span class=\"string\">'materiapp'</span>,[]);</div><div class=\"line\">materiapp.controller(<span class=\"string\">'MateriController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">    $scope.daftarMateri = [</div><div class=\"line\">      <span class=\"string\">'Java Fundamental'</span>,</div><div class=\"line\">      <span class=\"string\">'Spring Framework'</span></div><div class=\"line\">    ];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Memasukkan-Data-ke-Array\"><a href=\"#Memasukkan-Data-ke-Array\" class=\"headerlink\" title=\"Memasukkan Data ke Array\"></a>Memasukkan Data ke Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"tambahMateri()\"</span>&gt;</span>Tambahkan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.tambahMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri.push($scope.namaMateri);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Menghapus-Data-dari-Array\"><a href=\"#Menghapus-Data-dari-Array\" class=\"headerlink\" title=\"Menghapus Data dari Array\"></a>Menghapus Data dari Array</h3><ul>\n<li><p>(src/main/resources/templates/materi/listMateri.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"tambahMateri()\"</span>&gt;</span>Tambahkan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>(/src/main/resources/static/js/materi.js)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.tambahMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri.push($scope.namaMateri);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-</p>\n<h2 id=\"Generate-daftar-Materi\"><a href=\"#Generate-daftar-Materi\" class=\"headerlink\" title=\"Generate daftar Materi\"></a>Generate daftar Materi</h2><ul>\n<li><p>membuat controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MateriApiController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> MateriDao md;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/materi\"</span>, method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Materi&gt; <span class=\"title\">daftarMateri</span><span class=\"params\">(Pageable page)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> md.findAll(page);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keteranga :<br>Karena kita menggunakan RestController maka hasil output akan berupa rest(biasanya json).</p>\n</li>\n<li><p>javascript</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">materiapp.controller(<span class=\"string\">'GenerateMateriController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http, $scope</span>)</span>&#123;</div><div class=\"line\">  $scope.daftarMateri = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  $scope.listMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $http.get(<span class=\"string\">'/api/materi'</span>).then(sukses,gagal);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">      $scope.daftarMateri = response.data;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log($scope.daftarMateri);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">      alert(<span class=\"string\">'Error'</span>+response);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  $scope.listMateri();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Keterangan:<br>Kita membuat controller baru dengan nama GenerateMateriController. Lalu kita membuat daftarMateri sebagai penampung data json yang akan kita dapat dari <code>/api/materi</code> menggunakan fungsi listMateri.</p>\n</li>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"GenerateMateriController\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>= <span class=\"string\">\"materi in daftarMateri.content\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;materi.kode&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;materi.nama&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Keterangan :<br>membuat div yang telah diinjek dengan GenerateMateriController. kemudian menggenerate materi dari daftarMateri menggunakan ng-repeat.</p>\n</li>\n</ul>\n<h2 id=\"Menghapus-materi\"><a href=\"#Menghapus-materi\" class=\"headerlink\" title=\"Menghapus materi\"></a>Menghapus materi</h2><ul>\n<li><p>membuat fungsi hapus (javascript)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.hapusMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">materi</span>)</span>&#123;</div><div class=\"line\">     $http.delete(<span class=\"string\">'/api/materi/'</span>+materi.id).then(sukses, gagal);</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">         $scope.listMateri();</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">         alert(<span class=\"string\">'Error : '</span>+response);</div><div class=\"line\">     &#125;;</div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>menambahkan button hapus (html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"hapusMateri(materi)\"</span>&gt;</span>hapus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Menyimpan-materi\"><a href=\"#Menyimpan-materi\" class=\"headerlink\" title=\"Menyimpan materi\"></a>Menyimpan materi</h2><ul>\n<li><p>membuat fungsi simpan (javascript)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$scope.simpanMateri = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $http.post(<span class=\"string\">'/api/materi'</span>, $scope.materi).then(sukses,gagal);</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sukses</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     $scope.listMateri();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gagal</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">     alert(<span class=\"string\">'Error : '</span>+response);</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>menambahkan form input (html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"materi.kode\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Nama<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"materi.nama\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&amp;nbsp;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"simpanMateri()\"</span>&gt;</span>Simpan<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Kode<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Setup Project Spring Boot","date":"2017-04-23T07:17:29.000Z","_content":"![](/images/springboot.png)\n# Setup Development Environment\nUntuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah :\n- Java Development Kit (JDK atau openJDK)\n- Build Tools (Apache Maven atau Gradle)\n- IDE (IntellijIDEA atau Netbeans)\n\n# Setup Project Mengunakan Spring Initializer\n- Buka browser lalu masukkan url `http://start.spring.io/`\n- Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu :\n  - Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda.\n  - Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT.\n  - Project Metadata. Format pengisianya adalah sebagai berikut :\n    Group : com.nama.domain.anda (dipisah dengan titik)\n    Artifact : nama-aplikasi-anda (tidak boleh diberi spasi)\n  - Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan `Thymeleaf` dan `Web`.\n- Generate Project\n- Add project ke text editor\n\n# Struktur Folder Aplikasi Spring Boot\nStruktur foldernya akan seperti berikut :\n```\ndemo\n├── mvnw\n├── mvnw.cmd\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── example\n    │   │           └── DemoApplication.java\n    │   └── resources\n    │       ├── application.properties\n    │       ├── static\n    │       └── templates\n    └── test\n        └── java\n            └── com\n                └── example\n                    └── DemoApplicationTests.java\n```\nSebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.\nAnda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu :\n- pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle.\n- Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda.\n- Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java.\n- Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring.\n- Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js)\n- Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf.\n- Folder src/test/java/com/example digunakan untuk menampung file-file testing.\n\n# Running Project\nUntuk menjalankan project dapat menggunakan perintah berikut pada CLI\n```\nmvn clean spring-boot:run\n```\n","source":"_posts/pemrograman/spring/intro/2-setup-project-spring-boot.md","raw":"---\ntitle: Setup Project Spring Boot\ndate: 2017-04-23 14:17:29\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n# Setup Development Environment\nUntuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah :\n- Java Development Kit (JDK atau openJDK)\n- Build Tools (Apache Maven atau Gradle)\n- IDE (IntellijIDEA atau Netbeans)\n\n# Setup Project Mengunakan Spring Initializer\n- Buka browser lalu masukkan url `http://start.spring.io/`\n- Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu :\n  - Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda.\n  - Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT.\n  - Project Metadata. Format pengisianya adalah sebagai berikut :\n    Group : com.nama.domain.anda (dipisah dengan titik)\n    Artifact : nama-aplikasi-anda (tidak boleh diberi spasi)\n  - Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan `Thymeleaf` dan `Web`.\n- Generate Project\n- Add project ke text editor\n\n# Struktur Folder Aplikasi Spring Boot\nStruktur foldernya akan seperti berikut :\n```\ndemo\n├── mvnw\n├── mvnw.cmd\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── example\n    │   │           └── DemoApplication.java\n    │   └── resources\n    │       ├── application.properties\n    │       ├── static\n    │       └── templates\n    └── test\n        └── java\n            └── com\n                └── example\n                    └── DemoApplicationTests.java\n```\nSebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.\nAnda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu :\n- pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle.\n- Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda.\n- Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java.\n- Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring.\n- Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js)\n- Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf.\n- Folder src/test/java/com/example digunakan untuk menampung file-file testing.\n\n# Running Project\nUntuk menjalankan project dapat menggunakan perintah berikut pada CLI\n```\nmvn clean spring-boot:run\n```\n","slug":"pemrograman/spring/intro/2-setup-project-spring-boot","published":1,"updated":"2017-05-27T10:16:48.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnly003iislpa1wnpgyq","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Setup-Development-Environment\"><a href=\"#Setup-Development-Environment\" class=\"headerlink\" title=\"Setup Development Environment\"></a>Setup Development Environment</h1><p>Untuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah :</p>\n<ul>\n<li>Java Development Kit (JDK atau openJDK)</li>\n<li>Build Tools (Apache Maven atau Gradle)</li>\n<li>IDE (IntellijIDEA atau Netbeans)</li>\n</ul>\n<h1 id=\"Setup-Project-Mengunakan-Spring-Initializer\"><a href=\"#Setup-Project-Mengunakan-Spring-Initializer\" class=\"headerlink\" title=\"Setup Project Mengunakan Spring Initializer\"></a>Setup Project Mengunakan Spring Initializer</h1><ul>\n<li>Buka browser lalu masukkan url <code>http://start.spring.io/</code></li>\n<li>Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu :<ul>\n<li>Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda.</li>\n<li>Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT.</li>\n<li>Project Metadata. Format pengisianya adalah sebagai berikut :<br>Group : com.nama.domain.anda (dipisah dengan titik)<br>Artifact : nama-aplikasi-anda (tidak boleh diberi spasi)</li>\n<li>Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan <code>Thymeleaf</code> dan <code>Web</code>.</li>\n</ul>\n</li>\n<li>Generate Project</li>\n<li>Add project ke text editor</li>\n</ul>\n<h1 id=\"Struktur-Folder-Aplikasi-Spring-Boot\"><a href=\"#Struktur-Folder-Aplikasi-Spring-Boot\" class=\"headerlink\" title=\"Struktur Folder Aplikasi Spring Boot\"></a>Struktur Folder Aplikasi Spring Boot</h1><p>Struktur foldernya akan seperti berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">demo</div><div class=\"line\">├── mvnw</div><div class=\"line\">├── mvnw.cmd</div><div class=\"line\">├── pom.xml</div><div class=\"line\">└── src</div><div class=\"line\">    ├── main</div><div class=\"line\">    │   ├── java</div><div class=\"line\">    │   │   └── com</div><div class=\"line\">    │   │       └── example</div><div class=\"line\">    │   │           └── DemoApplication.java</div><div class=\"line\">    │   └── resources</div><div class=\"line\">    │       ├── application.properties</div><div class=\"line\">    │       ├── static</div><div class=\"line\">    │       └── templates</div><div class=\"line\">    └── test</div><div class=\"line\">        └── java</div><div class=\"line\">            └── com</div><div class=\"line\">                └── example</div><div class=\"line\">                    └── DemoApplicationTests.java</div></pre></td></tr></table></figure></p>\n<p>Sebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.<br>Anda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu :</p>\n<ul>\n<li>pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle.</li>\n<li>Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda.</li>\n<li>Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java.</li>\n<li>Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring.</li>\n<li>Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js)</li>\n<li>Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf.</li>\n<li>Folder src/test/java/com/example digunakan untuk menampung file-file testing.</li>\n</ul>\n<h1 id=\"Running-Project\"><a href=\"#Running-Project\" class=\"headerlink\" title=\"Running Project\"></a>Running Project</h1><p>Untuk menjalankan project dapat menggunakan perintah berikut pada CLI<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean spring-boot:run</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Setup-Development-Environment\"><a href=\"#Setup-Development-Environment\" class=\"headerlink\" title=\"Setup Development Environment\"></a>Setup Development Environment</h1><p>Untuk menggunakan Spring Boot anda perlu menginstall beberapa Development Environment. Diantaranya adalah :</p>\n<ul>\n<li>Java Development Kit (JDK atau openJDK)</li>\n<li>Build Tools (Apache Maven atau Gradle)</li>\n<li>IDE (IntellijIDEA atau Netbeans)</li>\n</ul>\n<h1 id=\"Setup-Project-Mengunakan-Spring-Initializer\"><a href=\"#Setup-Project-Mengunakan-Spring-Initializer\" class=\"headerlink\" title=\"Setup Project Mengunakan Spring Initializer\"></a>Setup Project Mengunakan Spring Initializer</h1><ul>\n<li>Buka browser lalu masukkan url <code>http://start.spring.io/</code></li>\n<li>Selanjutnya anda akan diminta untuk mengisi beberapa data yaitu :<ul>\n<li>Tipe Project. Project dapat berupa maven atau gradle. Isi dengan Build tools yang sudah anda install di komputer anda.</li>\n<li>Versi Spring. Pilih versi terbaru yang bukan SNAPSHOOT.</li>\n<li>Project Metadata. Format pengisianya adalah sebagai berikut :<br>Group : com.nama.domain.anda (dipisah dengan titik)<br>Artifact : nama-aplikasi-anda (tidak boleh diberi spasi)</li>\n<li>Dependencies. Isi dengan library yang anda butuhkan. Pada tutorial ini kita kan menggunakan <code>Thymeleaf</code> dan <code>Web</code>.</li>\n</ul>\n</li>\n<li>Generate Project</li>\n<li>Add project ke text editor</li>\n</ul>\n<h1 id=\"Struktur-Folder-Aplikasi-Spring-Boot\"><a href=\"#Struktur-Folder-Aplikasi-Spring-Boot\" class=\"headerlink\" title=\"Struktur Folder Aplikasi Spring Boot\"></a>Struktur Folder Aplikasi Spring Boot</h1><p>Struktur foldernya akan seperti berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">demo</div><div class=\"line\">├── mvnw</div><div class=\"line\">├── mvnw.cmd</div><div class=\"line\">├── pom.xml</div><div class=\"line\">└── src</div><div class=\"line\">    ├── main</div><div class=\"line\">    │   ├── java</div><div class=\"line\">    │   │   └── com</div><div class=\"line\">    │   │       └── example</div><div class=\"line\">    │   │           └── DemoApplication.java</div><div class=\"line\">    │   └── resources</div><div class=\"line\">    │       ├── application.properties</div><div class=\"line\">    │       ├── static</div><div class=\"line\">    │       └── templates</div><div class=\"line\">    └── test</div><div class=\"line\">        └── java</div><div class=\"line\">            └── com</div><div class=\"line\">                └── example</div><div class=\"line\">                    └── DemoApplicationTests.java</div></pre></td></tr></table></figure></p>\n<p>Sebagai catatan struktur folder tersebut dapat berubah sesuai data yang anda masukkan saat membuat project.<br>Anda dapat menghapus mvnw dan mvn.cmd. Pada Project tersebut terdapat beberapa file yaitu :</p>\n<ul>\n<li>pom.xml. File ini merupakan konfigurasi dari Maven. Jika anda menggunakan Gradle maka yang dibuat adalah file .gradle.</li>\n<li>Di dalam folder src/main/java/com/example terdapat file DemoApplication.java. File ini merupakan main file dari aplikasi spring boot anda.</li>\n<li>Folder src/main/java/com/example sendiri digunakan untuk menampung file-file java.</li>\n<li>Di dalam folder src/main/resources terdapat file application.properties. File ini digunakan untuk mengkonfigurasi aplikasi spring.</li>\n<li>Folder src/main/respurces/static digunakan untuk menampung file static (hmtl, css dan js)</li>\n<li>Folder src/main/respurces/templates digunakan untuk menampung file html yang menggunakan Thymeleaf.</li>\n<li>Folder src/test/java/com/example digunakan untuk menampung file-file testing.</li>\n</ul>\n<h1 id=\"Running-Project\"><a href=\"#Running-Project\" class=\"headerlink\" title=\"Running Project\"></a>Running Project</h1><p>Untuk menjalankan project dapat menggunakan perintah berikut pada CLI<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean spring-boot:run</div></pre></td></tr></table></figure></p>\n"},{"title":"Mengirim Email dan Verifikasi Lewat Email","date":"2017-08-17T00:40:10.000Z","_content":"![](/images/springboot.png)\n\nPada tutorial kali ini kita akan coba mengirim email dan verifikasi lewat email. Kita akan menggunakan konsep register akun implementasinya.\n\nhttps://myaccount.google.com/lesssecureapps\n\n# Mengirim Email\n\n- Tambahkan Dependency `spring-boot-starter-mail`\n\n\n- Konfigurasi Mail Server\n\n```yml\n# Mail Configuration\n  mail:\n    host: smtp.gmail.com\n    port: 587\n    username: email@gmail.com   #ini nama email\n    password: pass              #ini password email\n    properties:\n      mail:\n        smtp:\n          starttls:\n            enabled: true\n            required: true\n          auth: true\n          connectiontimeout: 5000\n          timemout: 5000\n          writetimeout: 5000\n```\n\n- Membuat Model Email.\n\n```java\npublic class EmailStatus{\n    public static final String SUCCESS = \"SUCCESS\";\n    public static final String ERROR = \"ERROR\";\n \n    private final String to;\n    private final String subject;\n    private final String body;\n \n    private String status;\n    private String errorMessage;\n \n    public EmailStatus(String to, String subject, String body) {\n        this.to = to;\n        this.subject = subject;\n        this.body = body;\n    }\n \n    public EmailStatus success() {\n        this.status = SUCCESS;\n        return this;\n    }\n \n    public EmailStatus error(String errorMessage) {\n        this.status = ERROR;\n        this.errorMessage = errorMessage;\n        return this;\n    }\n \n    public boolean isSuccess() {\n        return SUCCESS.equals(this.status);\n    }\n \n    public boolean isError() {\n        return ERROR.equals(this.status);\n    }\n \n    public String getTo() {\n        return to;\n    }\n \n    public String getSubject() {\n        return subject;\n    }\n \n    public String getBody() {\n        return body;\n    }\n \n    public String getStatus() {\n        return status;\n    }\n \n    public String getErrorMessage() {\n        return errorMessage;\n    }\n}\n```\n\n- Membuat component untuk send email\n\n```java\n@Component\npublic class EmailSender{\n    @Autowired \n    JavaMailSender javaMailSender;\n\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\tpublic EmailStatus sendPlainText(String to, String subject, String text) {\n        return sendM(to, subject, text, false);\n    }\n \n    public EmailStatus sendHtml(String to, String subject, String htmlBody) {\n        return sendM(to, subject, htmlBody, true);\n    }\n \n    private EmailStatus sendM(String to, String subject, String text, Boolean isHtml) {\n        try {\n            MimeMessage mail = javaMailSender.createMimeMessage();\n            MimeMessageHelper helper = new MimeMessageHelper(mail, true);\n            helper.setTo(to);\n            helper.setSubject(subject);\n            helper.setText(text, isHtml);\n            javaMailSender.send(mail);\n            logger.info(\"Send email '{}' to: {}\", subject, to);\n            return new EmailStatus(to, subject, text).success();\n        } catch (Exception e) {\n            logger.error(String.format(\"Problem with sending email to: {}, error message: {}\", to, e.getMessage()));\n            return new EmailStatus(to, subject, text).error(e.getMessage());\n        }\n    }\n}\n```\n\n- Membuat component\n\n```java\n@Component\npublic class EmailHtmlSender{\n    @Autowired private EmailSender mailSender;\n\n    @Autowired private TemplateEngine templateEngine;\n\n    public EmailStatus send(String to, String subject, String templateName, Context context) {\n        String body = templateEngine.process(templateName, context);\n        return mailSender.sendHtml(to, subject, body);\n    }\n}\n```\n\n- Membuat html\n\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title th:remove=\"all\">Order Confirmation</title>\n</head>\n<body>\n<div>     \n    <h2 th:text=\"${title}\">title</h2>\n    <p th:text=\"${description}\"></p>\n        <p>\n        <a th:href=\"@{http://localhost:8080/activate(email=${email})}\">Verification Link</a>\n    </p>      \n</div>\n \n</body>\n</html>\n```\n\n- Membuat service\n\n```java\npublic interface EmailService{\n\n    EmailStatus sendEmail(RegisterForm form);\n}\n```\n\n- Membuat service impl\n\n```java\n@Service\npublic class EmailServiceImpl implements EmailService{\n\n    @Autowired\n\tpublic EmailHtmlSender emailHtmlSender;\n\n    @Override\n    public EmailStatus sendEmail(RegisterForm form){\n        Context context = new Context();\n        context.setVariable(\"title\", \"Clorus Email Verification\");\n        context.setVariable(\"description\", \"To Verify your clorus account please click link below \");\n        context.setVariable(\"email\",form.getEmail());\n        \n        EmailStatus emailStatus = emailHtmlSender.send(form.getEmail(), \"Clorus Email Verification\", \"mail\", context);\n\n        return emailStatus;\n    }\n}\n```\n\n- Membuat controller\n\n```java\n@PreAuthorize(\"permitAll()\")\n    @RequestMapping(method = RequestMethod.POST,value = \"/register\")\n    public ResponseData<Object> register(@RequestBody @Valid RegisterForm form)throws Exception{\n        ResponseData<Object> responseData = new ResponseData<>();\n        userService.register(form);\n        responseData.setData(emailService.sendEmail(form));\n        return responseData;\n    }\n```\n\n# Verifikasi Email\n\n- Membuat controller\n\n```java\npublic class UserThymeleafController{\n\n    @Autowired private UserRepository userRepository;\n\n\n    @PreAuthorize(\"permitAll()\")\n    @RequestMapping(\"/activate\")\n    public String activate (@RequestParam (value=\"email\")String email,Model model){\n        User user = userRepository.findByEmail(email);\n        model.addAttribute(\"email\",user.getEmail());\n\n        Logger logger = LoggerFactory.getLogger(this.getClass());\n        logger.info(\"\\n\\n Email yang dikirim yaitu\\n\\n\\n\", user.getEmail());\n\n        user.setEnabled(true);\n        userRepository.save(user);\n        \n        return \"/activate\";\n    }\n\n}\n```\n\n- Membuat html\n\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title >Aktivasi Akun</title>\n</head>\n<body>\n<div>\n    <p>Selamat <span th:text=\"${email}\"></span>, anda telah berhasil melakukan aktivasi akun. Silahkan nikmati layanan kami.</p>\n</div>\n \n</body>\n</html>\n```","source":"_posts/pemrograman/spring/mail/sending-mail.md","raw":"---\ntitle: Mengirim Email dan Verifikasi Lewat Email\ndate: 2017-08-17 07:40:10\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\nPada tutorial kali ini kita akan coba mengirim email dan verifikasi lewat email. Kita akan menggunakan konsep register akun implementasinya.\n\nhttps://myaccount.google.com/lesssecureapps\n\n# Mengirim Email\n\n- Tambahkan Dependency `spring-boot-starter-mail`\n\n\n- Konfigurasi Mail Server\n\n```yml\n# Mail Configuration\n  mail:\n    host: smtp.gmail.com\n    port: 587\n    username: email@gmail.com   #ini nama email\n    password: pass              #ini password email\n    properties:\n      mail:\n        smtp:\n          starttls:\n            enabled: true\n            required: true\n          auth: true\n          connectiontimeout: 5000\n          timemout: 5000\n          writetimeout: 5000\n```\n\n- Membuat Model Email.\n\n```java\npublic class EmailStatus{\n    public static final String SUCCESS = \"SUCCESS\";\n    public static final String ERROR = \"ERROR\";\n \n    private final String to;\n    private final String subject;\n    private final String body;\n \n    private String status;\n    private String errorMessage;\n \n    public EmailStatus(String to, String subject, String body) {\n        this.to = to;\n        this.subject = subject;\n        this.body = body;\n    }\n \n    public EmailStatus success() {\n        this.status = SUCCESS;\n        return this;\n    }\n \n    public EmailStatus error(String errorMessage) {\n        this.status = ERROR;\n        this.errorMessage = errorMessage;\n        return this;\n    }\n \n    public boolean isSuccess() {\n        return SUCCESS.equals(this.status);\n    }\n \n    public boolean isError() {\n        return ERROR.equals(this.status);\n    }\n \n    public String getTo() {\n        return to;\n    }\n \n    public String getSubject() {\n        return subject;\n    }\n \n    public String getBody() {\n        return body;\n    }\n \n    public String getStatus() {\n        return status;\n    }\n \n    public String getErrorMessage() {\n        return errorMessage;\n    }\n}\n```\n\n- Membuat component untuk send email\n\n```java\n@Component\npublic class EmailSender{\n    @Autowired \n    JavaMailSender javaMailSender;\n\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\tpublic EmailStatus sendPlainText(String to, String subject, String text) {\n        return sendM(to, subject, text, false);\n    }\n \n    public EmailStatus sendHtml(String to, String subject, String htmlBody) {\n        return sendM(to, subject, htmlBody, true);\n    }\n \n    private EmailStatus sendM(String to, String subject, String text, Boolean isHtml) {\n        try {\n            MimeMessage mail = javaMailSender.createMimeMessage();\n            MimeMessageHelper helper = new MimeMessageHelper(mail, true);\n            helper.setTo(to);\n            helper.setSubject(subject);\n            helper.setText(text, isHtml);\n            javaMailSender.send(mail);\n            logger.info(\"Send email '{}' to: {}\", subject, to);\n            return new EmailStatus(to, subject, text).success();\n        } catch (Exception e) {\n            logger.error(String.format(\"Problem with sending email to: {}, error message: {}\", to, e.getMessage()));\n            return new EmailStatus(to, subject, text).error(e.getMessage());\n        }\n    }\n}\n```\n\n- Membuat component\n\n```java\n@Component\npublic class EmailHtmlSender{\n    @Autowired private EmailSender mailSender;\n\n    @Autowired private TemplateEngine templateEngine;\n\n    public EmailStatus send(String to, String subject, String templateName, Context context) {\n        String body = templateEngine.process(templateName, context);\n        return mailSender.sendHtml(to, subject, body);\n    }\n}\n```\n\n- Membuat html\n\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title th:remove=\"all\">Order Confirmation</title>\n</head>\n<body>\n<div>     \n    <h2 th:text=\"${title}\">title</h2>\n    <p th:text=\"${description}\"></p>\n        <p>\n        <a th:href=\"@{http://localhost:8080/activate(email=${email})}\">Verification Link</a>\n    </p>      \n</div>\n \n</body>\n</html>\n```\n\n- Membuat service\n\n```java\npublic interface EmailService{\n\n    EmailStatus sendEmail(RegisterForm form);\n}\n```\n\n- Membuat service impl\n\n```java\n@Service\npublic class EmailServiceImpl implements EmailService{\n\n    @Autowired\n\tpublic EmailHtmlSender emailHtmlSender;\n\n    @Override\n    public EmailStatus sendEmail(RegisterForm form){\n        Context context = new Context();\n        context.setVariable(\"title\", \"Clorus Email Verification\");\n        context.setVariable(\"description\", \"To Verify your clorus account please click link below \");\n        context.setVariable(\"email\",form.getEmail());\n        \n        EmailStatus emailStatus = emailHtmlSender.send(form.getEmail(), \"Clorus Email Verification\", \"mail\", context);\n\n        return emailStatus;\n    }\n}\n```\n\n- Membuat controller\n\n```java\n@PreAuthorize(\"permitAll()\")\n    @RequestMapping(method = RequestMethod.POST,value = \"/register\")\n    public ResponseData<Object> register(@RequestBody @Valid RegisterForm form)throws Exception{\n        ResponseData<Object> responseData = new ResponseData<>();\n        userService.register(form);\n        responseData.setData(emailService.sendEmail(form));\n        return responseData;\n    }\n```\n\n# Verifikasi Email\n\n- Membuat controller\n\n```java\npublic class UserThymeleafController{\n\n    @Autowired private UserRepository userRepository;\n\n\n    @PreAuthorize(\"permitAll()\")\n    @RequestMapping(\"/activate\")\n    public String activate (@RequestParam (value=\"email\")String email,Model model){\n        User user = userRepository.findByEmail(email);\n        model.addAttribute(\"email\",user.getEmail());\n\n        Logger logger = LoggerFactory.getLogger(this.getClass());\n        logger.info(\"\\n\\n Email yang dikirim yaitu\\n\\n\\n\", user.getEmail());\n\n        user.setEnabled(true);\n        userRepository.save(user);\n        \n        return \"/activate\";\n    }\n\n}\n```\n\n- Membuat html\n\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title >Aktivasi Akun</title>\n</head>\n<body>\n<div>\n    <p>Selamat <span th:text=\"${email}\"></span>, anda telah berhasil melakukan aktivasi akun. Silahkan nikmati layanan kami.</p>\n</div>\n \n</body>\n</html>\n```","slug":"pemrograman/spring/mail/sending-mail","published":1,"updated":"2017-09-08T01:50:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnm1003jislpjjwc8kc4","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Pada tutorial kali ini kita akan coba mengirim email dan verifikasi lewat email. Kita akan menggunakan konsep register akun implementasinya.</p>\n<p><a href=\"https://myaccount.google.com/lesssecureapps\" target=\"_blank\" rel=\"external\">https://myaccount.google.com/lesssecureapps</a></p>\n<h1 id=\"Mengirim-Email\"><a href=\"#Mengirim-Email\" class=\"headerlink\" title=\"Mengirim Email\"></a>Mengirim Email</h1><ul>\n<li>Tambahkan Dependency <code>spring-boot-starter-mail</code></li>\n</ul>\n<ul>\n<li>Konfigurasi Mail Server</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Mail Configuration</span></div><div class=\"line\"><span class=\"attr\">  mail:</span></div><div class=\"line\"><span class=\"attr\">    host:</span> <span class=\"string\">smtp.gmail.com</span></div><div class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">587</span></div><div class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">email@gmail.com</span>   <span class=\"comment\">#ini nama email</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">pass</span>              <span class=\"comment\">#ini password email</span></div><div class=\"line\"><span class=\"attr\">    properties:</span></div><div class=\"line\"><span class=\"attr\">      mail:</span></div><div class=\"line\"><span class=\"attr\">        smtp:</span></div><div class=\"line\"><span class=\"attr\">          starttls:</span></div><div class=\"line\"><span class=\"attr\">            enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">            required:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          auth:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          connectiontimeout:</span> <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"attr\">          timemout:</span> <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"attr\">          writetimeout:</span> <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat Model Email.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailStatus</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SUCCESS = <span class=\"string\">\"SUCCESS\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR = <span class=\"string\">\"ERROR\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String to;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String subject;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String body;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> String status;</div><div class=\"line\">    <span class=\"keyword\">private</span> String errorMessage;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmailStatus</span><span class=\"params\">(String to, String subject, String body)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.to = to;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body = body;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">success</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status = SUCCESS;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">error</span><span class=\"params\">(String errorMessage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status = ERROR;</div><div class=\"line\">        <span class=\"keyword\">this</span>.errorMessage = errorMessage;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SUCCESS.equals(<span class=\"keyword\">this</span>.status);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isError</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ERROR.equals(<span class=\"keyword\">this</span>.status);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> to;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getBody</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> body;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> status;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getErrorMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> errorMessage;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat component untuk send email</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailSender</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> </div><div class=\"line\">    JavaMailSender javaMailSender;</div><div class=\"line\"></div><div class=\"line\">    Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendPlainText</span><span class=\"params\">(String to, String subject, String text)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendM(to, subject, text, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendHtml</span><span class=\"params\">(String to, String subject, String htmlBody)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendM(to, subject, htmlBody, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> EmailStatus <span class=\"title\">sendM</span><span class=\"params\">(String to, String subject, String text, Boolean isHtml)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            MimeMessage mail = javaMailSender.createMimeMessage();</div><div class=\"line\">            MimeMessageHelper helper = <span class=\"keyword\">new</span> MimeMessageHelper(mail, <span class=\"keyword\">true</span>);</div><div class=\"line\">            helper.setTo(to);</div><div class=\"line\">            helper.setSubject(subject);</div><div class=\"line\">            helper.setText(text, isHtml);</div><div class=\"line\">            javaMailSender.send(mail);</div><div class=\"line\">            logger.info(<span class=\"string\">\"Send email '&#123;&#125;' to: &#123;&#125;\"</span>, subject, to);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailStatus(to, subject, text).success();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(String.format(<span class=\"string\">\"Problem with sending email to: &#123;&#125;, error message: &#123;&#125;\"</span>, to, e.getMessage()));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailStatus(to, subject, text).error(e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat component</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailHtmlSender</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> EmailSender mailSender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">send</span><span class=\"params\">(String to, String subject, String templateName, Context context)</span> </span>&#123;</div><div class=\"line\">        String body = templateEngine.process(templateName, context);</div><div class=\"line\">        <span class=\"keyword\">return</span> mailSender.sendHtml(to, subject, body);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:remove</span>=<span class=\"string\">\"all\"</span>&gt;</span>Order Confirmation<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;description&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;http://localhost:8080/activate(email=$&#123;email&#125;)&#125;\"</span>&gt;</span>Verification Link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat service</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmailService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">EmailStatus <span class=\"title\">sendEmail</span><span class=\"params\">(RegisterForm form)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat service impl</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">EmailService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> EmailHtmlSender emailHtmlSender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendEmail</span><span class=\"params\">(RegisterForm form)</span></span>&#123;</div><div class=\"line\">        Context context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"Clorus Email Verification\"</span>);</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"description\"</span>, <span class=\"string\">\"To Verify your clorus account please click link below \"</span>);</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"email\"</span>,form.getEmail());</div><div class=\"line\">        </div><div class=\"line\">        EmailStatus emailStatus = emailHtmlSender.send(form.getEmail(), <span class=\"string\">\"Clorus Email Verification\"</span>, <span class=\"string\">\"mail\"</span>, context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> emailStatus;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"permitAll()\"</span>)</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.POST,value = <span class=\"string\">\"/register\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseData&lt;Object&gt; <span class=\"title\">register</span><span class=\"params\">(@RequestBody @Valid RegisterForm form)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        ResponseData&lt;Object&gt; responseData = <span class=\"keyword\">new</span> ResponseData&lt;&gt;();</div><div class=\"line\">        userService.register(form);</div><div class=\"line\">        responseData.setData(emailService.sendEmail(form));</div><div class=\"line\">        <span class=\"keyword\">return</span> responseData;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Verifikasi-Email\"><a href=\"#Verifikasi-Email\" class=\"headerlink\" title=\"Verifikasi Email\"></a>Verifikasi Email</h1><ul>\n<li>Membuat controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThymeleafController</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> UserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"permitAll()\"</span>)</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/activate\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">activate</span> <span class=\"params\">(@RequestParam (value=<span class=\"string\">\"email\"</span>)</span>String email,Model model)</span>&#123;</div><div class=\"line\">        User user = userRepository.findByEmail(email);</div><div class=\"line\">        model.addAttribute(<span class=\"string\">\"email\"</span>,user.getEmail());</div><div class=\"line\"></div><div class=\"line\">        Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">        logger.info(<span class=\"string\">\"\\n\\n Email yang dikirim yaitu\\n\\n\\n\"</span>, user.getEmail());</div><div class=\"line\"></div><div class=\"line\">        user.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        userRepository.save(user);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"/activate\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> &gt;</span>Aktivasi Akun<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Selamat <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>, anda telah berhasil melakukan aktivasi akun. Silahkan nikmati layanan kami.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Pada tutorial kali ini kita akan coba mengirim email dan verifikasi lewat email. Kita akan menggunakan konsep register akun implementasinya.</p>\n<p><a href=\"https://myaccount.google.com/lesssecureapps\">https://myaccount.google.com/lesssecureapps</a></p>\n<h1 id=\"Mengirim-Email\"><a href=\"#Mengirim-Email\" class=\"headerlink\" title=\"Mengirim Email\"></a>Mengirim Email</h1><ul>\n<li>Tambahkan Dependency <code>spring-boot-starter-mail</code></li>\n</ul>\n<ul>\n<li>Konfigurasi Mail Server</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Mail Configuration</span></div><div class=\"line\"><span class=\"attr\">  mail:</span></div><div class=\"line\"><span class=\"attr\">    host:</span> <span class=\"string\">smtp.gmail.com</span></div><div class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">587</span></div><div class=\"line\"><span class=\"attr\">    username:</span> <span class=\"string\">email@gmail.com</span>   <span class=\"comment\">#ini nama email</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">pass</span>              <span class=\"comment\">#ini password email</span></div><div class=\"line\"><span class=\"attr\">    properties:</span></div><div class=\"line\"><span class=\"attr\">      mail:</span></div><div class=\"line\"><span class=\"attr\">        smtp:</span></div><div class=\"line\"><span class=\"attr\">          starttls:</span></div><div class=\"line\"><span class=\"attr\">            enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">            required:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          auth:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          connectiontimeout:</span> <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"attr\">          timemout:</span> <span class=\"number\">5000</span></div><div class=\"line\"><span class=\"attr\">          writetimeout:</span> <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat Model Email.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailStatus</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SUCCESS = <span class=\"string\">\"SUCCESS\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR = <span class=\"string\">\"ERROR\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String to;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String subject;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String body;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> String status;</div><div class=\"line\">    <span class=\"keyword\">private</span> String errorMessage;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmailStatus</span><span class=\"params\">(String to, String subject, String body)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.to = to;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        <span class=\"keyword\">this</span>.body = body;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">success</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status = SUCCESS;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">error</span><span class=\"params\">(String errorMessage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.status = ERROR;</div><div class=\"line\">        <span class=\"keyword\">this</span>.errorMessage = errorMessage;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SUCCESS.equals(<span class=\"keyword\">this</span>.status);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isError</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ERROR.equals(<span class=\"keyword\">this</span>.status);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> to;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getBody</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> body;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> status;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getErrorMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> errorMessage;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat component untuk send email</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailSender</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> </div><div class=\"line\">    JavaMailSender javaMailSender;</div><div class=\"line\"></div><div class=\"line\">    Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendPlainText</span><span class=\"params\">(String to, String subject, String text)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendM(to, subject, text, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendHtml</span><span class=\"params\">(String to, String subject, String htmlBody)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendM(to, subject, htmlBody, <span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> EmailStatus <span class=\"title\">sendM</span><span class=\"params\">(String to, String subject, String text, Boolean isHtml)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            MimeMessage mail = javaMailSender.createMimeMessage();</div><div class=\"line\">            MimeMessageHelper helper = <span class=\"keyword\">new</span> MimeMessageHelper(mail, <span class=\"keyword\">true</span>);</div><div class=\"line\">            helper.setTo(to);</div><div class=\"line\">            helper.setSubject(subject);</div><div class=\"line\">            helper.setText(text, isHtml);</div><div class=\"line\">            javaMailSender.send(mail);</div><div class=\"line\">            logger.info(<span class=\"string\">\"Send email '&#123;&#125;' to: &#123;&#125;\"</span>, subject, to);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailStatus(to, subject, text).success();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(String.format(<span class=\"string\">\"Problem with sending email to: &#123;&#125;, error message: &#123;&#125;\"</span>, to, e.getMessage()));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailStatus(to, subject, text).error(e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat component</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailHtmlSender</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> EmailSender mailSender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> TemplateEngine templateEngine;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">send</span><span class=\"params\">(String to, String subject, String templateName, Context context)</span> </span>&#123;</div><div class=\"line\">        String body = templateEngine.process(templateName, context);</div><div class=\"line\">        <span class=\"keyword\">return</span> mailSender.sendHtml(to, subject, body);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:remove</span>=<span class=\"string\">\"all\"</span>&gt;</span>Order Confirmation<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;description&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;http://localhost:8080/activate(email=$&#123;email&#125;)&#125;\"</span>&gt;</span>Verification Link<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>      </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat service</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EmailService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">EmailStatus <span class=\"title\">sendEmail</span><span class=\"params\">(RegisterForm form)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat service impl</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">EmailService</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> EmailHtmlSender emailHtmlSender;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmailStatus <span class=\"title\">sendEmail</span><span class=\"params\">(RegisterForm form)</span></span>&#123;</div><div class=\"line\">        Context context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"Clorus Email Verification\"</span>);</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"description\"</span>, <span class=\"string\">\"To Verify your clorus account please click link below \"</span>);</div><div class=\"line\">        context.setVariable(<span class=\"string\">\"email\"</span>,form.getEmail());</div><div class=\"line\">        </div><div class=\"line\">        EmailStatus emailStatus = emailHtmlSender.send(form.getEmail(), <span class=\"string\">\"Clorus Email Verification\"</span>, <span class=\"string\">\"mail\"</span>, context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> emailStatus;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"permitAll()\"</span>)</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(method = RequestMethod.POST,value = <span class=\"string\">\"/register\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseData&lt;Object&gt; <span class=\"title\">register</span><span class=\"params\">(@RequestBody @Valid RegisterForm form)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        ResponseData&lt;Object&gt; responseData = <span class=\"keyword\">new</span> ResponseData&lt;&gt;();</div><div class=\"line\">        userService.register(form);</div><div class=\"line\">        responseData.setData(emailService.sendEmail(form));</div><div class=\"line\">        <span class=\"keyword\">return</span> responseData;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Verifikasi-Email\"><a href=\"#Verifikasi-Email\" class=\"headerlink\" title=\"Verifikasi Email\"></a>Verifikasi Email</h1><ul>\n<li>Membuat controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserThymeleafController</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> UserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"permitAll()\"</span>)</div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/activate\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">activate</span> <span class=\"params\">(@RequestParam (value=<span class=\"string\">\"email\"</span>)</span>String email,Model model)</span>&#123;</div><div class=\"line\">        User user = userRepository.findByEmail(email);</div><div class=\"line\">        model.addAttribute(<span class=\"string\">\"email\"</span>,user.getEmail());</div><div class=\"line\"></div><div class=\"line\">        Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</div><div class=\"line\">        logger.info(<span class=\"string\">\"\\n\\n Email yang dikirim yaitu\\n\\n\\n\"</span>, user.getEmail());</div><div class=\"line\"></div><div class=\"line\">        user.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        userRepository.save(user);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"/activate\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span> &gt;</span>Aktivasi Akun<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Selamat <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>, anda telah berhasil melakukan aktivasi akun. Silahkan nikmati layanan kami.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Microservice dengan Spring Cloud","date":"2017-05-28T09:11:04.000Z","_content":"![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n## Komponen Komponen Microservice\n- Discovery Service (Eureka)\n- Config Service\n- API Gateway\n- Authorization Service\n- Image Service\n- Monitoring\n- Circuit Breaker (Hystrix)\n- Inteligent routing (Zuul)\n- Load Balancing (Ribbon)\n","source":"_posts/pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud.md","raw":"---\ntitle: Microservice dengan Spring Cloud\ndate: 2017-05-28 16:11:04\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n## Komponen Komponen Microservice\n- Discovery Service (Eureka)\n- Config Service\n- API Gateway\n- Authorization Service\n- Image Service\n- Monitoring\n- Circuit Breaker (Hystrix)\n- Inteligent routing (Zuul)\n- Load Balancing (Ribbon)\n","slug":"pemrograman/spring/microservice/Microservice-dengan-Spring-Cloud","published":1,"updated":"2017-07-22T06:26:19.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnm5003mislpi790cq24","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h2 id=\"Komponen-Komponen-Microservice\"><a href=\"#Komponen-Komponen-Microservice\" class=\"headerlink\" title=\"Komponen Komponen Microservice\"></a>Komponen Komponen Microservice</h2><ul>\n<li>Discovery Service (Eureka)</li>\n<li>Config Service</li>\n<li>API Gateway</li>\n<li>Authorization Service</li>\n<li>Image Service</li>\n<li>Monitoring</li>\n<li>Circuit Breaker (Hystrix)</li>\n<li>Inteligent routing (Zuul)</li>\n<li>Load Balancing (Ribbon)</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h2 id=\"Komponen-Komponen-Microservice\"><a href=\"#Komponen-Komponen-Microservice\" class=\"headerlink\" title=\"Komponen Komponen Microservice\"></a>Komponen Komponen Microservice</h2><ul>\n<li>Discovery Service (Eureka)</li>\n<li>Config Service</li>\n<li>API Gateway</li>\n<li>Authorization Service</li>\n<li>Image Service</li>\n<li>Monitoring</li>\n<li>Circuit Breaker (Hystrix)</li>\n<li>Inteligent routing (Zuul)</li>\n<li>Load Balancing (Ribbon)</li>\n</ul>\n"},{"title":"Membuat Report dengan Jasper Report","date":"2017-04-23T07:17:39.000Z","_content":"![](/images/springboot.png)\n\n1. Tambahkan dependency\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context-support</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.github.jpenren</groupId>\n\t\t\t<artifactId>thymeleaf-spring-data-dialect</artifactId>\n\t\t\t<version>2.1.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>net.sf.jasperreports</groupId>\n\t\t\t<artifactId>jasperreports</artifactId>\n\t\t\t<version>6.3.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi</artifactId>\n\t\t\t<version>3.10.1</version>\n\t\t</dependency>\n```\n1. Membuat file .jrxml menggunakan Jaspersoft Studio\n2. Copy file ke resource/reports\n3. tambahkan bean `JasperReportsViewResolver` ke konfigurasiweb\n```java\n@Bean\n    public JasperReportsViewResolver getJasperReportsViewResolver(){\n        JasperReportsViewResolver resolver = new JasperReportsViewResolver();\n        resolver.setPrefix(\"classpath:/reports/\");\n        resolver.setSuffix(\".jrxml\");\n        resolver.setViewNames(\"report_*\");\n        resolver.setViewClass(JasperReportsMultiFormatView.class);\n        resolver.setOrder(0);\n        return resolver;\n    }\n```\n- buat controllernya\n```java\n@Controller\npublic class BugReportController {\n    @Autowired private BugDao dao;\n\n    @RequestMapping(\"/bug\")\n    public ModelAndView generateAllBugReport(ModelAndView m,\n                                             @RequestParam(value = \"format\", required = false) String format){\n        Iterable<Bug> data = dao.findAll();\n        m.addObject(\"dataSource\", data);\n        m.addObject(\"tanggalUpdate\", new Date());\n        m.addObject(\"format\", \"pdf\");\n\n        if(format != null && !format.isEmpty()){\n            m.addObject(\"format\", format);\n        }\n\n        m.setViewName(\"report_bug\");\n        return m;\n    }\n}\n```\n","source":"_posts/pemrograman/spring/report/jasper-report.md","raw":"---\ntitle: Membuat Report dengan Jasper Report\ndate: 2017-04-23 14:17:39\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n1. Tambahkan dependency\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context-support</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.github.jpenren</groupId>\n\t\t\t<artifactId>thymeleaf-spring-data-dialect</artifactId>\n\t\t\t<version>2.1.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>net.sf.jasperreports</groupId>\n\t\t\t<artifactId>jasperreports</artifactId>\n\t\t\t<version>6.3.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi</artifactId>\n\t\t\t<version>3.10.1</version>\n\t\t</dependency>\n```\n1. Membuat file .jrxml menggunakan Jaspersoft Studio\n2. Copy file ke resource/reports\n3. tambahkan bean `JasperReportsViewResolver` ke konfigurasiweb\n```java\n@Bean\n    public JasperReportsViewResolver getJasperReportsViewResolver(){\n        JasperReportsViewResolver resolver = new JasperReportsViewResolver();\n        resolver.setPrefix(\"classpath:/reports/\");\n        resolver.setSuffix(\".jrxml\");\n        resolver.setViewNames(\"report_*\");\n        resolver.setViewClass(JasperReportsMultiFormatView.class);\n        resolver.setOrder(0);\n        return resolver;\n    }\n```\n- buat controllernya\n```java\n@Controller\npublic class BugReportController {\n    @Autowired private BugDao dao;\n\n    @RequestMapping(\"/bug\")\n    public ModelAndView generateAllBugReport(ModelAndView m,\n                                             @RequestParam(value = \"format\", required = false) String format){\n        Iterable<Bug> data = dao.findAll();\n        m.addObject(\"dataSource\", data);\n        m.addObject(\"tanggalUpdate\", new Date());\n        m.addObject(\"format\", \"pdf\");\n\n        if(format != null && !format.isEmpty()){\n            m.addObject(\"format\", format);\n        }\n\n        m.setViewName(\"report_bug\");\n        return m;\n    }\n}\n```\n","slug":"pemrograman/spring/report/jasper-report","published":1,"updated":"2017-05-28T09:16:30.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnmb003oislpubdahaw5","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<ol>\n<li><p>Tambahkan dependency</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.jpenren<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-spring-data-dialect<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.jasperreports<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasperreports<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>poi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.10.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file .jrxml menggunakan Jaspersoft Studio</p>\n</li>\n<li>Copy file ke resource/reports</li>\n<li>tambahkan bean <code>JasperReportsViewResolver</code> ke konfigurasiweb<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JasperReportsViewResolver <span class=\"title\">getJasperReportsViewResolver</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        JasperReportsViewResolver resolver = <span class=\"keyword\">new</span> JasperReportsViewResolver();</div><div class=\"line\">        resolver.setPrefix(<span class=\"string\">\"classpath:/reports/\"</span>);</div><div class=\"line\">        resolver.setSuffix(<span class=\"string\">\".jrxml\"</span>);</div><div class=\"line\">        resolver.setViewNames(<span class=\"string\">\"report_*\"</span>);</div><div class=\"line\">        resolver.setViewClass(JasperReportsMultiFormatView.class);</div><div class=\"line\">        resolver.setOrder(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> resolver;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>buat controllernya<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugReportController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> BugDao dao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/bug\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">generateAllBugReport</span><span class=\"params\">(ModelAndView m,</span></span></div><div class=\"line\">                                             @RequestParam(value = <span class=\"string\">\"format\"</span>, required = <span class=\"keyword\">false</span>) String format)&#123;</div><div class=\"line\">        Iterable&lt;Bug&gt; data = dao.findAll();</div><div class=\"line\">        m.addObject(<span class=\"string\">\"dataSource\"</span>, data);</div><div class=\"line\">        m.addObject(<span class=\"string\">\"tanggalUpdate\"</span>, <span class=\"keyword\">new</span> Date());</div><div class=\"line\">        m.addObject(<span class=\"string\">\"format\"</span>, <span class=\"string\">\"pdf\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(format != <span class=\"keyword\">null</span> &amp;&amp; !format.isEmpty())&#123;</div><div class=\"line\">            m.addObject(<span class=\"string\">\"format\"</span>, format);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        m.setViewName(<span class=\"string\">\"report_bug\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> m;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<ol>\n<li><p>Tambahkan dependency</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.jpenren<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-spring-data-dialect<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.jasperreports<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasperreports<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>poi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.10.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat file .jrxml menggunakan Jaspersoft Studio</p>\n</li>\n<li>Copy file ke resource/reports</li>\n<li>tambahkan bean <code>JasperReportsViewResolver</code> ke konfigurasiweb<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JasperReportsViewResolver <span class=\"title\">getJasperReportsViewResolver</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        JasperReportsViewResolver resolver = <span class=\"keyword\">new</span> JasperReportsViewResolver();</div><div class=\"line\">        resolver.setPrefix(<span class=\"string\">\"classpath:/reports/\"</span>);</div><div class=\"line\">        resolver.setSuffix(<span class=\"string\">\".jrxml\"</span>);</div><div class=\"line\">        resolver.setViewNames(<span class=\"string\">\"report_*\"</span>);</div><div class=\"line\">        resolver.setViewClass(JasperReportsMultiFormatView.class);</div><div class=\"line\">        resolver.setOrder(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> resolver;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>buat controllernya<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BugReportController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> BugDao dao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/bug\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">generateAllBugReport</span><span class=\"params\">(ModelAndView m,</div><div class=\"line\">                                             @RequestParam(value = <span class=\"string\">\"format\"</span>, required = <span class=\"keyword\">false</span>)</span> String format)</span>&#123;</div><div class=\"line\">        Iterable&lt;Bug&gt; data = dao.findAll();</div><div class=\"line\">        m.addObject(<span class=\"string\">\"dataSource\"</span>, data);</div><div class=\"line\">        m.addObject(<span class=\"string\">\"tanggalUpdate\"</span>, <span class=\"keyword\">new</span> Date());</div><div class=\"line\">        m.addObject(<span class=\"string\">\"format\"</span>, <span class=\"string\">\"pdf\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(format != <span class=\"keyword\">null</span> &amp;&amp; !format.isEmpty())&#123;</div><div class=\"line\">            m.addObject(<span class=\"string\">\"format\"</span>, format);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        m.setViewName(<span class=\"string\">\"report_bug\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> m;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Kardinalitas pada Spring Data JPA","date":"2017-04-23T07:17:36.000Z","_content":"![](/images/springboot.png)\n\nSedang dalam pembuatan Konten\n","source":"_posts/pemrograman/spring/jpa/3-kardinalitas.md","raw":"---\ntitle: Kardinalitas pada Spring Data JPA\ndate: 2017-04-23 14:17:36\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\nSedang dalam pembuatan Konten\n","slug":"pemrograman/spring/jpa/3-kardinalitas","published":1,"updated":"2017-06-19T03:54:14.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnmg003qislprx4fef6w","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Sedang dalam pembuatan Konten</p>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Sedang dalam pembuatan Konten</p>\n"},{"title":"Otorisasi methode dengan Spring Security","date":"2017-05-27T09:56:05.000Z","_content":"![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nRequire :\n- otorisasi login dengan spring security\n- crud\n\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n\n}\n```\n\n```java\n@RestController\n@RequestMapping(\"/api/harga\")\npublic class HargaRestController {\n\n    @Autowired private HargaDao hargaDao;\n\n    @PreAuthorize(\"hasAuthority('HARGA_EDIT')\")\n    @GetMapping(\"/\")\n    public Page<Harga> daftarHarga(Pageable page){\n        return hargaDao.findAll(page);\n    }\n}\n```\n","source":"_posts/pemrograman/spring/security/2-otorisasi-method-dengan-spring-security.md","raw":"---\ntitle: Otorisasi methode dengan Spring Security\ndate: 2017-05-27 16:56:05\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nRequire :\n- otorisasi login dengan spring security\n- crud\n\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n\n}\n```\n\n```java\n@RestController\n@RequestMapping(\"/api/harga\")\npublic class HargaRestController {\n\n    @Autowired private HargaDao hargaDao;\n\n    @PreAuthorize(\"hasAuthority('HARGA_EDIT')\")\n    @GetMapping(\"/\")\n    public Page<Harga> daftarHarga(Pageable page){\n        return hargaDao.findAll(page);\n    }\n}\n```\n","slug":"pemrograman/spring/security/2-otorisasi-method-dengan-spring-security","published":1,"updated":"2017-06-19T03:50:22.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnmm003sislpqjyc7tm3","content":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Require :</p>\n<ul>\n<li>otorisasi login dengan spring security</li>\n<li>crud</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/harga\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HargaRestController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> HargaDao hargaDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAuthority('HARGA_EDIT')\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Harga&gt; <span class=\"title\">daftarHarga</span><span class=\"params\">(Pageable page)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hargaDao.findAll(page);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Require :</p>\n<ul>\n<li>otorisasi login dengan spring security</li>\n<li>crud</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/harga\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HargaRestController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> HargaDao hargaDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PreAuthorize</span>(<span class=\"string\">\"hasAuthority('HARGA_EDIT')\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Harga&gt; <span class=\"title\">daftarHarga</span><span class=\"params\">(Pageable page)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hargaDao.findAll(page);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Otorisasi Login dengan spring security","date":"2017-04-23T07:17:37.000Z","_content":"![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n# Bikin Otorisasi Login #\n- Tambahkan dependency (pom.xml)\n  ```xml\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n  ```\n- Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java)\n  ```java\n    @Configuration\n    @EnableWebSecurity\n    @EnableGlobalMethodSecurity(prePostEnabled = true)\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n        private static final String SQL_LOGIN\n                = \"SELECT username,password, enable \" +\n                \"FROM s_users WHERE username = ?\";\n\n        private static final String SQL_PERMISSION\n                = \"SELECT u.username, r.nama as authority \" +\n                \"FROM s_users u \" +\n                \"JOIN s_user_role ur on u.id = ur.id_user \" +\n                \"JOIN s_roles r on ur.id_role = r.id \" +\n                \"WHERE u.username = ?\";\n\n        @Autowired\n        private DataSource dataSource;\n\n        @Autowired\n        public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{\n\n            //setting security non database\n            auth\n                    .inMemoryAuthentication()\n                    .withUser(\"ciazhar\")\n                    .password(\"123\")\n                    .roles(\"apa\");\n\n            ///Setting security database\n            /*auth\n                    .jdbcAuthentication()\n                    .dataSource(dataSource)\n                    .usersByUsernameQuery(SQL_LOGIN)\n                    .authoritiesByUsernameQuery(SQL_PERMISSION);*/\n        }\n\n        ///konfigurasi web mana yg boleh diakses admin staf user dll\n        protected void configure(HttpSecurity http) throws Exception{\n            http\n                    .authorizeRequests()\n                    .antMatchers(\"/css/**\",\"/js/**\").permitAll()\n                    .anyRequest().authenticated()\n                    .and()\n                    .formLogin()\n                    .loginPage(\"/login\")\n                    .defaultSuccessUrl(\"/\")\n                    .permitAll()\n                    .and()\n                    .logout();\n        }\n    }\n  ```\n- Register UI(src/main/java/domain/config/KonfigurasiWeb.java)\n  Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu.\n  ```java\n    @Configuration\n    public class KonfigurasiWeb extends WebMvcConfigurerAdapter{\n\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry){\n            registry.addViewController(\"/login\").setViewName(\"login\");\n            registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\");\n        }\n    }\n  ```\n\n- Bikin UI Login(main/resources/login.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n      <head>\n\n        <title>Log In</title>\n\n        <!-- Bootstrap core CSS -->\n\n        <link th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n        <link th:href=\"@{/css/bootstrap-theme.min.css}\" rel=\"stylesheet\" />\n        <link th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n      </head>\n\n      <body>\n\n        <div class=\"container\">\n\n          <form name=\"f\" class=\"form-signin\"  th:action=\"@{/login}\" method=\"post\">\n            <div th:if=\"${param.error}\" class=\"alert alert-error\">\n              Invalid username and password.\n            </div>\n\n            <div th:if=\"${param.logout}\" class=\"alert alert-success\">\n              You have been logged out.\n            </div>\n\n            <h2 class=\"form-signin-heading\">Please sign in</h2>\n            <label for=\"username\" class=\"sr-only\">Username</label>\n            <input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"true\" autofocus=\"true\" />\n            <label for=\"password\" class=\"sr-only\">Password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"true\" />\n            <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\n          </form>\n\n        </div>\n\n        <script th:src=\"@{/js/jquery.min.js}\"></script>\n        <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n      </body>\n    </html>\n  ```\n","source":"_posts/pemrograman/spring/security/1-otorisasi-login-dengan-spring-security.md","raw":"---\ntitle: Otorisasi Login dengan spring security\ndate: 2017-04-23 14:17:37\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n# Bikin Otorisasi Login #\n- Tambahkan dependency (pom.xml)\n  ```xml\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n  ```\n- Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java)\n  ```java\n    @Configuration\n    @EnableWebSecurity\n    @EnableGlobalMethodSecurity(prePostEnabled = true)\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n        private static final String SQL_LOGIN\n                = \"SELECT username,password, enable \" +\n                \"FROM s_users WHERE username = ?\";\n\n        private static final String SQL_PERMISSION\n                = \"SELECT u.username, r.nama as authority \" +\n                \"FROM s_users u \" +\n                \"JOIN s_user_role ur on u.id = ur.id_user \" +\n                \"JOIN s_roles r on ur.id_role = r.id \" +\n                \"WHERE u.username = ?\";\n\n        @Autowired\n        private DataSource dataSource;\n\n        @Autowired\n        public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{\n\n            //setting security non database\n            auth\n                    .inMemoryAuthentication()\n                    .withUser(\"ciazhar\")\n                    .password(\"123\")\n                    .roles(\"apa\");\n\n            ///Setting security database\n            /*auth\n                    .jdbcAuthentication()\n                    .dataSource(dataSource)\n                    .usersByUsernameQuery(SQL_LOGIN)\n                    .authoritiesByUsernameQuery(SQL_PERMISSION);*/\n        }\n\n        ///konfigurasi web mana yg boleh diakses admin staf user dll\n        protected void configure(HttpSecurity http) throws Exception{\n            http\n                    .authorizeRequests()\n                    .antMatchers(\"/css/**\",\"/js/**\").permitAll()\n                    .anyRequest().authenticated()\n                    .and()\n                    .formLogin()\n                    .loginPage(\"/login\")\n                    .defaultSuccessUrl(\"/\")\n                    .permitAll()\n                    .and()\n                    .logout();\n        }\n    }\n  ```\n- Register UI(src/main/java/domain/config/KonfigurasiWeb.java)\n  Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu.\n  ```java\n    @Configuration\n    public class KonfigurasiWeb extends WebMvcConfigurerAdapter{\n\n        @Override\n        public void addViewControllers(ViewControllerRegistry registry){\n            registry.addViewController(\"/login\").setViewName(\"login\");\n            registry.addViewController(\"/materi/list\").setViewName(\"materi/listMateri\");\n        }\n    }\n  ```\n\n- Bikin UI Login(main/resources/login.html)\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n      <head>\n\n        <title>Log In</title>\n\n        <!-- Bootstrap core CSS -->\n\n        <link th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n        <link th:href=\"@{/css/bootstrap-theme.min.css}\" rel=\"stylesheet\" />\n        <link th:href=\"@{/css/signin.css}\" rel=\"stylesheet\" />\n      </head>\n\n      <body>\n\n        <div class=\"container\">\n\n          <form name=\"f\" class=\"form-signin\"  th:action=\"@{/login}\" method=\"post\">\n            <div th:if=\"${param.error}\" class=\"alert alert-error\">\n              Invalid username and password.\n            </div>\n\n            <div th:if=\"${param.logout}\" class=\"alert alert-success\">\n              You have been logged out.\n            </div>\n\n            <h2 class=\"form-signin-heading\">Please sign in</h2>\n            <label for=\"username\" class=\"sr-only\">Username</label>\n            <input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"true\" autofocus=\"true\" />\n            <label for=\"password\" class=\"sr-only\">Password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"true\" />\n            <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\n          </form>\n\n        </div>\n\n        <script th:src=\"@{/js/jquery.min.js}\"></script>\n        <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n      </body>\n    </html>\n  ```\n","slug":"pemrograman/spring/security/1-otorisasi-login-dengan-spring-security","published":1,"updated":"2017-06-19T03:50:23.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnmu003uislpmohin2r6","content":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<h1 id=\"Bikin-Otorisasi-Login\"><a href=\"#Bikin-Otorisasi-Login\" class=\"headerlink\" title=\"Bikin Otorisasi Login\"></a>Bikin Otorisasi Login</h1><ul>\n<li><p>Tambahkan dependency (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_LOGIN</div><div class=\"line\">            = <span class=\"string\">\"SELECT username,password, enable \"</span> +</div><div class=\"line\">            <span class=\"string\">\"FROM s_users WHERE username = ?\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_PERMISSION</div><div class=\"line\">            = <span class=\"string\">\"SELECT u.username, r.nama as authority \"</span> +</div><div class=\"line\">            <span class=\"string\">\"FROM s_users u \"</span> +</div><div class=\"line\">            <span class=\"string\">\"JOIN s_user_role ur on u.id = ur.id_user \"</span> +</div><div class=\"line\">            <span class=\"string\">\"JOIN s_roles r on ur.id_role = r.id \"</span> +</div><div class=\"line\">            <span class=\"string\">\"WHERE u.username = ?\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureGlobal</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//setting security non database</span></div><div class=\"line\">        auth</div><div class=\"line\">                .inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"ciazhar\"</span>)</div><div class=\"line\">                .password(<span class=\"string\">\"123\"</span>)</div><div class=\"line\">                .roles(<span class=\"string\">\"apa\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">///Setting security database</span></div><div class=\"line\">        <span class=\"comment\">/*auth</span></div><div class=\"line\">                .jdbcAuthentication()</div><div class=\"line\">                .dataSource(dataSource)</div><div class=\"line\">                .usersByUsernameQuery(SQL_LOGIN)</div><div class=\"line\">                .authoritiesByUsernameQuery(SQL_PERMISSION);*/</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">///konfigurasi web mana yg boleh diakses admin staf user dll</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        http</div><div class=\"line\">                .authorizeRequests()</div><div class=\"line\">                .antMatchers(<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>).permitAll()</div><div class=\"line\">                .anyRequest().authenticated()</div><div class=\"line\">                .and()</div><div class=\"line\">                .formLogin()</div><div class=\"line\">                .loginPage(<span class=\"string\">\"/login\"</span>)</div><div class=\"line\">                .defaultSuccessUrl(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">                .permitAll()</div><div class=\"line\">                .and()</div><div class=\"line\">                .logout();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Register UI(src/main/java/domain/config/KonfigurasiWeb.java)<br>Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiWeb</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span></span>&#123;</div><div class=\"line\">        registry.addViewController(<span class=\"string\">\"/login\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</div><div class=\"line\">        registry.addViewController(<span class=\"string\">\"/materi/list\"</span>).setViewName(<span class=\"string\">\"materi/listMateri\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin UI Login(main/resources/login.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap-theme.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/signin.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"f\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin\"</span>  <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;param.error&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-error\"</span>&gt;</span></div><div class=\"line\">          Invalid username and password.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;param.logout&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-success\"</span>&gt;</span></div><div class=\"line\">          You have been logged out.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin-heading\"</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Username\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-lg btn-primary btn-block\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<h1 id=\"Bikin-Otorisasi-Login\"><a href=\"#Bikin-Otorisasi-Login\" class=\"headerlink\" title=\"Bikin Otorisasi Login\"></a>Bikin Otorisasi Login</h1><ul>\n<li><p>Tambahkan dependency (pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin KonfigurasiSecurity (main/java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_LOGIN</div><div class=\"line\">            = <span class=\"string\">\"SELECT username,password, enable \"</span> +</div><div class=\"line\">            <span class=\"string\">\"FROM s_users WHERE username = ?\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_PERMISSION</div><div class=\"line\">            = <span class=\"string\">\"SELECT u.username, r.nama as authority \"</span> +</div><div class=\"line\">            <span class=\"string\">\"FROM s_users u \"</span> +</div><div class=\"line\">            <span class=\"string\">\"JOIN s_user_role ur on u.id = ur.id_user \"</span> +</div><div class=\"line\">            <span class=\"string\">\"JOIN s_roles r on ur.id_role = r.id \"</span> +</div><div class=\"line\">            <span class=\"string\">\"WHERE u.username = ?\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureGlobal</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//setting security non database</span></div><div class=\"line\">        auth</div><div class=\"line\">                .inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"ciazhar\"</span>)</div><div class=\"line\">                .password(<span class=\"string\">\"123\"</span>)</div><div class=\"line\">                .roles(<span class=\"string\">\"apa\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">///Setting security database</span></div><div class=\"line\">        <span class=\"comment\">/*auth</div><div class=\"line\">                .jdbcAuthentication()</div><div class=\"line\">                .dataSource(dataSource)</div><div class=\"line\">                .usersByUsernameQuery(SQL_LOGIN)</div><div class=\"line\">                .authoritiesByUsernameQuery(SQL_PERMISSION);*/</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">///konfigurasi web mana yg boleh diakses admin staf user dll</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        http</div><div class=\"line\">                .authorizeRequests()</div><div class=\"line\">                .antMatchers(<span class=\"string\">\"/css/**\"</span>,<span class=\"string\">\"/js/**\"</span>).permitAll()</div><div class=\"line\">                .anyRequest().authenticated()</div><div class=\"line\">                .and()</div><div class=\"line\">                .formLogin()</div><div class=\"line\">                .loginPage(<span class=\"string\">\"/login\"</span>)</div><div class=\"line\">                .defaultSuccessUrl(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">                .permitAll()</div><div class=\"line\">                .and()</div><div class=\"line\">                .logout();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Register UI(src/main/java/domain/config/KonfigurasiWeb.java)<br>Karena form login kita tidak menggunakan controller, maka harus didaftarkan terlebih dahulu.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiWeb</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span></span>&#123;</div><div class=\"line\">        registry.addViewController(<span class=\"string\">\"/login\"</span>).setViewName(<span class=\"string\">\"login\"</span>);</div><div class=\"line\">        registry.addViewController(<span class=\"string\">\"/materi/list\"</span>).setViewName(<span class=\"string\">\"materi/listMateri\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin UI Login(main/resources/login.html)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Log In<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Bootstrap core CSS --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap-theme.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/signin.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"f\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin\"</span>  <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/login&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;param.error&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-error\"</span>&gt;</span></div><div class=\"line\">          Invalid username and password.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;param.logout&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert alert-success\"</span>&gt;</span></div><div class=\"line\">          You have been logged out.</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-signin-heading\"</span>&gt;</span>Please sign in<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Username\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autofocus</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Password\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-lg btn-primary btn-block\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Sign in<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"CRUD Design Pattern 3","date":"2017-05-27T10:18:48.000Z","_content":"![](/images/springboot.png)\n\nSedang dalam pembuatan Konten\n","source":"_posts/pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended).md","raw":"---\ntitle: CRUD Design Pattern 3\ndate: 2017-05-27 17:18:48\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\nSedang dalam pembuatan Konten\n","slug":"pemrograman/spring/jpa/2.2-crud-jpa-thymeleaf(extended)","published":1,"updated":"2017-06-19T03:54:14.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnmx003wislp76x73k5k","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Sedang dalam pembuatan Konten</p>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<p>Sedang dalam pembuatan Konten</p>\n"},{"title":"Debugging Spring Security","date":"2017-05-27T10:03:50.000Z","_content":"![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nSpring security memberikan fasilitas untuk mendebug. Untuk menggunakannya cukup dengan menambahkan anotasi `@EnableWebSecurity(debug = true)` pada file KonfigurasiSecurity.\n\n```java\n@EnableWebSecurity(debug = true)\npublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n}\n```\n\nDebug ini hanya disarankan pada tahap development saja.\n","source":"_posts/pemrograman/spring/security/3-debug-spring-security.md","raw":"---\ntitle: Debugging Spring Security\ndate: 2017-05-27 17:03:50\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nSpring security memberikan fasilitas untuk mendebug. Untuk menggunakannya cukup dengan menambahkan anotasi `@EnableWebSecurity(debug = true)` pada file KonfigurasiSecurity.\n\n```java\n@EnableWebSecurity(debug = true)\npublic class KonfigurasiSecurity extends WebSecurityConfigurerAdapter{\n}\n```\n\nDebug ini hanya disarankan pada tahap development saja.\n","slug":"pemrograman/spring/security/3-debug-spring-security","published":1,"updated":"2017-06-19T03:50:21.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnn0003yislpxsba7i5n","content":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Spring security memberikan fasilitas untuk mendebug. Untuk menggunakannya cukup dengan menambahkan anotasi <code>@EnableWebSecurity(debug = true)</code> pada file KonfigurasiSecurity.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span>(debug = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Debug ini hanya disarankan pada tahap development saja.</p>\n","excerpt":"","more":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Spring security memberikan fasilitas untuk mendebug. Untuk menggunakannya cukup dengan menambahkan anotasi <code>@EnableWebSecurity(debug = true)</code> pada file KonfigurasiSecurity.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span>(debug = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Debug ini hanya disarankan pada tahap development saja.</p>\n"},{"title":"Debugging Spring Data JPA","date":"2017-05-28T09:09:00.000Z","_content":"![](/images/springboot.png)\n\n```yml\nspring:\n  jpa:\n      hibernate:\n        ddl-auto: none\n      show-sql: true  \n```","source":"_posts/pemrograman/spring/jpa/4-Debug-Spring-Data-JPA.md","raw":"---\ntitle: Debugging Spring Data JPA\ndate: 2017-05-28 16:09:00\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n```yml\nspring:\n  jpa:\n      hibernate:\n        ddl-auto: none\n      show-sql: true  \n```","slug":"pemrograman/spring/jpa/4-Debug-Spring-Data-JPA","published":1,"updated":"2017-08-14T04:49:54.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnn30040islp4gt6bwuu","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  jpa:</span></div><div class=\"line\"><span class=\"attr\">      hibernate:</span></div><div class=\"line\"><span class=\"attr\">        ddl-auto:</span> <span class=\"string\">none</span></div><div class=\"line\"><span class=\"attr\">      show-sql:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  jpa:</span></div><div class=\"line\"><span class=\"attr\">      hibernate:</span></div><div class=\"line\"><span class=\"attr\">        ddl-auto:</span> <span class=\"string\">none</span></div><div class=\"line\"><span class=\"attr\">      show-sql:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>"},{"title":"Integrasi Spring dan Oauth2 + JWT","date":"2017-05-27T08:30:21.000Z","_content":"![](/images/springboot.png)\n\n# Gambaran Umum\nAplikasi yang akan kita buat nantinya akan dibagi menjadi beberapa aplikasi kecil dengan fungsinya masing-masing. Diantaranya adalah :\n- Resource Server. Aplikasi ini menyediakan resource yang dibutuhkan oleh user.\n- Authorization Server. Aplikasi ini menyediakan layanan otorisasi.\n- Aplikasi Client. Aplikasi yang dipakai oleh client. Dapat berupa aplikasi web ataupun native.\n\n## Konfigurasi Resource Server ##\n- Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)\n  ```xml\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n    <dependency>\n\t\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t\t<artifactId>spring-security-jwt</artifactId>\n\t\t</dependency>\n  ```\n- Buat class KonfigurasiResourceServer (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java)\n  ```java\n  @EnableResourceServer\n  public class KonfigurasiResourceServer extends ResourceServerConfigurerAdapter{\n\n  }\n  ```\n- override methode untuk authorisasi (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java/ResourceServerConfiguration).\n  ```java\n  @Override\n  public void configure(HttpSecurity http) throws Exception {\n      http.authorizeRequests().anyRequest().authenticated()\n      ;\n  }\n  ```\n- Konfigurasi JWT\n  ```yml\n  security.oauth2.resource.jwt.key-uri=http://localhost:10000/oauth/token_key\n  ```\n## Konfigurasi Authorization Server ##\n- Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)\n  ```xml\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n    <dependency>\n\t\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t\t<artifactId>spring-security-jwt</artifactId>\n\t\t</dependency>\n  ```\n- setup port (auth-server/src/main/resources/application.properties)\n  ```yml\n    server.port=10000\n  ```\n- setup session cookies(auth-server/src/main/resources/application.properties)\n```yml\nserver.session.cookie.name=AUTHSERVER\n```\n- membuat class KonfigurasiAuthorizationServer (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java)\n  ```java\n    @Configuration\n    public class KonfigurasiAuthorizationServer {\n\n    }\n  ```\n- Membuat inner class\n- Setup AuthenticationManager\n  ```\n    @Autowired\n    @Qualifier(\"authenticationManagerBean\")\n    private AuthenticationManager authenticationManager;\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menyimpan token yang nanti akan di cek kembali\n  ```\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints)\n            throws Exception {\n        endpoints\n                .tokenStore(new InMemoryTokenStore())\n                .authenticationManager(authenticationManager);\n    }\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menentukan role apa saja yang dapat mendapat mengakses check token\n  ```\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {\n        oauthServer.checkTokenAccess(\"hasRole('CLIENT')\");\n    }\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berisi list role client berasarkan grant tye\n  ```\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n      clients\n        .inMemory()\n        .withClient(\"clientauthcode\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"authorization_code\",\"refresh_token\")\n          .authorities(\"CLIENT\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)\n        .and()\n        .withClient(\"clientcred\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"client_credentials\")\n          .scopes(\"trust\")\n          .resourceIds(RESOURCE_ID)\n        .and()\n        .withClient(\"clientapp\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"password\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)  \n        .and()\n        .withClient(\"jsclient\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"implicit\")\n          .authorities(\"CLIENT\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)\n          .redirectUris(\"http://localhost:20000/implicit-client\")\n          .accessTokenValiditySeconds(60* 60 *24)\n          .autoApprove(true);\n    }\n  ```\n- Konfigurasi Security (auth-server/src/main/java/domain/config/KonfigurasiSecurity)\n  ```\n    @Override\n        @Bean\n        public AuthenticationManager authenticationManagerBean() throws Exception {\n            return super.authenticationManagerBean();\n        }\n  ```\n\n\n# Flow untuk masing masing role clint #\nPerlu diketahui authorization server akan jalan di port 10000 dan resource server akan jalan di port 8080. OAuth 2 sendiri menyediakan 4 role yaitu :\n- Authorization Code (Akses yang dalam mendapatkan resource memerlukan kode)\n- Username Password\n- Client Credential (Akses yang memungkinkan client tidak perlu login untuk mendapatkan akses)\n- Client Impicit (Akses yang biasanya digunakan untuk mendapatkan resource berupa js)\n\n## Authorization Code ##\nKarena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url\n  ```\n    http://localhost:10000/oauth/authorize?client_id=clientauthcode&response_type=code&redirect_uri=http://localhost:8080/api/halo\n  ```\n  Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu `clientauthcode`, response_type berupa `code` dan ingin request ke `http://localhost:8080/api/halo`\n- Kita akan langsung di redirect ke `http://localhost:10000/login`. Kita diminta untuk memasukkan otorisasi login\n- Lalu akan muncul form approval dengan scope `read` dan `write`, untuk approval ini dapat dikonfigurasi agar tidak tampil atau otomatis authorize.\n- Lalu akan muncul url sebagai berikut\n  ```\n    http://localhost:8080/api/halo?code=Ixd8e\n  ```\n  Kemudian kita ambil code tersebut\n- Lalu ditukarkan kode tersebut dengan access token dengan cara mengakses kembali ke auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientauthcode` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- grant_type berupa `authorization_code`\n  \t- code berupa `Ixd8e`\n  \t- redirect_uri berupa `http://localhost:8080/api/halo`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - refresh_token : `baba`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Lalu akses ke resource server dengan menambahkan access token yang telah kita dapatkan tadi dengan url `http://localhost:8080/api/halo?access_token=blablabla`\n- Selamat anda sudah dapat mengakses resource.\n\tSebenarnya sebelum token mendapatkan resource tersebut resource server melakukan pengecekan ke authorization server terhadap acces token tadi apakah valid atau tidak.Namun perlu diketahui bahwa saat ini kedua aplikasi berjalan di port yang berbeda (auth server port 10000, dan resource server di port 8080) sehingga tidak dapat sharing token via memory.\nSolusinya adalah :\n- Token tadi akan disimpan ke database menggunakan jdbc token store oleh auth server. Lalu resource server akan diarahkan ke database tersebut. Tetapi ada kalanya resource server tidak dapat mendapatkan akses ke database.\n- Menggunakan RemoteTokenServices yang ada pada setting KonfigurasiResourceServer\n  ```\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        RemoteTokenServices tokenService = new RemoteTokenServices();\n        tokenService.setClientId(\"clientauthcode\");\n        tokenService.setClientSecret(\"123456\");\n        tokenService.setCheckTokenEndpointUrl(\"http://localhost:10000/oauth/check_token\");\n        resources\n                .resourceId(RESOURCE_ID)\n                .tokenServices(tokenService);\n    }\n  ```\n  resource server akan mengarahkan ke url `http://localhost:10000/oauth/check_token` dengan menambahkan client id berupa `clientauthcode`, secret berupa `123456` dan access_token menggunakn methode GET. sehingga resource server mendapat data sebagai berikut :\n  - rid :  `belajar`\n  - exp : `14441`\n  - username : `endy`\n  - authorities : `[ROLE_OPERATOR]`,`[ROLE_SUPERVISOR]`\n  - client_id : `clientauthcode`\n  - scope : `read`,`write`\n  dari sini resource server tahu role dari user tersebut dan dapat memutuskan user tersebut dapat mengakses resource tersebut atau tidak\n\n## Username Password ##\n- Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientapp` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientapp`\n  \t- grant_type berupa `password`\n  \t- username berupa `endy`\n    - password berupa `123`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  - client_id berupa `clientapp` dan secret `123456` dan authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n- Selamat anda sudah dapat mengakses resource.\n\n## Client Credential ##\n- Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientcred` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientcred`\n  \t- grant_type berupa `client_credentials`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  - client_id berupa `clientcred` dan secret `123456` dan authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientcred`\n- Perlu diketahui karena client cred ini tidak menggunakan username dan password maka dia tidak dapat digunakan dalam aplikasi ini karena resource server telah kita setting hanya untuk menerima authentifikasi dari user dengan role operator.\n\n## Implicit Client ##\n- Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url\n  ```\n    http://localhost:10000/oauth/authorize?client_id=jsclient&response_type=token&redirect_uri=http://localhost:2000/implicit-client\n  ```\n  Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu `jsclient`, response_type berupa `token` dan ingin request ke `http://localhost:2000/implicit-client`\n- Kita akan langsung di redirect ke `http://localhost:10000/login`. Kita diminta untuk memasukkan otorisasi login\n- Selanjutnya kita akan mendapatkan url `http://localhost:2000/implicit-client/#access_token=blabla&token_type=bearer`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n\n# Mendapatkan Informasi User #\n- Pertama class buat controller(resource-server/src/main/java/domain/controller/InfoController)\n  ```\n    @RestController\n    @EnableResourceServer\n    public class InfoController{\n\n    }\n  ```\n- Buat methode untuk mengakses info user\n  ```\n    @RequestMapping(\"/userinfo\")\n    public Principal user info (Principal principal){\n      return principal;\n    }\n  ```\n- Untuk mengaksesnya kita login dulu dengan menggunakan grant type clientauthcode sampai kita mendapatkan access tokenya\n- Setelah mendapatkanya masukkan url `http://localhost:8080/userinfo?access_token=blabla`\n\n# Membuat Aplikasi Client Auhtorization Code#\nPertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.\nStep by Step nya adalah sebagai berikut :\n- Download Setup projek di `http://start.spring.io`\n- Isi projek metadata berupa :\n  * artifact id :\n  * groupId :\n- Isi dependency yang dubutuhkan berupa :\n  * web\n  * thymeleaf\n- Download lalu pindahkan ke text editor\n- Kita coba bikin Controller sebagi resources (client-authcode/src/main/java/domain/controller/InfoController)\n  ```\n    @Controller\n    public class InfoController {\n\n\n    }\n  ```\n- Kita bikin methode untuk di proses ke user. Methode ini akan mengembalikan waktu sekarang menggunakan variabel `waktu`. methode ini dapat diakses di url /halo.(client-authcode/src/main/java/domain/controller/InfoController)\n  ```\n    @RequestMapping(\"/info\")\n    public void info(Model m){\n      m.addAttribute(\"waktu\", new Date().toString());\n    }\n  ```\n- Kita bikin UI untuk mengeluarkan informasi dari methode halo yang telah buat tadi.(client-authcode/src/main/resources/templates/halo.html)\n  ```\n    <html>\n        <head>\n            <title>Halo Spring Boot</title>\n        </head>\n        <body>\n            <h1>Halo Spring Boot</h1>\n            <h2>Waktu saat ini : <span th:text=\"${waktu}\"></span></h2>\n        </body>\n    </html>\n  ```\n## Proteksi Client Authorization Code Dengan Spring Security\n- Lalu coba kita proteksi Resource Server kita menggunakan Spring Security dengan menambahkan dependency di pom.xml. (client-authcode/pom.xml)\n  ```\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n  ```\n  Pada keadaan ini kita akan diminta otorisasi jika kita mengakses di browser dengan username : `user` dan password yang ada pada CLI. karena tidak efisien mengabaikan otorisasi.\n- Buat class untuk konfigurasi otorisasi (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity)\n  ```\n    @Configuration\n    public class KonfigurasiSecurity  extends WebSecurityConfigurerAdapter {\n\n    }\n  ```\n- Override methode configure (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity). Methode untuk mengabaikan otorisasi\n  ```\n    @Override\n    public void configure (WebSecurity web) throws Exception{\n      web.ignoring().anyRequest();\n    }\n  ```\n- Buat class untuk konfigurasi OAuth Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client).\n  ```\n    @Configuration\n    @EnableOAuth2Client\n    public class KonfigurasiOauth2Client{\n\n    }\n  ```\n- Konfigurasi untuk Oauth2 Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client)\n  ```\n    private String urlAuthorization = \"http://localhost:10000/oauth/authorize\";\n    private String urlToken = \"http://localhost:10000/oauth/token\";\n\n    @Bean\n    public OAuth2RestOperations restOperations(OAuth2ClientContext context){\n        OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource(),context);\n        return restTemplate;\n    }\n\n    @Bean\n    public OAuth2ProtectedResourceDetails resource(){\n        AuthorizationCodeResourceDetails resourceDetails= new AuthorizationCodeResourceDetails();\n        resourceDetails.setClientId(\"clientauthcode\");\n        resourceDetails.setClientSecret(\"123456\");\n        resourceDetails.setUserAuthorizationUri(urlAuthorization);\n        resourceDetails.setAccessTokenUri(urlToken);\n        return resourceDetails;\n    }\n  ```\n- Membuat Controler untuk mengakses api dari resource server\n  ```\n    @Autowired\n    private OAuth2RestOperations restOperations;\n\n    private String urlApi = \"http://localhost:8080/api/halo\";\n\n    @RequestMapping(\"/api\")\n    @ResponseBody\n    public Map<String, Object> api (){\n      Map<String, Object> hasil = restOperations.getForObject(urlApi, HashMap.class);\n      return hasil;\n    }\n  ```\n- Tambahkan konfigurasi context path dan server port\n  ```\n  server.port=9090\n  server.context-path=/authcode\n  ```\n  Keterangan :\n  membuat context-path wajib dikarenakan agar tidak terjadi error saat penyimpanan cookies\n\n# Membuat Aplikasi Client Implicit\nPertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.\nStep by Step nya adalah sebagai berikut :\n- Download Setup projek di `http://start.spring.io`\n- Isi projek metadata berupa :\n  * artifact id :\n  * groupId :\n- Isi dependency yang dubutuhkan berupa :\n  * web\n- Download lalu pindahkan ke text editor\n\n### Setting Server port dan Server Context Path\n```\n  server.port=7070\n  server.context-path=/implicit\n```\n### Membuat HTML sederhana\n```\n  <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <title>Oauth Client Implicit</title>\n  </head>\n  <body>\n      <div>\n          <h1>Oauth Client Implicit</h1>\n      </div>\n  <body>\n```\n### Setup Angular JS\n- tambahkan file angualar js ke project\n- buat file aplikasi js\n  ```\n    var app = angular.module('ImplicitApp',[]);\n    app.controller('DummyController',function(){\n    )};\n  ```\n- include ke html\n  ```\n    <body ng-app=\"ImplicitApp\">\n    <div ng-controller=\"DummyController\">\n        <h1>Oauth Client Implicit</h1>\n    </div>\n\n    <script src=\"js/angular.min.js\"></script>\n    <script src=\"js/aplikasi.js\"></script>\n  </body>\n  ```\n- test angular js\n  ```\n    <div ng-controller=\"DummyController\">\n        <h1>Oauth Client Implicit</h1>\n        Masukkan Nama Anda : <input type=\"text\" ng-model=\"nama\"><br>\n        Selamat Datang  {{nama}}\n    </div>\n  ```\n### Impicit Client\n- angular js\n```\n  app.controller('DummyController',function($http, $scope, $window, $location){\n      var urlResourceServer = \"http://localhost:8080/api/halo\";\n      var urlAuthServer = \"http://localhost:10000/oauth/authorize?client_id=jsclient&response_type=token\";\n\n      $scope.bukaLoginPage = function () {\n          $window.location.href = urlAuthServer;\n      };\n\n      $scope.ambilTokenDariServer = function () {\n          var location = $location.url(); /// ngambil hash yang isinya #access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d&token_type=bearer&expires_in=86399&scope=read%20write\n          console.log(\"Location : \"+location);\n          var params = location.split(\"&\");///jadi array yang isinya [access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d , token_type=bearer , expires_in=86399 , scope=read%20write]\n          console.log(\"Param : \"+params);\n          var tokenParam = params[0];///ambile param indek ke 0 yaitu access token\n          console.log(\"token Param : \"+tokenParam);\n          var token = tokenParam.split(\"=\")[1];\n          console.log(\"token : \"+token);\n          $window.sessionStorage.setItem('token',token);\n      };\n\n      $scope.requestKeResourceServer = function () {\n\n          var token = $window.sessionStorage.getItem('token');\n          if (!token){\n              alert('Belum Login');\n              return;\n          }\n          $http.get(urlResourceServer+\"?access_token=\"+token).then(\n              function (response) {\n                  $scope.responseDariServer = response.data;\n              },\n              function (response) {\n                  alert('Error Code'+response.status+', Error Text : '+response.statusText);\n              }\n          );\n      };\n  });\n```\n- html\n```\n  <div ng-controller=\"DummyController\">\n      <h1>Oauth Client Implicit</h1>\n      Masukkan Nama Anda : <input type=\"text\" ng-model=\"nama\"><br>\n      Selamat Datang  {{nama}}\n\n      <hr>\n\n      <button ng-click=\"bukaLoginPage()\">Login ke Server</button>\n      <button ng-click=\"ambilTokenDariServer()\">Ambil Token dari Server</button>\n\n      <hr>\n\n      <button ng-click=\"requestKeResourceServer()\">Merequest ke Resource Server</button>\n      <div>\n          {{responseDariServer}}\n      </div>\n  </div>\n```\n- Note\nUntuk mengatasi masalah CORS pastikan api anda telah mengunakan anotasi `@CrossOrigin`\n","source":"_posts/pemrograman/spring/security/5-oauth2-spring.md","raw":"---\ntitle: Integrasi Spring dan Oauth2 + JWT\ndate: 2017-05-27 15:30:21\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n# Gambaran Umum\nAplikasi yang akan kita buat nantinya akan dibagi menjadi beberapa aplikasi kecil dengan fungsinya masing-masing. Diantaranya adalah :\n- Resource Server. Aplikasi ini menyediakan resource yang dibutuhkan oleh user.\n- Authorization Server. Aplikasi ini menyediakan layanan otorisasi.\n- Aplikasi Client. Aplikasi yang dipakai oleh client. Dapat berupa aplikasi web ataupun native.\n\n## Konfigurasi Resource Server ##\n- Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)\n  ```xml\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n    <dependency>\n\t\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t\t<artifactId>spring-security-jwt</artifactId>\n\t\t</dependency>\n  ```\n- Buat class KonfigurasiResourceServer (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java)\n  ```java\n  @EnableResourceServer\n  public class KonfigurasiResourceServer extends ResourceServerConfigurerAdapter{\n\n  }\n  ```\n- override methode untuk authorisasi (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java/ResourceServerConfiguration).\n  ```java\n  @Override\n  public void configure(HttpSecurity http) throws Exception {\n      http.authorizeRequests().anyRequest().authenticated()\n      ;\n  }\n  ```\n- Konfigurasi JWT\n  ```yml\n  security.oauth2.resource.jwt.key-uri=http://localhost:10000/oauth/token_key\n  ```\n## Konfigurasi Authorization Server ##\n- Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)\n  ```xml\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n    <dependency>\n\t\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t\t<artifactId>spring-security-jwt</artifactId>\n\t\t</dependency>\n  ```\n- setup port (auth-server/src/main/resources/application.properties)\n  ```yml\n    server.port=10000\n  ```\n- setup session cookies(auth-server/src/main/resources/application.properties)\n```yml\nserver.session.cookie.name=AUTHSERVER\n```\n- membuat class KonfigurasiAuthorizationServer (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java)\n  ```java\n    @Configuration\n    public class KonfigurasiAuthorizationServer {\n\n    }\n  ```\n- Membuat inner class\n- Setup AuthenticationManager\n  ```\n    @Autowired\n    @Qualifier(\"authenticationManagerBean\")\n    private AuthenticationManager authenticationManager;\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menyimpan token yang nanti akan di cek kembali\n  ```\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints)\n            throws Exception {\n        endpoints\n                .tokenStore(new InMemoryTokenStore())\n                .authenticationManager(authenticationManager);\n    }\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menentukan role apa saja yang dapat mendapat mengakses check token\n  ```\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {\n        oauthServer.checkTokenAccess(\"hasRole('CLIENT')\");\n    }\n  ```\n- Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berisi list role client berasarkan grant tye\n  ```\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n      clients\n        .inMemory()\n        .withClient(\"clientauthcode\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"authorization_code\",\"refresh_token\")\n          .authorities(\"CLIENT\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)\n        .and()\n        .withClient(\"clientcred\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"client_credentials\")\n          .scopes(\"trust\")\n          .resourceIds(RESOURCE_ID)\n        .and()\n        .withClient(\"clientapp\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"password\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)  \n        .and()\n        .withClient(\"jsclient\")\n          .secret(\"123456\")\n          .authorizedGrantTypes(\"implicit\")\n          .authorities(\"CLIENT\")\n          .scopes(\"read\",\"write\")\n          .resourceIds(RESOURCE_ID)\n          .redirectUris(\"http://localhost:20000/implicit-client\")\n          .accessTokenValiditySeconds(60* 60 *24)\n          .autoApprove(true);\n    }\n  ```\n- Konfigurasi Security (auth-server/src/main/java/domain/config/KonfigurasiSecurity)\n  ```\n    @Override\n        @Bean\n        public AuthenticationManager authenticationManagerBean() throws Exception {\n            return super.authenticationManagerBean();\n        }\n  ```\n\n\n# Flow untuk masing masing role clint #\nPerlu diketahui authorization server akan jalan di port 10000 dan resource server akan jalan di port 8080. OAuth 2 sendiri menyediakan 4 role yaitu :\n- Authorization Code (Akses yang dalam mendapatkan resource memerlukan kode)\n- Username Password\n- Client Credential (Akses yang memungkinkan client tidak perlu login untuk mendapatkan akses)\n- Client Impicit (Akses yang biasanya digunakan untuk mendapatkan resource berupa js)\n\n## Authorization Code ##\nKarena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url\n  ```\n    http://localhost:10000/oauth/authorize?client_id=clientauthcode&response_type=code&redirect_uri=http://localhost:8080/api/halo\n  ```\n  Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu `clientauthcode`, response_type berupa `code` dan ingin request ke `http://localhost:8080/api/halo`\n- Kita akan langsung di redirect ke `http://localhost:10000/login`. Kita diminta untuk memasukkan otorisasi login\n- Lalu akan muncul form approval dengan scope `read` dan `write`, untuk approval ini dapat dikonfigurasi agar tidak tampil atau otomatis authorize.\n- Lalu akan muncul url sebagai berikut\n  ```\n    http://localhost:8080/api/halo?code=Ixd8e\n  ```\n  Kemudian kita ambil code tersebut\n- Lalu ditukarkan kode tersebut dengan access token dengan cara mengakses kembali ke auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientauthcode` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- grant_type berupa `authorization_code`\n  \t- code berupa `Ixd8e`\n  \t- redirect_uri berupa `http://localhost:8080/api/halo`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - refresh_token : `baba`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Lalu akses ke resource server dengan menambahkan access token yang telah kita dapatkan tadi dengan url `http://localhost:8080/api/halo?access_token=blablabla`\n- Selamat anda sudah dapat mengakses resource.\n\tSebenarnya sebelum token mendapatkan resource tersebut resource server melakukan pengecekan ke authorization server terhadap acces token tadi apakah valid atau tidak.Namun perlu diketahui bahwa saat ini kedua aplikasi berjalan di port yang berbeda (auth server port 10000, dan resource server di port 8080) sehingga tidak dapat sharing token via memory.\nSolusinya adalah :\n- Token tadi akan disimpan ke database menggunakan jdbc token store oleh auth server. Lalu resource server akan diarahkan ke database tersebut. Tetapi ada kalanya resource server tidak dapat mendapatkan akses ke database.\n- Menggunakan RemoteTokenServices yang ada pada setting KonfigurasiResourceServer\n  ```\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        RemoteTokenServices tokenService = new RemoteTokenServices();\n        tokenService.setClientId(\"clientauthcode\");\n        tokenService.setClientSecret(\"123456\");\n        tokenService.setCheckTokenEndpointUrl(\"http://localhost:10000/oauth/check_token\");\n        resources\n                .resourceId(RESOURCE_ID)\n                .tokenServices(tokenService);\n    }\n  ```\n  resource server akan mengarahkan ke url `http://localhost:10000/oauth/check_token` dengan menambahkan client id berupa `clientauthcode`, secret berupa `123456` dan access_token menggunakn methode GET. sehingga resource server mendapat data sebagai berikut :\n  - rid :  `belajar`\n  - exp : `14441`\n  - username : `endy`\n  - authorities : `[ROLE_OPERATOR]`,`[ROLE_SUPERVISOR]`\n  - client_id : `clientauthcode`\n  - scope : `read`,`write`\n  dari sini resource server tahu role dari user tersebut dan dapat memutuskan user tersebut dapat mengakses resource tersebut atau tidak\n\n## Username Password ##\n- Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientapp` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientapp`\n  \t- grant_type berupa `password`\n  \t- username berupa `endy`\n    - password berupa `123`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  - client_id berupa `clientapp` dan secret `123456` dan authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n- Selamat anda sudah dapat mengakses resource.\n\n## Client Credential ##\n- Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `POST`\n  - client_id berupa `clientcred` dan secret `123456`\n  - Url berupa `http://localhost:10000/oauth/token`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientcred`\n  \t- grant_type berupa `client_credentials`\n- Setelah itu kita akan mendapatkan data sebagai berikut :\n  - access_token : `blablabla`\n  - token_type : `bearer`\n  - expires_in : `43199`\n  - scope : `read`,`write`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  - client_id berupa `clientcred` dan secret `123456` dan authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n  - data yaitu:\n  \t- client_id berupa `clientcred`\n- Perlu diketahui karena client cred ini tidak menggunakan username dan password maka dia tidak dapat digunakan dalam aplikasi ini karena resource server telah kita setting hanya untuk menerima authentifikasi dari user dengan role operator.\n\n## Implicit Client ##\n- Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url\n  ```\n    http://localhost:10000/oauth/authorize?client_id=jsclient&response_type=token&redirect_uri=http://localhost:2000/implicit-client\n  ```\n  Note : url tersebut akan diproses oleh auth server (http://localhost:10000/oauth/authorize) dengan parameter client_id yaitu `jsclient`, response_type berupa `token` dan ingin request ke `http://localhost:2000/implicit-client`\n- Kita akan langsung di redirect ke `http://localhost:10000/login`. Kita diminta untuk memasukkan otorisasi login\n- Selanjutnya kita akan mendapatkan url `http://localhost:2000/implicit-client/#access_token=blabla&token_type=bearer`\n- Kemudian Kita akses auth server dengan mencantumkan\n  - Methode HTTP berupa `GET`\n  authorization header `Bearer blablabla`\n  - Url berupa `http://localhost:8080/api/halo`\n  - Header berupa `application/json`\n\n# Mendapatkan Informasi User #\n- Pertama class buat controller(resource-server/src/main/java/domain/controller/InfoController)\n  ```\n    @RestController\n    @EnableResourceServer\n    public class InfoController{\n\n    }\n  ```\n- Buat methode untuk mengakses info user\n  ```\n    @RequestMapping(\"/userinfo\")\n    public Principal user info (Principal principal){\n      return principal;\n    }\n  ```\n- Untuk mengaksesnya kita login dulu dengan menggunakan grant type clientauthcode sampai kita mendapatkan access tokenya\n- Setelah mendapatkanya masukkan url `http://localhost:8080/userinfo?access_token=blabla`\n\n# Membuat Aplikasi Client Auhtorization Code#\nPertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.\nStep by Step nya adalah sebagai berikut :\n- Download Setup projek di `http://start.spring.io`\n- Isi projek metadata berupa :\n  * artifact id :\n  * groupId :\n- Isi dependency yang dubutuhkan berupa :\n  * web\n  * thymeleaf\n- Download lalu pindahkan ke text editor\n- Kita coba bikin Controller sebagi resources (client-authcode/src/main/java/domain/controller/InfoController)\n  ```\n    @Controller\n    public class InfoController {\n\n\n    }\n  ```\n- Kita bikin methode untuk di proses ke user. Methode ini akan mengembalikan waktu sekarang menggunakan variabel `waktu`. methode ini dapat diakses di url /halo.(client-authcode/src/main/java/domain/controller/InfoController)\n  ```\n    @RequestMapping(\"/info\")\n    public void info(Model m){\n      m.addAttribute(\"waktu\", new Date().toString());\n    }\n  ```\n- Kita bikin UI untuk mengeluarkan informasi dari methode halo yang telah buat tadi.(client-authcode/src/main/resources/templates/halo.html)\n  ```\n    <html>\n        <head>\n            <title>Halo Spring Boot</title>\n        </head>\n        <body>\n            <h1>Halo Spring Boot</h1>\n            <h2>Waktu saat ini : <span th:text=\"${waktu}\"></span></h2>\n        </body>\n    </html>\n  ```\n## Proteksi Client Authorization Code Dengan Spring Security\n- Lalu coba kita proteksi Resource Server kita menggunakan Spring Security dengan menambahkan dependency di pom.xml. (client-authcode/pom.xml)\n  ```\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>2.0.7.RELEASE</version>\n    </dependency>\n  ```\n  Pada keadaan ini kita akan diminta otorisasi jika kita mengakses di browser dengan username : `user` dan password yang ada pada CLI. karena tidak efisien mengabaikan otorisasi.\n- Buat class untuk konfigurasi otorisasi (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity)\n  ```\n    @Configuration\n    public class KonfigurasiSecurity  extends WebSecurityConfigurerAdapter {\n\n    }\n  ```\n- Override methode configure (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity). Methode untuk mengabaikan otorisasi\n  ```\n    @Override\n    public void configure (WebSecurity web) throws Exception{\n      web.ignoring().anyRequest();\n    }\n  ```\n- Buat class untuk konfigurasi OAuth Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client).\n  ```\n    @Configuration\n    @EnableOAuth2Client\n    public class KonfigurasiOauth2Client{\n\n    }\n  ```\n- Konfigurasi untuk Oauth2 Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client)\n  ```\n    private String urlAuthorization = \"http://localhost:10000/oauth/authorize\";\n    private String urlToken = \"http://localhost:10000/oauth/token\";\n\n    @Bean\n    public OAuth2RestOperations restOperations(OAuth2ClientContext context){\n        OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource(),context);\n        return restTemplate;\n    }\n\n    @Bean\n    public OAuth2ProtectedResourceDetails resource(){\n        AuthorizationCodeResourceDetails resourceDetails= new AuthorizationCodeResourceDetails();\n        resourceDetails.setClientId(\"clientauthcode\");\n        resourceDetails.setClientSecret(\"123456\");\n        resourceDetails.setUserAuthorizationUri(urlAuthorization);\n        resourceDetails.setAccessTokenUri(urlToken);\n        return resourceDetails;\n    }\n  ```\n- Membuat Controler untuk mengakses api dari resource server\n  ```\n    @Autowired\n    private OAuth2RestOperations restOperations;\n\n    private String urlApi = \"http://localhost:8080/api/halo\";\n\n    @RequestMapping(\"/api\")\n    @ResponseBody\n    public Map<String, Object> api (){\n      Map<String, Object> hasil = restOperations.getForObject(urlApi, HashMap.class);\n      return hasil;\n    }\n  ```\n- Tambahkan konfigurasi context path dan server port\n  ```\n  server.port=9090\n  server.context-path=/authcode\n  ```\n  Keterangan :\n  membuat context-path wajib dikarenakan agar tidak terjadi error saat penyimpanan cookies\n\n# Membuat Aplikasi Client Implicit\nPertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.\nStep by Step nya adalah sebagai berikut :\n- Download Setup projek di `http://start.spring.io`\n- Isi projek metadata berupa :\n  * artifact id :\n  * groupId :\n- Isi dependency yang dubutuhkan berupa :\n  * web\n- Download lalu pindahkan ke text editor\n\n### Setting Server port dan Server Context Path\n```\n  server.port=7070\n  server.context-path=/implicit\n```\n### Membuat HTML sederhana\n```\n  <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <title>Oauth Client Implicit</title>\n  </head>\n  <body>\n      <div>\n          <h1>Oauth Client Implicit</h1>\n      </div>\n  <body>\n```\n### Setup Angular JS\n- tambahkan file angualar js ke project\n- buat file aplikasi js\n  ```\n    var app = angular.module('ImplicitApp',[]);\n    app.controller('DummyController',function(){\n    )};\n  ```\n- include ke html\n  ```\n    <body ng-app=\"ImplicitApp\">\n    <div ng-controller=\"DummyController\">\n        <h1>Oauth Client Implicit</h1>\n    </div>\n\n    <script src=\"js/angular.min.js\"></script>\n    <script src=\"js/aplikasi.js\"></script>\n  </body>\n  ```\n- test angular js\n  ```\n    <div ng-controller=\"DummyController\">\n        <h1>Oauth Client Implicit</h1>\n        Masukkan Nama Anda : <input type=\"text\" ng-model=\"nama\"><br>\n        Selamat Datang  {{nama}}\n    </div>\n  ```\n### Impicit Client\n- angular js\n```\n  app.controller('DummyController',function($http, $scope, $window, $location){\n      var urlResourceServer = \"http://localhost:8080/api/halo\";\n      var urlAuthServer = \"http://localhost:10000/oauth/authorize?client_id=jsclient&response_type=token\";\n\n      $scope.bukaLoginPage = function () {\n          $window.location.href = urlAuthServer;\n      };\n\n      $scope.ambilTokenDariServer = function () {\n          var location = $location.url(); /// ngambil hash yang isinya #access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d&token_type=bearer&expires_in=86399&scope=read%20write\n          console.log(\"Location : \"+location);\n          var params = location.split(\"&\");///jadi array yang isinya [access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d , token_type=bearer , expires_in=86399 , scope=read%20write]\n          console.log(\"Param : \"+params);\n          var tokenParam = params[0];///ambile param indek ke 0 yaitu access token\n          console.log(\"token Param : \"+tokenParam);\n          var token = tokenParam.split(\"=\")[1];\n          console.log(\"token : \"+token);\n          $window.sessionStorage.setItem('token',token);\n      };\n\n      $scope.requestKeResourceServer = function () {\n\n          var token = $window.sessionStorage.getItem('token');\n          if (!token){\n              alert('Belum Login');\n              return;\n          }\n          $http.get(urlResourceServer+\"?access_token=\"+token).then(\n              function (response) {\n                  $scope.responseDariServer = response.data;\n              },\n              function (response) {\n                  alert('Error Code'+response.status+', Error Text : '+response.statusText);\n              }\n          );\n      };\n  });\n```\n- html\n```\n  <div ng-controller=\"DummyController\">\n      <h1>Oauth Client Implicit</h1>\n      Masukkan Nama Anda : <input type=\"text\" ng-model=\"nama\"><br>\n      Selamat Datang  {{nama}}\n\n      <hr>\n\n      <button ng-click=\"bukaLoginPage()\">Login ke Server</button>\n      <button ng-click=\"ambilTokenDariServer()\">Ambil Token dari Server</button>\n\n      <hr>\n\n      <button ng-click=\"requestKeResourceServer()\">Merequest ke Resource Server</button>\n      <div>\n          {{responseDariServer}}\n      </div>\n  </div>\n```\n- Note\nUntuk mengatasi masalah CORS pastikan api anda telah mengunakan anotasi `@CrossOrigin`\n","slug":"pemrograman/spring/security/5-oauth2-spring","published":1,"updated":"2017-05-28T09:46:58.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnn80042islp89sw7dg9","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Gambaran-Umum\"><a href=\"#Gambaran-Umum\" class=\"headerlink\" title=\"Gambaran Umum\"></a>Gambaran Umum</h1><p>Aplikasi yang akan kita buat nantinya akan dibagi menjadi beberapa aplikasi kecil dengan fungsinya masing-masing. Diantaranya adalah :</p>\n<ul>\n<li>Resource Server. Aplikasi ini menyediakan resource yang dibutuhkan oleh user.</li>\n<li>Authorization Server. Aplikasi ini menyediakan layanan otorisasi.</li>\n<li>Aplikasi Client. Aplikasi yang dipakai oleh client. Dapat berupa aplikasi web ataupun native.</li>\n</ul>\n<h2 id=\"Konfigurasi-Resource-Server\"><a href=\"#Konfigurasi-Resource-Server\" class=\"headerlink\" title=\"Konfigurasi Resource Server\"></a>Konfigurasi Resource Server</h2><ul>\n<li><p>Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat class KonfigurasiResourceServer (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiResourceServer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>override methode untuk authorisasi (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java/ResourceServerConfiguration).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    http.authorizeRequests().anyRequest().authenticated()</div><div class=\"line\">    ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi JWT</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">security.oauth2.resource.jwt.key-uri=http://localhost:10000/oauth/token_key</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Konfigurasi-Authorization-Server\"><a href=\"#Konfigurasi-Authorization-Server\" class=\"headerlink\" title=\"Konfigurasi Authorization Server\"></a>Konfigurasi Authorization Server</h2><ul>\n<li><p>Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>setup port (auth-server/src/main/resources/application.properties)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">server.port=10000</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>setup session cookies(auth-server/src/main/resources/application.properties)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">server.session.cookie.name=AUTHSERVER</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat class KonfigurasiAuthorizationServer (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiAuthorizationServer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat inner class</p>\n</li>\n<li><p>Setup AuthenticationManager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">@Qualifier(&quot;authenticationManagerBean&quot;)</div><div class=\"line\">private AuthenticationManager authenticationManager;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menyimpan token yang nanti akan di cek kembali</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(AuthorizationServerEndpointsConfigurer endpoints)</div><div class=\"line\">        throws Exception &#123;</div><div class=\"line\">    endpoints</div><div class=\"line\">            .tokenStore(new InMemoryTokenStore())</div><div class=\"line\">            .authenticationManager(authenticationManager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menentukan role apa saja yang dapat mendapat mengakses check token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception &#123;</div><div class=\"line\">    oauthServer.checkTokenAccess(&quot;hasRole(&apos;CLIENT&apos;)&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berisi list role client berasarkan grant tye</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</div><div class=\"line\">  clients</div><div class=\"line\">    .inMemory()</div><div class=\"line\">    .withClient(&quot;clientauthcode&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;refresh_token&quot;)</div><div class=\"line\">      .authorities(&quot;CLIENT&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;clientcred&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;client_credentials&quot;)</div><div class=\"line\">      .scopes(&quot;trust&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;clientapp&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;password&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)  </div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;jsclient&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;implicit&quot;)</div><div class=\"line\">      .authorities(&quot;CLIENT&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">      .redirectUris(&quot;http://localhost:20000/implicit-client&quot;)</div><div class=\"line\">      .accessTokenValiditySeconds(60* 60 *24)</div><div class=\"line\">      .autoApprove(true);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi Security (auth-server/src/main/java/domain/config/KonfigurasiSecurity)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">    @Bean</div><div class=\"line\">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</div><div class=\"line\">        return super.authenticationManagerBean();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Flow-untuk-masing-masing-role-clint\"><a href=\"#Flow-untuk-masing-masing-role-clint\" class=\"headerlink\" title=\"Flow untuk masing masing role clint\"></a>Flow untuk masing masing role clint</h1><p>Perlu diketahui authorization server akan jalan di port 10000 dan resource server akan jalan di port 8080. OAuth 2 sendiri menyediakan 4 role yaitu :</p>\n<ul>\n<li>Authorization Code (Akses yang dalam mendapatkan resource memerlukan kode)</li>\n<li>Username Password</li>\n<li>Client Credential (Akses yang memungkinkan client tidak perlu login untuk mendapatkan akses)</li>\n<li>Client Impicit (Akses yang biasanya digunakan untuk mendapatkan resource berupa js)</li>\n</ul>\n<h2 id=\"Authorization-Code\"><a href=\"#Authorization-Code\" class=\"headerlink\" title=\"Authorization Code\"></a>Authorization Code</h2><p>Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:10000/oauth/authorize?client_id=clientauthcode&amp;response_type=code&amp;redirect_uri=http://localhost:8080/api/halo</div></pre></td></tr></table></figure></p>\n<p>  Note : url tersebut akan diproses oleh auth server (<a href=\"http://localhost:10000/oauth/authorize\" target=\"_blank\" rel=\"external\">http://localhost:10000/oauth/authorize</a>) dengan parameter client_id yaitu <code>clientauthcode</code>, response_type berupa <code>code</code> dan ingin request ke <code>http://localhost:8080/api/halo</code></p>\n<ul>\n<li>Kita akan langsung di redirect ke <code>http://localhost:10000/login</code>. Kita diminta untuk memasukkan otorisasi login</li>\n<li>Lalu akan muncul form approval dengan scope <code>read</code> dan <code>write</code>, untuk approval ini dapat dikonfigurasi agar tidak tampil atau otomatis authorize.</li>\n<li><p>Lalu akan muncul url sebagai berikut</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/api/halo?code=Ixd8e</div></pre></td></tr></table></figure>\n<p>Kemudian kita ambil code tersebut</p>\n</li>\n<li>Lalu ditukarkan kode tersebut dengan access token dengan cara mengakses kembali ke auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientauthcode</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>grant_type berupa <code>authorization_code</code></li>\n<li>code berupa <code>Ixd8e</code></li>\n<li>redirect_uri berupa <code>http://localhost:8080/api/halo</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>refresh_token : <code>baba</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Lalu akses ke resource server dengan menambahkan access token yang telah kita dapatkan tadi dengan url <code>http://localhost:8080/api/halo?access_token=blablabla</code></li>\n<li>Selamat anda sudah dapat mengakses resource.<br>  Sebenarnya sebelum token mendapatkan resource tersebut resource server melakukan pengecekan ke authorization server terhadap acces token tadi apakah valid atau tidak.Namun perlu diketahui bahwa saat ini kedua aplikasi berjalan di port yang berbeda (auth server port 10000, dan resource server di port 8080) sehingga tidak dapat sharing token via memory.<br>Solusinya adalah :</li>\n<li>Token tadi akan disimpan ke database menggunakan jdbc token store oleh auth server. Lalu resource server akan diarahkan ke database tersebut. Tetapi ada kalanya resource server tidak dapat mendapatkan akses ke database.</li>\n<li><p>Menggunakan RemoteTokenServices yang ada pada setting KonfigurasiResourceServer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(ResourceServerSecurityConfigurer resources) &#123;</div><div class=\"line\">    RemoteTokenServices tokenService = new RemoteTokenServices();</div><div class=\"line\">    tokenService.setClientId(&quot;clientauthcode&quot;);</div><div class=\"line\">    tokenService.setClientSecret(&quot;123456&quot;);</div><div class=\"line\">    tokenService.setCheckTokenEndpointUrl(&quot;http://localhost:10000/oauth/check_token&quot;);</div><div class=\"line\">    resources</div><div class=\"line\">            .resourceId(RESOURCE_ID)</div><div class=\"line\">            .tokenServices(tokenService);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resource server akan mengarahkan ke url <code>http://localhost:10000/oauth/check_token</code> dengan menambahkan client id berupa <code>clientauthcode</code>, secret berupa <code>123456</code> dan access_token menggunakn methode GET. sehingga resource server mendapat data sebagai berikut :</p>\n<ul>\n<li>rid :  <code>belajar</code></li>\n<li>exp : <code>14441</code></li>\n<li>username : <code>endy</code></li>\n<li>authorities : <code>[ROLE_OPERATOR]</code>,<code>[ROLE_SUPERVISOR]</code></li>\n<li>client_id : <code>clientauthcode</code></li>\n<li>scope : <code>read</code>,<code>write</code><br>dari sini resource server tahu role dari user tersebut dan dapat memutuskan user tersebut dapat mengakses resource tersebut atau tidak</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Username-Password\"><a href=\"#Username-Password\" class=\"headerlink\" title=\"Username Password\"></a>Username Password</h2><ul>\n<li>Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientapp</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientapp</code></li>\n<li>grant_type berupa <code>password</code></li>\n<li>username berupa <code>endy</code><ul>\n<li>password berupa <code>123</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code></li>\n<li>client_id berupa <code>clientapp</code> dan secret <code>123456</code> dan authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n</ul>\n</li>\n<li>Selamat anda sudah dapat mengakses resource.</li>\n</ul>\n<h2 id=\"Client-Credential\"><a href=\"#Client-Credential\" class=\"headerlink\" title=\"Client Credential\"></a>Client Credential</h2><ul>\n<li>Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientcred</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientcred</code></li>\n<li>grant_type berupa <code>client_credentials</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code></li>\n<li>client_id berupa <code>clientcred</code> dan secret <code>123456</code> dan authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientcred</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Perlu diketahui karena client cred ini tidak menggunakan username dan password maka dia tidak dapat digunakan dalam aplikasi ini karena resource server telah kita setting hanya untuk menerima authentifikasi dari user dengan role operator.</li>\n</ul>\n<h2 id=\"Implicit-Client\"><a href=\"#Implicit-Client\" class=\"headerlink\" title=\"Implicit Client\"></a>Implicit Client</h2><ul>\n<li><p>Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&amp;redirect_uri=http://localhost:2000/implicit-client</div></pre></td></tr></table></figure>\n<p>Note : url tersebut akan diproses oleh auth server (<a href=\"http://localhost:10000/oauth/authorize\" target=\"_blank\" rel=\"external\">http://localhost:10000/oauth/authorize</a>) dengan parameter client_id yaitu <code>jsclient</code>, response_type berupa <code>token</code> dan ingin request ke <code>http://localhost:2000/implicit-client</code></p>\n</li>\n<li>Kita akan langsung di redirect ke <code>http://localhost:10000/login</code>. Kita diminta untuk memasukkan otorisasi login</li>\n<li>Selanjutnya kita akan mendapatkan url <code>http://localhost:2000/implicit-client/#access_token=blabla&amp;token_type=bearer</code></li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code><br>authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Mendapatkan-Informasi-User\"><a href=\"#Mendapatkan-Informasi-User\" class=\"headerlink\" title=\"Mendapatkan Informasi User\"></a>Mendapatkan Informasi User</h1><ul>\n<li><p>Pertama class buat controller(resource-server/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@EnableResourceServer</div><div class=\"line\">public class InfoController&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode untuk mengakses info user</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(&quot;/userinfo&quot;)</div><div class=\"line\">public Principal user info (Principal principal)&#123;</div><div class=\"line\">  return principal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Untuk mengaksesnya kita login dulu dengan menggunakan grant type clientauthcode sampai kita mendapatkan access tokenya</p>\n</li>\n<li>Setelah mendapatkanya masukkan url <code>http://localhost:8080/userinfo?access_token=blabla</code></li>\n</ul>\n<h1 id=\"Membuat-Aplikasi-Client-Auhtorization-Code\"><a href=\"#Membuat-Aplikasi-Client-Auhtorization-Code\" class=\"headerlink\" title=\"Membuat Aplikasi Client Auhtorization Code\"></a>Membuat Aplikasi Client Auhtorization Code</h1><p>Pertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.<br>Step by Step nya adalah sebagai berikut :</p>\n<ul>\n<li>Download Setup projek di <code>http://start.spring.io</code></li>\n<li>Isi projek metadata berupa :<ul>\n<li>artifact id :</li>\n<li>groupId :</li>\n</ul>\n</li>\n<li>Isi dependency yang dubutuhkan berupa :<ul>\n<li>web</li>\n<li>thymeleaf</li>\n</ul>\n</li>\n<li>Download lalu pindahkan ke text editor</li>\n<li><p>Kita coba bikin Controller sebagi resources (client-authcode/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">public class InfoController &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kita bikin methode untuk di proses ke user. Methode ini akan mengembalikan waktu sekarang menggunakan variabel <code>waktu</code>. methode ini dapat diakses di url /halo.(client-authcode/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(&quot;/info&quot;)</div><div class=\"line\">public void info(Model m)&#123;</div><div class=\"line\">  m.addAttribute(&quot;waktu&quot;, new Date().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kita bikin UI untuk mengeluarkan informasi dari methode halo yang telah buat tadi.(client-authcode/src/main/resources/templates/halo.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;Halo Spring Boot&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;h1&gt;Halo Spring Boot&lt;/h1&gt;</div><div class=\"line\">        &lt;h2&gt;Waktu saat ini : &lt;span th:text=&quot;$&#123;waktu&#125;&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Proteksi-Client-Authorization-Code-Dengan-Spring-Security\"><a href=\"#Proteksi-Client-Authorization-Code-Dengan-Spring-Security\" class=\"headerlink\" title=\"Proteksi Client Authorization Code Dengan Spring Security\"></a>Proteksi Client Authorization Code Dengan Spring Security</h2><ul>\n<li><p>Lalu coba kita proteksi Resource Server kita menggunakan Spring Security dengan menambahkan dependency di pom.xml. (client-authcode/pom.xml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>Pada keadaan ini kita akan diminta otorisasi jika kita mengakses di browser dengan username : <code>user</code> dan password yang ada pada CLI. karena tidak efisien mengabaikan otorisasi.</p>\n</li>\n<li><p>Buat class untuk konfigurasi otorisasi (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration</div><div class=\"line\">public class KonfigurasiSecurity  extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Override methode configure (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity). Methode untuk mengabaikan otorisasi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure (WebSecurity web) throws Exception&#123;</div><div class=\"line\">  web.ignoring().anyRequest();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat class untuk konfigurasi OAuth Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration</div><div class=\"line\">@EnableOAuth2Client</div><div class=\"line\">public class KonfigurasiOauth2Client&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi untuk Oauth2 Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private String urlAuthorization = &quot;http://localhost:10000/oauth/authorize&quot;;</div><div class=\"line\">private String urlToken = &quot;http://localhost:10000/oauth/token&quot;;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">public OAuth2RestOperations restOperations(OAuth2ClientContext context)&#123;</div><div class=\"line\">    OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource(),context);</div><div class=\"line\">    return restTemplate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">public OAuth2ProtectedResourceDetails resource()&#123;</div><div class=\"line\">    AuthorizationCodeResourceDetails resourceDetails= new AuthorizationCodeResourceDetails();</div><div class=\"line\">    resourceDetails.setClientId(&quot;clientauthcode&quot;);</div><div class=\"line\">    resourceDetails.setClientSecret(&quot;123456&quot;);</div><div class=\"line\">    resourceDetails.setUserAuthorizationUri(urlAuthorization);</div><div class=\"line\">    resourceDetails.setAccessTokenUri(urlToken);</div><div class=\"line\">    return resourceDetails;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat Controler untuk mengakses api dari resource server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private OAuth2RestOperations restOperations;</div><div class=\"line\"></div><div class=\"line\">private String urlApi = &quot;http://localhost:8080/api/halo&quot;;</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(&quot;/api&quot;)</div><div class=\"line\">@ResponseBody</div><div class=\"line\">public Map&lt;String, Object&gt; api ()&#123;</div><div class=\"line\">  Map&lt;String, Object&gt; hasil = restOperations.getForObject(urlApi, HashMap.class);</div><div class=\"line\">  return hasil;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambahkan konfigurasi context path dan server port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=9090</div><div class=\"line\">server.context-path=/authcode</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>membuat context-path wajib dikarenakan agar tidak terjadi error saat penyimpanan cookies</p>\n</li>\n</ul>\n<h1 id=\"Membuat-Aplikasi-Client-Implicit\"><a href=\"#Membuat-Aplikasi-Client-Implicit\" class=\"headerlink\" title=\"Membuat Aplikasi Client Implicit\"></a>Membuat Aplikasi Client Implicit</h1><p>Pertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.<br>Step by Step nya adalah sebagai berikut :</p>\n<ul>\n<li>Download Setup projek di <code>http://start.spring.io</code></li>\n<li>Isi projek metadata berupa :<ul>\n<li>artifact id :</li>\n<li>groupId :</li>\n</ul>\n</li>\n<li>Isi dependency yang dubutuhkan berupa :<ul>\n<li>web</li>\n</ul>\n</li>\n<li>Download lalu pindahkan ke text editor</li>\n</ul>\n<h3 id=\"Setting-Server-port-dan-Server-Context-Path\"><a href=\"#Setting-Server-port-dan-Server-Context-Path\" class=\"headerlink\" title=\"Setting Server port dan Server Context Path\"></a>Setting Server port dan Server Context Path</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=7070</div><div class=\"line\">server.context-path=/implicit</div></pre></td></tr></table></figure>\n<h3 id=\"Membuat-HTML-sederhana\"><a href=\"#Membuat-HTML-sederhana\" class=\"headerlink\" title=\"Membuat HTML sederhana\"></a>Membuat HTML sederhana</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Oauth Client Implicit&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Setup-Angular-JS\"><a href=\"#Setup-Angular-JS\" class=\"headerlink\" title=\"Setup Angular JS\"></a>Setup Angular JS</h3><ul>\n<li>tambahkan file angualar js ke project</li>\n<li><p>buat file aplikasi js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;ImplicitApp&apos;,[]);</div><div class=\"line\">app.controller(&apos;DummyController&apos;,function()&#123;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>include ke html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &lt;body ng-app=&quot;ImplicitApp&quot;&gt;</div><div class=\"line\">  &lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">      &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;script src=&quot;js/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;script src=&quot;js/aplikasi.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>test angular js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt;</div><div class=\"line\">    Selamat Datang  &#123;&#123;nama&#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Impicit-Client\"><a href=\"#Impicit-Client\" class=\"headerlink\" title=\"Impicit Client\"></a>Impicit Client</h3><ul>\n<li><p>angular js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(&apos;DummyController&apos;,function($http, $scope, $window, $location)&#123;</div><div class=\"line\">    var urlResourceServer = &quot;http://localhost:8080/api/halo&quot;;</div><div class=\"line\">    var urlAuthServer = &quot;http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&quot;;</div><div class=\"line\"></div><div class=\"line\">    $scope.bukaLoginPage = function () &#123;</div><div class=\"line\">        $window.location.href = urlAuthServer;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $scope.ambilTokenDariServer = function () &#123;</div><div class=\"line\">        var location = $location.url(); /// ngambil hash yang isinya #access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d&amp;token_type=bearer&amp;expires_in=86399&amp;scope=read%20write</div><div class=\"line\">        console.log(&quot;Location : &quot;+location);</div><div class=\"line\">        var params = location.split(&quot;&amp;&quot;);///jadi array yang isinya [access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d , token_type=bearer , expires_in=86399 , scope=read%20write]</div><div class=\"line\">        console.log(&quot;Param : &quot;+params);</div><div class=\"line\">        var tokenParam = params[0];///ambile param indek ke 0 yaitu access token</div><div class=\"line\">        console.log(&quot;token Param : &quot;+tokenParam);</div><div class=\"line\">        var token = tokenParam.split(&quot;=&quot;)[1];</div><div class=\"line\">        console.log(&quot;token : &quot;+token);</div><div class=\"line\">        $window.sessionStorage.setItem(&apos;token&apos;,token);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $scope.requestKeResourceServer = function () &#123;</div><div class=\"line\"></div><div class=\"line\">        var token = $window.sessionStorage.getItem(&apos;token&apos;);</div><div class=\"line\">        if (!token)&#123;</div><div class=\"line\">            alert(&apos;Belum Login&apos;);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $http.get(urlResourceServer+&quot;?access_token=&quot;+token).then(</div><div class=\"line\">            function (response) &#123;</div><div class=\"line\">                $scope.responseDariServer = response.data;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            function (response) &#123;</div><div class=\"line\">                alert(&apos;Error Code&apos;+response.status+&apos;, Error Text : &apos;+response.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt;</div><div class=\"line\">    Selamat Datang  &#123;&#123;nama&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button ng-click=&quot;bukaLoginPage()&quot;&gt;Login ke Server&lt;/button&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;ambilTokenDariServer()&quot;&gt;Ambil Token dari Server&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button ng-click=&quot;requestKeResourceServer()&quot;&gt;Merequest ke Resource Server&lt;/button&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &#123;&#123;responseDariServer&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Note<br>Untuk mengatasi masalah CORS pastikan api anda telah mengunakan anotasi <code>@CrossOrigin</code></p>\n</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Gambaran-Umum\"><a href=\"#Gambaran-Umum\" class=\"headerlink\" title=\"Gambaran Umum\"></a>Gambaran Umum</h1><p>Aplikasi yang akan kita buat nantinya akan dibagi menjadi beberapa aplikasi kecil dengan fungsinya masing-masing. Diantaranya adalah :</p>\n<ul>\n<li>Resource Server. Aplikasi ini menyediakan resource yang dibutuhkan oleh user.</li>\n<li>Authorization Server. Aplikasi ini menyediakan layanan otorisasi.</li>\n<li>Aplikasi Client. Aplikasi yang dipakai oleh client. Dapat berupa aplikasi web ataupun native.</li>\n</ul>\n<h2 id=\"Konfigurasi-Resource-Server\"><a href=\"#Konfigurasi-Resource-Server\" class=\"headerlink\" title=\"Konfigurasi Resource Server\"></a>Konfigurasi Resource Server</h2><ul>\n<li><p>Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat class KonfigurasiResourceServer (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiResourceServer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>override methode untuk authorisasi (resource-server/src/main/java/domain/config/KonfigurasiResourceServer.java/ResourceServerConfiguration).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    http.authorizeRequests().anyRequest().authenticated()</div><div class=\"line\">    ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi JWT</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">security.oauth2.resource.jwt.key-uri=http://localhost:10000/oauth/token_key</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Konfigurasi-Authorization-Server\"><a href=\"#Konfigurasi-Authorization-Server\" class=\"headerlink\" title=\"Konfigurasi Authorization Server\"></a>Konfigurasi Authorization Server</h2><ul>\n<li><p>Tambahkan dependeny OAuth2 dan JWT(resource-server/pom.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>setup port (auth-server/src/main/resources/application.properties)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">server.port=10000</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>setup session cookies(auth-server/src/main/resources/application.properties)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">server.session.cookie.name=AUTHSERVER</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat class KonfigurasiAuthorizationServer (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KonfigurasiAuthorizationServer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat inner class</p>\n</li>\n<li><p>Setup AuthenticationManager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">@Qualifier(&quot;authenticationManagerBean&quot;)</div><div class=\"line\">private AuthenticationManager authenticationManager;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menyimpan token yang nanti akan di cek kembali</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(AuthorizationServerEndpointsConfigurer endpoints)</div><div class=\"line\">        throws Exception &#123;</div><div class=\"line\">    endpoints</div><div class=\"line\">            .tokenStore(new InMemoryTokenStore())</div><div class=\"line\">            .authenticationManager(authenticationManager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berfungsi untuk menentukan role apa saja yang dapat mendapat mengakses check token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception &#123;</div><div class=\"line\">    oauthServer.checkTokenAccess(&quot;hasRole(&apos;CLIENT&apos;)&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode (auth-server/src/main/java/domain/config/KonfigurasiAuthorizationServer.java/AuthorizationServerConfiguration). Methode ini berisi list role client berasarkan grant tye</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</div><div class=\"line\">  clients</div><div class=\"line\">    .inMemory()</div><div class=\"line\">    .withClient(&quot;clientauthcode&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;refresh_token&quot;)</div><div class=\"line\">      .authorities(&quot;CLIENT&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;clientcred&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;client_credentials&quot;)</div><div class=\"line\">      .scopes(&quot;trust&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;clientapp&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;password&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)  </div><div class=\"line\">    .and()</div><div class=\"line\">    .withClient(&quot;jsclient&quot;)</div><div class=\"line\">      .secret(&quot;123456&quot;)</div><div class=\"line\">      .authorizedGrantTypes(&quot;implicit&quot;)</div><div class=\"line\">      .authorities(&quot;CLIENT&quot;)</div><div class=\"line\">      .scopes(&quot;read&quot;,&quot;write&quot;)</div><div class=\"line\">      .resourceIds(RESOURCE_ID)</div><div class=\"line\">      .redirectUris(&quot;http://localhost:20000/implicit-client&quot;)</div><div class=\"line\">      .accessTokenValiditySeconds(60* 60 *24)</div><div class=\"line\">      .autoApprove(true);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi Security (auth-server/src/main/java/domain/config/KonfigurasiSecurity)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">    @Bean</div><div class=\"line\">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</div><div class=\"line\">        return super.authenticationManagerBean();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Flow-untuk-masing-masing-role-clint\"><a href=\"#Flow-untuk-masing-masing-role-clint\" class=\"headerlink\" title=\"Flow untuk masing masing role clint\"></a>Flow untuk masing masing role clint</h1><p>Perlu diketahui authorization server akan jalan di port 10000 dan resource server akan jalan di port 8080. OAuth 2 sendiri menyediakan 4 role yaitu :</p>\n<ul>\n<li>Authorization Code (Akses yang dalam mendapatkan resource memerlukan kode)</li>\n<li>Username Password</li>\n<li>Client Credential (Akses yang memungkinkan client tidak perlu login untuk mendapatkan akses)</li>\n<li>Client Impicit (Akses yang biasanya digunakan untuk mendapatkan resource berupa js)</li>\n</ul>\n<h2 id=\"Authorization-Code\"><a href=\"#Authorization-Code\" class=\"headerlink\" title=\"Authorization Code\"></a>Authorization Code</h2><p>Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:10000/oauth/authorize?client_id=clientauthcode&amp;response_type=code&amp;redirect_uri=http://localhost:8080/api/halo</div></pre></td></tr></table></figure></p>\n<p>  Note : url tersebut akan diproses oleh auth server (<a href=\"http://localhost:10000/oauth/authorize\">http://localhost:10000/oauth/authorize</a>) dengan parameter client_id yaitu <code>clientauthcode</code>, response_type berupa <code>code</code> dan ingin request ke <code>http://localhost:8080/api/halo</code></p>\n<ul>\n<li>Kita akan langsung di redirect ke <code>http://localhost:10000/login</code>. Kita diminta untuk memasukkan otorisasi login</li>\n<li>Lalu akan muncul form approval dengan scope <code>read</code> dan <code>write</code>, untuk approval ini dapat dikonfigurasi agar tidak tampil atau otomatis authorize.</li>\n<li><p>Lalu akan muncul url sebagai berikut</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/api/halo?code=Ixd8e</div></pre></td></tr></table></figure>\n<p>Kemudian kita ambil code tersebut</p>\n</li>\n<li>Lalu ditukarkan kode tersebut dengan access token dengan cara mengakses kembali ke auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientauthcode</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>grant_type berupa <code>authorization_code</code></li>\n<li>code berupa <code>Ixd8e</code></li>\n<li>redirect_uri berupa <code>http://localhost:8080/api/halo</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>refresh_token : <code>baba</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Lalu akses ke resource server dengan menambahkan access token yang telah kita dapatkan tadi dengan url <code>http://localhost:8080/api/halo?access_token=blablabla</code></li>\n<li>Selamat anda sudah dapat mengakses resource.<br>  Sebenarnya sebelum token mendapatkan resource tersebut resource server melakukan pengecekan ke authorization server terhadap acces token tadi apakah valid atau tidak.Namun perlu diketahui bahwa saat ini kedua aplikasi berjalan di port yang berbeda (auth server port 10000, dan resource server di port 8080) sehingga tidak dapat sharing token via memory.<br>Solusinya adalah :</li>\n<li>Token tadi akan disimpan ke database menggunakan jdbc token store oleh auth server. Lalu resource server akan diarahkan ke database tersebut. Tetapi ada kalanya resource server tidak dapat mendapatkan akses ke database.</li>\n<li><p>Menggunakan RemoteTokenServices yang ada pada setting KonfigurasiResourceServer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure(ResourceServerSecurityConfigurer resources) &#123;</div><div class=\"line\">    RemoteTokenServices tokenService = new RemoteTokenServices();</div><div class=\"line\">    tokenService.setClientId(&quot;clientauthcode&quot;);</div><div class=\"line\">    tokenService.setClientSecret(&quot;123456&quot;);</div><div class=\"line\">    tokenService.setCheckTokenEndpointUrl(&quot;http://localhost:10000/oauth/check_token&quot;);</div><div class=\"line\">    resources</div><div class=\"line\">            .resourceId(RESOURCE_ID)</div><div class=\"line\">            .tokenServices(tokenService);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resource server akan mengarahkan ke url <code>http://localhost:10000/oauth/check_token</code> dengan menambahkan client id berupa <code>clientauthcode</code>, secret berupa <code>123456</code> dan access_token menggunakn methode GET. sehingga resource server mendapat data sebagai berikut :</p>\n<ul>\n<li>rid :  <code>belajar</code></li>\n<li>exp : <code>14441</code></li>\n<li>username : <code>endy</code></li>\n<li>authorities : <code>[ROLE_OPERATOR]</code>,<code>[ROLE_SUPERVISOR]</code></li>\n<li>client_id : <code>clientauthcode</code></li>\n<li>scope : <code>read</code>,<code>write</code><br>dari sini resource server tahu role dari user tersebut dan dapat memutuskan user tersebut dapat mengakses resource tersebut atau tidak</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Username-Password\"><a href=\"#Username-Password\" class=\"headerlink\" title=\"Username Password\"></a>Username Password</h2><ul>\n<li>Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientapp</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientapp</code></li>\n<li>grant_type berupa <code>password</code></li>\n<li>username berupa <code>endy</code><ul>\n<li>password berupa <code>123</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code></li>\n<li>client_id berupa <code>clientapp</code> dan secret <code>123456</code> dan authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n</ul>\n</li>\n<li>Selamat anda sudah dapat mengakses resource.</li>\n</ul>\n<h2 id=\"Client-Credential\"><a href=\"#Client-Credential\" class=\"headerlink\" title=\"Client Credential\"></a>Client Credential</h2><ul>\n<li>Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>POST</code></li>\n<li>client_id berupa <code>clientcred</code> dan secret <code>123456</code></li>\n<li>Url berupa <code>http://localhost:10000/oauth/token</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientcred</code></li>\n<li>grant_type berupa <code>client_credentials</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Setelah itu kita akan mendapatkan data sebagai berikut :<ul>\n<li>access_token : <code>blablabla</code></li>\n<li>token_type : <code>bearer</code></li>\n<li>expires_in : <code>43199</code></li>\n<li>scope : <code>read</code>,<code>write</code></li>\n</ul>\n</li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code></li>\n<li>client_id berupa <code>clientcred</code> dan secret <code>123456</code> dan authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n<li>data yaitu:<ul>\n<li>client_id berupa <code>clientcred</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Perlu diketahui karena client cred ini tidak menggunakan username dan password maka dia tidak dapat digunakan dalam aplikasi ini karena resource server telah kita setting hanya untuk menerima authentifikasi dari user dengan role operator.</li>\n</ul>\n<h2 id=\"Implicit-Client\"><a href=\"#Implicit-Client\" class=\"headerlink\" title=\"Implicit Client\"></a>Implicit Client</h2><ul>\n<li><p>Karena kita belum memiliki aplikasi client maka kita akan langsung redirect ke authorization server dengan memasukkan url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&amp;redirect_uri=http://localhost:2000/implicit-client</div></pre></td></tr></table></figure>\n<p>Note : url tersebut akan diproses oleh auth server (<a href=\"http://localhost:10000/oauth/authorize\">http://localhost:10000/oauth/authorize</a>) dengan parameter client_id yaitu <code>jsclient</code>, response_type berupa <code>token</code> dan ingin request ke <code>http://localhost:2000/implicit-client</code></p>\n</li>\n<li>Kita akan langsung di redirect ke <code>http://localhost:10000/login</code>. Kita diminta untuk memasukkan otorisasi login</li>\n<li>Selanjutnya kita akan mendapatkan url <code>http://localhost:2000/implicit-client/#access_token=blabla&amp;token_type=bearer</code></li>\n<li>Kemudian Kita akses auth server dengan mencantumkan<ul>\n<li>Methode HTTP berupa <code>GET</code><br>authorization header <code>Bearer blablabla</code></li>\n<li>Url berupa <code>http://localhost:8080/api/halo</code></li>\n<li>Header berupa <code>application/json</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Mendapatkan-Informasi-User\"><a href=\"#Mendapatkan-Informasi-User\" class=\"headerlink\" title=\"Mendapatkan Informasi User\"></a>Mendapatkan Informasi User</h1><ul>\n<li><p>Pertama class buat controller(resource-server/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">@EnableResourceServer</div><div class=\"line\">public class InfoController&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat methode untuk mengakses info user</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(&quot;/userinfo&quot;)</div><div class=\"line\">public Principal user info (Principal principal)&#123;</div><div class=\"line\">  return principal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Untuk mengaksesnya kita login dulu dengan menggunakan grant type clientauthcode sampai kita mendapatkan access tokenya</p>\n</li>\n<li>Setelah mendapatkanya masukkan url <code>http://localhost:8080/userinfo?access_token=blabla</code></li>\n</ul>\n<h1 id=\"Membuat-Aplikasi-Client-Auhtorization-Code\"><a href=\"#Membuat-Aplikasi-Client-Auhtorization-Code\" class=\"headerlink\" title=\"Membuat Aplikasi Client Auhtorization Code\"></a>Membuat Aplikasi Client Auhtorization Code</h1><p>Pertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.<br>Step by Step nya adalah sebagai berikut :</p>\n<ul>\n<li>Download Setup projek di <code>http://start.spring.io</code></li>\n<li>Isi projek metadata berupa :<ul>\n<li>artifact id :</li>\n<li>groupId :</li>\n</ul>\n</li>\n<li>Isi dependency yang dubutuhkan berupa :<ul>\n<li>web</li>\n<li>thymeleaf</li>\n</ul>\n</li>\n<li>Download lalu pindahkan ke text editor</li>\n<li><p>Kita coba bikin Controller sebagi resources (client-authcode/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Controller</div><div class=\"line\">public class InfoController &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kita bikin methode untuk di proses ke user. Methode ini akan mengembalikan waktu sekarang menggunakan variabel <code>waktu</code>. methode ini dapat diakses di url /halo.(client-authcode/src/main/java/domain/controller/InfoController)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RequestMapping(&quot;/info&quot;)</div><div class=\"line\">public void info(Model m)&#123;</div><div class=\"line\">  m.addAttribute(&quot;waktu&quot;, new Date().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kita bikin UI untuk mengeluarkan informasi dari methode halo yang telah buat tadi.(client-authcode/src/main/resources/templates/halo.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;Halo Spring Boot&lt;/title&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;h1&gt;Halo Spring Boot&lt;/h1&gt;</div><div class=\"line\">        &lt;h2&gt;Waktu saat ini : &lt;span th:text=&quot;$&#123;waktu&#125;&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Proteksi-Client-Authorization-Code-Dengan-Spring-Security\"><a href=\"#Proteksi-Client-Authorization-Code-Dengan-Spring-Security\" class=\"headerlink\" title=\"Proteksi Client Authorization Code Dengan Spring Security\"></a>Proteksi Client Authorization Code Dengan Spring Security</h2><ul>\n<li><p>Lalu coba kita proteksi Resource Server kita menggunakan Spring Security dengan menambahkan dependency di pom.xml. (client-authcode/pom.xml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<p>Pada keadaan ini kita akan diminta otorisasi jika kita mengakses di browser dengan username : <code>user</code> dan password yang ada pada CLI. karena tidak efisien mengabaikan otorisasi.</p>\n</li>\n<li><p>Buat class untuk konfigurasi otorisasi (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration</div><div class=\"line\">public class KonfigurasiSecurity  extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Override methode configure (/client-authcode/src/main/java/domain/config/KonfigurasiSecurity). Methode untuk mengabaikan otorisasi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void configure (WebSecurity web) throws Exception&#123;</div><div class=\"line\">  web.ignoring().anyRequest();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat class untuk konfigurasi OAuth Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration</div><div class=\"line\">@EnableOAuth2Client</div><div class=\"line\">public class KonfigurasiOauth2Client&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi untuk Oauth2 Client (/client-authcode/src/main/java/domain/config/KonfigurasiOauth2Client)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private String urlAuthorization = &quot;http://localhost:10000/oauth/authorize&quot;;</div><div class=\"line\">private String urlToken = &quot;http://localhost:10000/oauth/token&quot;;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">public OAuth2RestOperations restOperations(OAuth2ClientContext context)&#123;</div><div class=\"line\">    OAuth2RestTemplate restTemplate = new OAuth2RestTemplate(resource(),context);</div><div class=\"line\">    return restTemplate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">public OAuth2ProtectedResourceDetails resource()&#123;</div><div class=\"line\">    AuthorizationCodeResourceDetails resourceDetails= new AuthorizationCodeResourceDetails();</div><div class=\"line\">    resourceDetails.setClientId(&quot;clientauthcode&quot;);</div><div class=\"line\">    resourceDetails.setClientSecret(&quot;123456&quot;);</div><div class=\"line\">    resourceDetails.setUserAuthorizationUri(urlAuthorization);</div><div class=\"line\">    resourceDetails.setAccessTokenUri(urlToken);</div><div class=\"line\">    return resourceDetails;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat Controler untuk mengakses api dari resource server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">private OAuth2RestOperations restOperations;</div><div class=\"line\"></div><div class=\"line\">private String urlApi = &quot;http://localhost:8080/api/halo&quot;;</div><div class=\"line\"></div><div class=\"line\">@RequestMapping(&quot;/api&quot;)</div><div class=\"line\">@ResponseBody</div><div class=\"line\">public Map&lt;String, Object&gt; api ()&#123;</div><div class=\"line\">  Map&lt;String, Object&gt; hasil = restOperations.getForObject(urlApi, HashMap.class);</div><div class=\"line\">  return hasil;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambahkan konfigurasi context path dan server port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=9090</div><div class=\"line\">server.context-path=/authcode</div></pre></td></tr></table></figure>\n<p>Keterangan :<br>membuat context-path wajib dikarenakan agar tidak terjadi error saat penyimpanan cookies</p>\n</li>\n</ul>\n<h1 id=\"Membuat-Aplikasi-Client-Implicit\"><a href=\"#Membuat-Aplikasi-Client-Implicit\" class=\"headerlink\" title=\"Membuat Aplikasi Client Implicit\"></a>Membuat Aplikasi Client Implicit</h1><p>Pertama kita akan membuat aplikasi client authcode sedehana menggunakan Spring Framework.<br>Step by Step nya adalah sebagai berikut :</p>\n<ul>\n<li>Download Setup projek di <code>http://start.spring.io</code></li>\n<li>Isi projek metadata berupa :<ul>\n<li>artifact id :</li>\n<li>groupId :</li>\n</ul>\n</li>\n<li>Isi dependency yang dubutuhkan berupa :<ul>\n<li>web</li>\n</ul>\n</li>\n<li>Download lalu pindahkan ke text editor</li>\n</ul>\n<h3 id=\"Setting-Server-port-dan-Server-Context-Path\"><a href=\"#Setting-Server-port-dan-Server-Context-Path\" class=\"headerlink\" title=\"Setting Server port dan Server Context Path\"></a>Setting Server port dan Server Context Path</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=7070</div><div class=\"line\">server.context-path=/implicit</div></pre></td></tr></table></figure>\n<h3 id=\"Membuat-HTML-sederhana\"><a href=\"#Membuat-HTML-sederhana\" class=\"headerlink\" title=\"Membuat HTML sederhana\"></a>Membuat HTML sederhana</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Oauth Client Implicit&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Setup-Angular-JS\"><a href=\"#Setup-Angular-JS\" class=\"headerlink\" title=\"Setup Angular JS\"></a>Setup Angular JS</h3><ul>\n<li>tambahkan file angualar js ke project</li>\n<li><p>buat file aplikasi js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(&apos;ImplicitApp&apos;,[]);</div><div class=\"line\">app.controller(&apos;DummyController&apos;,function()&#123;</div><div class=\"line\">)&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>include ke html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &lt;body ng-app=&quot;ImplicitApp&quot;&gt;</div><div class=\"line\">  &lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">      &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;script src=&quot;js/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;script src=&quot;js/aplikasi.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>test angular js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt;</div><div class=\"line\">    Selamat Datang  &#123;&#123;nama&#125;&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Impicit-Client\"><a href=\"#Impicit-Client\" class=\"headerlink\" title=\"Impicit Client\"></a>Impicit Client</h3><ul>\n<li><p>angular js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(&apos;DummyController&apos;,function($http, $scope, $window, $location)&#123;</div><div class=\"line\">    var urlResourceServer = &quot;http://localhost:8080/api/halo&quot;;</div><div class=\"line\">    var urlAuthServer = &quot;http://localhost:10000/oauth/authorize?client_id=jsclient&amp;response_type=token&quot;;</div><div class=\"line\"></div><div class=\"line\">    $scope.bukaLoginPage = function () &#123;</div><div class=\"line\">        $window.location.href = urlAuthServer;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $scope.ambilTokenDariServer = function () &#123;</div><div class=\"line\">        var location = $location.url(); /// ngambil hash yang isinya #access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d&amp;token_type=bearer&amp;expires_in=86399&amp;scope=read%20write</div><div class=\"line\">        console.log(&quot;Location : &quot;+location);</div><div class=\"line\">        var params = location.split(&quot;&amp;&quot;);///jadi array yang isinya [access_token=f2b50438-2c3a-4637-b6b9-e469543ff26d , token_type=bearer , expires_in=86399 , scope=read%20write]</div><div class=\"line\">        console.log(&quot;Param : &quot;+params);</div><div class=\"line\">        var tokenParam = params[0];///ambile param indek ke 0 yaitu access token</div><div class=\"line\">        console.log(&quot;token Param : &quot;+tokenParam);</div><div class=\"line\">        var token = tokenParam.split(&quot;=&quot;)[1];</div><div class=\"line\">        console.log(&quot;token : &quot;+token);</div><div class=\"line\">        $window.sessionStorage.setItem(&apos;token&apos;,token);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $scope.requestKeResourceServer = function () &#123;</div><div class=\"line\"></div><div class=\"line\">        var token = $window.sessionStorage.getItem(&apos;token&apos;);</div><div class=\"line\">        if (!token)&#123;</div><div class=\"line\">            alert(&apos;Belum Login&apos;);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $http.get(urlResourceServer+&quot;?access_token=&quot;+token).then(</div><div class=\"line\">            function (response) &#123;</div><div class=\"line\">                $scope.responseDariServer = response.data;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            function (response) &#123;</div><div class=\"line\">                alert(&apos;Error Code&apos;+response.status+&apos;, Error Text : &apos;+response.statusText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-controller=&quot;DummyController&quot;&gt;</div><div class=\"line\">    &lt;h1&gt;Oauth Client Implicit&lt;/h1&gt;</div><div class=\"line\">    Masukkan Nama Anda : &lt;input type=&quot;text&quot; ng-model=&quot;nama&quot;&gt;&lt;br&gt;</div><div class=\"line\">    Selamat Datang  &#123;&#123;nama&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button ng-click=&quot;bukaLoginPage()&quot;&gt;Login ke Server&lt;/button&gt;</div><div class=\"line\">    &lt;button ng-click=&quot;ambilTokenDariServer()&quot;&gt;Ambil Token dari Server&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;hr&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;button ng-click=&quot;requestKeResourceServer()&quot;&gt;Merequest ke Resource Server&lt;/button&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &#123;&#123;responseDariServer&#125;&#125;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Note<br>Untuk mengatasi masalah CORS pastikan api anda telah mengunakan anotasi <code>@CrossOrigin</code></p>\n</li>\n</ul>\n"},{"title":"Template Engine Thymeleaf","date":"2017-04-23T07:17:38.000Z","_content":"![](https://elasticbeanstalk-us-east-1-851518566978.s3.amazonaws.com/permanentImages/7b60f151-9302-45bf-bd74-06b0e736bc55.png)\n# Layout dengan Thymeleaf\n  Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html.\n    ```html\n      <input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"${user.name}\" />\n    ```\n\n# Menggunakan Thymeleaf\n  Tambahkan xmlns dibawah ini pada tag html\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n  ```\n# Expression di Thymeleaf\n  - Menampilkan pesan menggunakan `#{}`\n    Contoh Menampilkan nama user yang sedang online\n    ```html\n      <p th:utext=\"#{home.welcome(${session.user.name})}\">\n    ```\n  - Menampilkan variabel menggunakan `${}`\n    contoh menggunakan th:each:\n    ```html\n      <tr th:each=\"pesertas : ${peserta}\">\n          <td th:text=\"${pesertas.nama}\"></td>\n          <td th:text=\"${pesertas.email}\"></td>\n          <td th:text=\"${pesertas.noHp}\"></td>\n          <td>\n              <a th:href=\"${'/peserta/edit/'+pesertas.id}\"><span class=\"glyphicon glyphicon-edit\"></span></a>\n              <a th:href=\"${'/peserta/hapus/'+pesertas.id}\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n          </td>\n      </tr>\n    ```\n  - Menampilkan link url menggunakan `@{}`.\n    Contoh url dapat berasal dari mapping controller :\n    ```html\n      <a th:href=\"@{/peserta}\">Daftar Peserta</a>\n    ```\n    Contoh url dapat berasal dari default folder :\n    ```html\n      <link th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n    ```\n\n## Template Inheritance ##\n  Template Inheritance dapat menggunakan\n  ```html\n    <div layout:fragment=\"content\">\n  ```\n","source":"_posts/pemrograman/spring/template-engine/layout-dengan-thymeleaf.md","raw":"---\ntitle: Template Engine Thymeleaf\ndate: 2017-04-23 14:17:38\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://elasticbeanstalk-us-east-1-851518566978.s3.amazonaws.com/permanentImages/7b60f151-9302-45bf-bd74-06b0e736bc55.png)\n# Layout dengan Thymeleaf\n  Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html.\n    ```html\n      <input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"${user.name}\" />\n    ```\n\n# Menggunakan Thymeleaf\n  Tambahkan xmlns dibawah ini pada tag html\n  ```html\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n  ```\n# Expression di Thymeleaf\n  - Menampilkan pesan menggunakan `#{}`\n    Contoh Menampilkan nama user yang sedang online\n    ```html\n      <p th:utext=\"#{home.welcome(${session.user.name})}\">\n    ```\n  - Menampilkan variabel menggunakan `${}`\n    contoh menggunakan th:each:\n    ```html\n      <tr th:each=\"pesertas : ${peserta}\">\n          <td th:text=\"${pesertas.nama}\"></td>\n          <td th:text=\"${pesertas.email}\"></td>\n          <td th:text=\"${pesertas.noHp}\"></td>\n          <td>\n              <a th:href=\"${'/peserta/edit/'+pesertas.id}\"><span class=\"glyphicon glyphicon-edit\"></span></a>\n              <a th:href=\"${'/peserta/hapus/'+pesertas.id}\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n          </td>\n      </tr>\n    ```\n  - Menampilkan link url menggunakan `@{}`.\n    Contoh url dapat berasal dari mapping controller :\n    ```html\n      <a th:href=\"@{/peserta}\">Daftar Peserta</a>\n    ```\n    Contoh url dapat berasal dari default folder :\n    ```html\n      <link th:href=\"@{/css/bootstrap.min.css}\" rel=\"stylesheet\" />\n    ```\n\n## Template Inheritance ##\n  Template Inheritance dapat menggunakan\n  ```html\n    <div layout:fragment=\"content\">\n  ```\n","slug":"pemrograman/spring/template-engine/layout-dengan-thymeleaf","published":1,"updated":"2017-06-19T03:56:46.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnnd0044islptqq6f8lu","content":"<p><img src=\"https://elasticbeanstalk-us-east-1-851518566978.s3.amazonaws.com/permanentImages/7b60f151-9302-45bf-bd74-06b0e736bc55.png\" alt=\"\"></p>\n<h1 id=\"Layout-dengan-Thymeleaf\"><a href=\"#Layout-dengan-Thymeleaf\" class=\"headerlink\" title=\"Layout dengan Thymeleaf\"></a>Layout dengan Thymeleaf</h1><p>  Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html.<br>    <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"James Carrot\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Menggunakan-Thymeleaf\"><a href=\"#Menggunakan-Thymeleaf\" class=\"headerlink\" title=\"Menggunakan Thymeleaf\"></a>Menggunakan Thymeleaf</h1><p>  Tambahkan xmlns dibawah ini pada tag html<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Expression-di-Thymeleaf\"><a href=\"#Expression-di-Thymeleaf\" class=\"headerlink\" title=\"Expression di Thymeleaf\"></a>Expression di Thymeleaf</h1><ul>\n<li><p>Menampilkan pesan menggunakan <code>#{}</code><br>Contoh Menampilkan nama user yang sedang online</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">\"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menampilkan variabel menggunakan <code>${}</code><br>contoh menggunakan th:each:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"pesertas : $&#123;peserta&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.nama&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.noHp&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/peserta/edit/'+pesertas.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/peserta/hapus/'+pesertas.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menampilkan link url menggunakan <code>@{}</code>.<br>Contoh url dapat berasal dari mapping controller :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Contoh url dapat berasal dari default folder :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Template-Inheritance\"><a href=\"#Template-Inheritance\" class=\"headerlink\" title=\"Template Inheritance\"></a>Template Inheritance</h2><p>  Template Inheritance dapat menggunakan<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><img src=\"https://elasticbeanstalk-us-east-1-851518566978.s3.amazonaws.com/permanentImages/7b60f151-9302-45bf-bd74-06b0e736bc55.png\" alt=\"\"></p>\n<h1 id=\"Layout-dengan-Thymeleaf\"><a href=\"#Layout-dengan-Thymeleaf\" class=\"headerlink\" title=\"Layout dengan Thymeleaf\"></a>Layout dengan Thymeleaf</h1><p>  Thymeleaf adalah template engine untuk JVM. Dia support HTMl, XML, TEXT, CSS, JS, dan RAW. Thymeleaf emmpunya kemampuan yang dikenal dengan Natural Template yaitu dimana kita dapat membuat 2 buah value yang sama. Hal ini mempermudah antara designer dan programer agar dapat bekerja bersama. Ketika value dari backed belum ada designer dapat menggunakan value html.<br>    <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"James Carrot\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;user.name&#125;\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Menggunakan-Thymeleaf\"><a href=\"#Menggunakan-Thymeleaf\" class=\"headerlink\" title=\"Menggunakan Thymeleaf\"></a>Menggunakan Thymeleaf</h1><p>  Tambahkan xmlns dibawah ini pada tag html<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Expression-di-Thymeleaf\"><a href=\"#Expression-di-Thymeleaf\" class=\"headerlink\" title=\"Expression di Thymeleaf\"></a>Expression di Thymeleaf</h1><ul>\n<li><p>Menampilkan pesan menggunakan <code>#{}</code><br>Contoh Menampilkan nama user yang sedang online</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">\"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menampilkan variabel menggunakan <code>${}</code><br>contoh menggunakan th:each:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"pesertas : $&#123;peserta&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.nama&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.email&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;pesertas.noHp&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/peserta/edit/'+pesertas.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-edit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"$&#123;'/peserta/hapus/'+pesertas.id&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"glyphicon glyphicon-remove\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Menampilkan link url menggunakan <code>@{}</code>.<br>Contoh url dapat berasal dari mapping controller :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/peserta&#125;\"</span>&gt;</span>Daftar Peserta<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Contoh url dapat berasal dari default folder :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Template-Inheritance\"><a href=\"#Template-Inheritance\" class=\"headerlink\" title=\"Template Inheritance\"></a>Template Inheritance</h2><p>  Template Inheritance dapat menggunakan<br>  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout:fragment</span>=<span class=\"string\">\"content\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Membuat Web Menggunakan Spring Boot dan Thymeleaf","date":"2017-04-23T07:17:30.000Z","_content":"![](/images/springboot.png)\n[Pada tutorial sebelumnya](https://ciazhar.github.io/2017/04/23/pemrograman/spring/1-setup-project/) kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.\nUntuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut :\n\n- Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)\n```java\n  @Controller\n  public class HaloController{\n    @RequestMapping(\"/\")\n    public String halo(){\n      return \"index\";\n    }\n  }\n```\nKeterangan :\n1. `@Controller` digunakan untuk menandai bahwa class `HaloController` adalah class controller\n2. `@RequestMapping` digunakan untuk melakukan mapping url pada metode bernama halo ke `/`. Kemudian controller itu akan di tampilkan pada view bernama `index`.\n\n\n- Membuat file HTML (main/resources/templates/index.html)\n```html\n  <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n      <title>Aplikasi Spring Boot</title>\n      <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n      <link rel=\"stylesheet\" th:href=\"@{/css/signin.css}\" media=\"screen\"/>\n    </head>\n\n    <body>\n      <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n          <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n              <span class=\"sr-only\">Toggle navigation</span>\n              <span class=\"icon-bar\"></span>\n              <span class=\"icon-bar\"></span>\n              <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n          </div>\n        </div>\n      </nav>\n\n      <div class=\"container\">\n        <h1>Aplikasi Spring Boot Dengan Thymeleaf</h1>\n      </div>\n\n      <script th:src=\"@{/js/jquery.min.js}\"></script>\n      <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n  </html>\n```\nKeterangan :\n1. `<html xmlns:th=\"http://www.thymeleaf.org\">` menandai bahwa html itu menggunakan template engine thymeleaf\n2. `th:href` (jika di html bernama `href`) digunakan untuk menginjek css. css tersebut dapat di simpan di `src/main/resources/static/css`. Tetapi karena `src/main/resources/static` merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : `<link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>`\nSelain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : `<a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>`\n3. `th:src`(jika di html bernama `src`) digunakan untuk menginjek js. js tersebut dapat di simpan di `src/main/resources/static/js`. contoh : `<script th:src=\"@{/js/jquery.min.js}\"></script>`\n\n\n\n- Memasang Library (/src/main/resources)\nJika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS. Jika anda asset diinjek menggunakan CDN anda dapat melewati langkah berikut.\n","source":"_posts/pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf.md","raw":"---\ntitle: Membuat Web Menggunakan Spring Boot dan Thymeleaf\ndate: 2017-04-23 14:17:30\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n[Pada tutorial sebelumnya](https://ciazhar.github.io/2017/04/23/pemrograman/spring/1-setup-project/) kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.\nUntuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut :\n\n- Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)\n```java\n  @Controller\n  public class HaloController{\n    @RequestMapping(\"/\")\n    public String halo(){\n      return \"index\";\n    }\n  }\n```\nKeterangan :\n1. `@Controller` digunakan untuk menandai bahwa class `HaloController` adalah class controller\n2. `@RequestMapping` digunakan untuk melakukan mapping url pada metode bernama halo ke `/`. Kemudian controller itu akan di tampilkan pada view bernama `index`.\n\n\n- Membuat file HTML (main/resources/templates/index.html)\n```html\n  <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n      <title>Aplikasi Spring Boot</title>\n      <link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>\n      <link rel=\"stylesheet\" th:href=\"@{/css/signin.css}\" media=\"screen\"/>\n    </head>\n\n    <body>\n      <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n          <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n              <span class=\"sr-only\">Toggle navigation</span>\n              <span class=\"icon-bar\"></span>\n              <span class=\"icon-bar\"></span>\n              <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>\n          </div>\n        </div>\n      </nav>\n\n      <div class=\"container\">\n        <h1>Aplikasi Spring Boot Dengan Thymeleaf</h1>\n      </div>\n\n      <script th:src=\"@{/js/jquery.min.js}\"></script>\n      <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    </body>\n  </html>\n```\nKeterangan :\n1. `<html xmlns:th=\"http://www.thymeleaf.org\">` menandai bahwa html itu menggunakan template engine thymeleaf\n2. `th:href` (jika di html bernama `href`) digunakan untuk menginjek css. css tersebut dapat di simpan di `src/main/resources/static/css`. Tetapi karena `src/main/resources/static` merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : `<link rel=\"stylesheet\" th:href=\"@{/css/bootstrap.min.css}\"  media=\"screen\"/>`\nSelain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : `<a class=\"navbar-brand\" th:href=\"@{/}\">ciazhar</a>`\n3. `th:src`(jika di html bernama `src`) digunakan untuk menginjek js. js tersebut dapat di simpan di `src/main/resources/static/js`. contoh : `<script th:src=\"@{/js/jquery.min.js}\"></script>`\n\n\n\n- Memasang Library (/src/main/resources)\nJika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS. Jika anda asset diinjek menggunakan CDN anda dapat melewati langkah berikut.\n","slug":"pemrograman/spring/web/membuat-web-sederhana-dengan-spring-boot-starter-web-dan-thymeleaf","published":1,"updated":"2017-08-14T14:25:26.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnnj0046islpqlvix5q4","content":"<p><img src=\"/images/springboot.png\" alt=\"\"><br><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/1-setup-project/\">Pada tutorial sebelumnya</a> kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.<br>Untuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut :</p>\n<ul>\n<li>Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HaloController</span></span>&#123;</div><div class=\"line\">  <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Keterangan :</p>\n<ol>\n<li><code>@Controller</code> digunakan untuk menandai bahwa class <code>HaloController</code> adalah class controller</li>\n<li><code>@RequestMapping</code> digunakan untuk melakukan mapping url pada metode bernama halo ke <code>/</code>. Kemudian controller itu akan di tampilkan pada view bernama <code>index</code>.</li>\n</ol>\n<ul>\n<li>Membuat file HTML (main/resources/templates/index.html)<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/signin.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Aplikasi Spring Boot Dengan Thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Keterangan :</p>\n<ol>\n<li><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code> menandai bahwa html itu menggunakan template engine thymeleaf</li>\n<li><code>th:href</code> (jika di html bernama <code>href</code>) digunakan untuk menginjek css. css tersebut dapat di simpan di <code>src/main/resources/static/css</code>. Tetapi karena <code>src/main/resources/static</code> merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : <code>&lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.min.css}&quot;  media=&quot;screen&quot;/&gt;</code><br>Selain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : <code>&lt;a class=&quot;navbar-brand&quot; th:href=&quot;@{/}&quot;&gt;ciazhar&lt;/a&gt;</code></li>\n<li><code>th:src</code>(jika di html bernama <code>src</code>) digunakan untuk menginjek js. js tersebut dapat di simpan di <code>src/main/resources/static/js</code>. contoh : <code>&lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&gt;&lt;/script&gt;</code></li>\n</ol>\n<ul>\n<li>Memasang Library (/src/main/resources)<br>Jika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS. Jika anda asset diinjek menggunakan CDN anda dapat melewati langkah berikut.</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"><br><a href=\"https://ciazhar.github.io/2017/04/23/pemrograman/spring/1-setup-project/\">Pada tutorial sebelumnya</a> kita sudah melakukan setup project spring pada perangkat anda. Sekarang kita akan coba melihat bagaimana aplikasi spring dibuat.<br>Untuk pertama kali kita akan coba membuat laman web sederhana. Langkah-langkahnya adalah sebagai berikut :</p>\n<ul>\n<li>Membuat controller sederhana (main/java/domain/Controllers/HaloController.java)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HaloController</span></span>&#123;</div><div class=\"line\">  <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Keterangan :</p>\n<ol>\n<li><code>@Controller</code> digunakan untuk menandai bahwa class <code>HaloController</code> adalah class controller</li>\n<li><code>@RequestMapping</code> digunakan untuk melakukan mapping url pada metode bernama halo ke <code>/</code>. Kemudian controller itu akan di tampilkan pada view bernama <code>index</code>.</li>\n</ol>\n<ul>\n<li>Membuat file HTML (main/resources/templates/index.html)<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Aplikasi Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/bootstrap.min.css&#125;\"</span>  <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/signin.css&#125;\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse navbar-fixed-top\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-toggle collapsed\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"collapse\"</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#navbar\"</span> <span class=\"attr\">aria-expanded</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">aria-controls</span>=<span class=\"string\">\"navbar\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>Toggle navigation<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/&#125;\"</span>&gt;</span>ciazhar<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Aplikasi Spring Boot Dengan Thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/jquery.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/js/bootstrap.min.js&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Keterangan :</p>\n<ol>\n<li><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code> menandai bahwa html itu menggunakan template engine thymeleaf</li>\n<li><code>th:href</code> (jika di html bernama <code>href</code>) digunakan untuk menginjek css. css tersebut dapat di simpan di <code>src/main/resources/static/css</code>. Tetapi karena <code>src/main/resources/static</code> merupakan classpath maka untuk menginjeknya hanya perlu dari folder css saja. contoh : <code>&lt;link rel=&quot;stylesheet&quot; th:href=&quot;@{/css/bootstrap.min.css}&quot;  media=&quot;screen&quot;/&gt;</code><br>Selain itu kita juga dapat menggunakanya untuk melakukan link sesuai mapping di controller. contoh : <code>&lt;a class=&quot;navbar-brand&quot; th:href=&quot;@{/}&quot;&gt;ciazhar&lt;/a&gt;</code></li>\n<li><code>th:src</code>(jika di html bernama <code>src</code>) digunakan untuk menginjek js. js tersebut dapat di simpan di <code>src/main/resources/static/js</code>. contoh : <code>&lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&gt;&lt;/script&gt;</code></li>\n</ol>\n<ul>\n<li>Memasang Library (/src/main/resources)<br>Jika kita lihat pada html diatas kita memerlukan beberapa library yaitu bootstrap dan jquery. Library tersebut dapat anda download di official masing-masing library tersebut. Kemudian masukkan ke /src/main/resources/css untuk file CSS dan /src/main/resources/js untuk file JS. Jika anda asset diinjek menggunakan CDN anda dapat melewati langkah berikut.</li>\n</ul>\n"},{"title":"Single Signed On dengan Spring Security","date":"2017-05-27T10:22:29.000Z","_content":"![](/images/springboot.png)\n\n# Aplikasi Authorization Sever dengan Spring Security\n\n#Setup Development Environment\n- JDK 1.8\n- Tomcat Sever\n- MySQL\n\n#Teknologi yang digunakan\n- Spring Boot\n- Spring Security\n- AngularJS\n\n#Setup Project\n- Buka browser masukkan url\n  ```\n    http://start.spring.io/\n  ```\n- Masukkan data, sesuaikan dengan dependency yang dibutuhkan(web, security,oauth2) lalu download\n- Add project ke text editor\n\nNote :\nPada Project tersebut terdapat 3 buah file utama yaitu :\n- pom.xml (konfigurasi maven)\n- application.properties (konfigurasi database)\n- Application.java (main class)\n\n#Simple Oauth Facebook\n- Konfigurasi Oauth (application.yml)\n  Note : application.properties diganti application.yml\n  ```\n    security:\n      oauth2:\n        client:\n          clientId: 233668646673605\n          clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d\n          accessTokenUri: https://graph.facebook.com/oauth/access_token\n          userAuthorizationUri: https://www.facebook.com/dialog/oauth\n          tokenName: oauth_token\n          authenticationScheme: query\n          clientAuthenticationScheme: form\n        resource:\n          userInfoUri: https://graph.facebook.com/me\n  ```\n- Kasih anotasi @EnableOAuth2Sso (Aplikasi.java)\n  ```\n    @EnableOAuth2Sso\n    @SpringBootApplication\n    public class Aplikasi {\n    \tpublic static void main(String[] args) {\n    \t\tSpringApplication.run(Aplikasi.class, args);\n    \t}\n    }\n  ```\n- Bikin UI jika otorisari succes(resource/static/index.html)\n  ```\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <title>Demo</title>\n        <meta name=\"description\" content=\"\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <base href=\"/\" />\n        <link rel=\"stylesheet\" type=\"text/css\"\n              href=\"/webjars/bootstrap/css/bootstrap.min.css\" />\n        <script type=\"text/javascript\" src=\"/webjars/jquery/jquery.min.js\"></script>\n        <script type=\"text/javascript\"\n                src=\"/webjars/bootstrap/js/bootstrap.min.js\"></script>\n    </head>\n    <body>\n      <h1>SSO sukses</h1>\n    </body>\n    </html>\n  ```\n# Bikin UI untuk login\n- Bikin UI (resource/static/index.html)\n  ```\n    ...\n    <body ng-app=\"app\" ng-controller=\"home as home\">\n      <h1>Login</h1>\n      <div class=\"container\" ng-show=\"!home.authenticated\">\n          With Facebook: <a href=\"/login\">click here</a>\n      </div>\n      <div class=\"container\" ng-show=\"home.authenticated\">\n          <h1>SSO berhasil</h1>\n          Logged in as: <span ng-bind=\"home.user\"></span>\n      </div>\n      <script type=\"text/javascript\" src=\"/webjars/angularjs/angular.min.js\"></script>\n      <script type=\"text/javascript\">\n          angular.module(\"app\", []).controller(\"home\", function($http) {\n              var self = this;\n              $http.get(\"/user\").success(function(data) {\n                  self.user = data.userAuthentication.details.name;\n                  self.authenticated = true;\n              }).error(function() {\n                  self.user = \"N/A\";\n                  self.authenticated = false;\n              });\n          });\n      </script>\n    </body>\n    ...\n  ```\n- Bikin RestController(java/domain/controllers/IndexController.java)\n  ```\n  @RestController\n  public class IndexController {\n      @RequestMapping(\"/user\")\n      public Principal user(Principal principal) {\n          return principal;\n      }\n  }\n  ```\n- Bikin Konfigurasi Security(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Configurable\n    @EnableOAuth2Sso\n    @EnableWebSecurity\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http.antMatcher(\"/**\").authorizeRequests().antMatchers(\"/\", \"/login**\", \"/webjars/**\").permitAll().anyRequest()\n                    .authenticated();\n        }\n    }\n  ```\n#Pretty print JSON\n- Konfigurasi YAML (resources/application.yml)\n  ```  \n    spring:\n      jackson:\n        serialization:\n          INDENT_OUTPUT: true\n  ```\n\n#Custom Logout\n- Konfigurasi client Side (resources/static/index.html)\n  ```\n    angular\n    .module(\"app\", [])\n    ...\n    .controller(\"home\", function($http, $location) {\n      var self = this;\n      ...\n      self.logout = function() {\n        $http.post('/logout', {}).success(function() {\n          self.authenticated = false;\n          $location.path(\"/\");\n        }).error(function(data) {\n          console.log(\"Logout failed\")\n          self.authenticated = false;\n        });\n      };\n    });\n  ```\n- Konfigurasi Server Side (java/domain/config/KonfigurasiSecurity.java)\n  ```\n    .and()\n    .logout().logoutSuccessUrl(\"/\").permitAll()\n    .and()\n    .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());\n  ```\n\n#Memisahkan Otorisasi Facebook dari Spring Security\n- Mengubah anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client (java/domain/config/KonfigurasiSecurity.java)\n\n     Sejatinya adalah aplikasi yang telah kita buat tadi berdiri di persis di atas Spring Security. Hal ini dikarenakan kita menggunakan anotasi @EnableOAuth2Sso. Anotasi tersebut sendiri terdiri dari 2 fitur yaitu OAuth2 client dan Oauth2 authentification.\n     Untuk OAuth2 client dia dapat berinteraksi dengan resource OAuth2 yang disediakan oleh Authorization Server (dalam konteks ini facebook Authorization Server).\n     Sedangkan OAuth2 authentification dia berfungsi untuk menyelaraskan aplikasi kita dengan REST milik Spring Security\n     Jadi ketika 2 fitur itu digunakan untuk SSO ke facebook saja, maka kita hanya dapat SSO ke facebook saja\n     Oleh karena itu kita akan mengganti anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client\n  ```\n    @Configurable\n    @EnableOAuth2Client\n    @EnableWebSecurity\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter {\n\n    }\n  ```\n- Membuat Filter authentification(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Autowired\n    OAuth2ClientContext oauth2ClientContext;\n\n    ///Bean untuk memberitahu filter tentang registrasi client dengan facebook\n    @Bean\n    @ConfigurationProperties(\"facebook.client\")\n    public AuthorizationCodeResourceDetails facebook() {\n      return new AuthorizationCodeResourceDetails();\n    }\n\n    ///Bean untuk memberitahu filter tentang dimana user end point di facebook\n    @Bean\n    @ConfigurationProperties(\"facebook.resource\")\n    public ResourceServerProperties facebookResource() {\n      return new ResourceServerProperties();\n    }\n\n    private Filter ssoFilter() {\n      OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/facebook\");\n      OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);\n      facebookFilter.setRestTemplate(facebookTemplate);\n      UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());\n      tokenServices.setRestTemplate(facebookTemplate);\n      facebookFilter.setTokenServices(tokenServices);\n      return facebookFilter;\n    }\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n      http.antMatcher(\"/**\")\n      ...\n      .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);\n    }\n  ```\n- Mengubah konfigurasi OAuth2(resources/application.yml)\n  ```\n    facebook:\n      client:\n        clientId: 233668646673605\n        clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d\n        accessTokenUri: https://graph.facebook.com/oauth/access_token\n        userAuthorizationUri: https://www.facebook.com/dialog/oauth\n        tokenName: oauth_token\n        authenticationScheme: query\n        clientAuthenticationScheme: form\n      resource:\n        userInfoUri: https://graph.facebook.com/me      \n    logging:\n      level:\n        org.springframework.security: DEBUG\n  ```\n- Ganti URL pada UI(resources/static/index.html)\n  ```\n    <div class=\"container\" ng-show=\"!home.authenticated\">\n      <div>\n      With Facebook: <a href=\"/login/facebook\">click here</a>\n      </div>\n    </div>\n  ```\n- Buat Konfigurasi untuk Redirect(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Bean\n    public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) {\n      FilterRegistrationBean registration = new FilterRegistrationBean();\n      registration.setFilter(filter);\n      registration.setOrder(-100);\n      return registration;\n    }\n\n  ```\n#Tambah Authentification untuk github\n- Edit UI (resources/static/index.html)\n  ```\n    With Github: <a href=\"/login/github\">click here</a>\n  ```\n- Tambah Konfigurasi untuk Github(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Bean\n    @ConfigurationProperties(\"github.client\")\n    public AuthorizationCodeResourceDetails github() {\n        return new AuthorizationCodeResourceDetails();\n    }\n\n    @Bean\n    @ConfigurationProperties(\"github.resource\")\n    public ResourceServerProperties githubResource() {\n        return new ResourceServerProperties();\n    }\n  ```\n- Edit Filter(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    private Filter ssoFilter() {\n        CompositeFilter filter = new CompositeFilter();\n        List<Filter> filters = new ArrayList<>();\n        OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/facebook\");\n        OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);\n        facebookFilter.setRestTemplate(facebookTemplate);\n        UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());\n        tokenServices.setRestTemplate(facebookTemplate);\n        facebookFilter.setTokenServices(tokenServices);\n        filters.add(facebookFilter);\n        OAuth2ClientAuthenticationProcessingFilter githubFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/github\");\n        OAuth2RestTemplate githubTemplate = new OAuth2RestTemplate(github(), oauth2ClientContext);\n        githubFilter.setRestTemplate(githubTemplate);\n        tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), github().getClientId());\n        tokenServices.setRestTemplate(githubTemplate);\n        githubFilter.setTokenServices(tokenServices);\n        filters.add(githubFilter);\n        filter.setFilters(filters);\n        return filter;\n    }\n  ```\n- Tambah Konfigurasi OAuth2 Github(resources/application.yml)\n  ```\n    github:\n      client:\n        clientId: bd1c0a783ccdd1c9b9e4\n        clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1\n        accessTokenUri: https://github.com/login/oauth/access_token\n        userAuthorizationUri: https://github.com/login/oauth/authorize\n        clientAuthenticationScheme: form\n      resource:\n        userInfoUri: https://api.github.com/user\n  ```\n\n#Membuat authorization server\n- Merapikan ssoFilter\n\n  Note : kita akan membagi menjadi 2 agar terlihat rapi   \n  ```\n    private Filter ssoFilter() {\n    \t\tCompositeFilter filter = new CompositeFilter();\n    \t\tList<Filter> filters = new ArrayList<>();\n    \t\tfilters.add(ssoFilter(facebook(), \"/login/facebook\"));\n    \t\tfilters.add(ssoFilter(github(), \"/login/github\"));\n    \t\tfilter.setFilters(filters);\n    \t\treturn filter;\n    \t}\n\n    private Filter ssoFilter(ClientResources client, String path) {\n        OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(\n                path);\n        OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext);\n        filter.setRestTemplate(template);\n        UserInfoTokenServices tokenServices = new UserInfoTokenServices(\n                client.getResource().getUserInfoUri(), client.getClient().getClientId());\n        tokenServices.setRestTemplate(template);\n        filter.setTokenServices(tokenServices);\n        return filter;\n    }\n\n  ```\n- membuat class ClientResources untuk mengatur otorisasi client dan akses resource yang pada tadinya terpisah\n  ```\n      class ClientResources {\n\n        @NestedConfigurationProperty\n        private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails();\n\n        @NestedConfigurationProperty\n        private ResourceServerProperties resource = new ResourceServerProperties();\n\n        public AuthorizationCodeResourceDetails getClient() {\n          return client;\n        }\n\n        public ResourceServerProperties getResource() {\n          return resource;\n        }\n      }\n   ```\n-\n","source":"_posts/pemrograman/spring/security/6-SSO-dengan-Spring-Security.md","raw":"---\ntitle: Single Signed On dengan Spring Security\ndate: 2017-05-27 17:22:29\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](/images/springboot.png)\n\n# Aplikasi Authorization Sever dengan Spring Security\n\n#Setup Development Environment\n- JDK 1.8\n- Tomcat Sever\n- MySQL\n\n#Teknologi yang digunakan\n- Spring Boot\n- Spring Security\n- AngularJS\n\n#Setup Project\n- Buka browser masukkan url\n  ```\n    http://start.spring.io/\n  ```\n- Masukkan data, sesuaikan dengan dependency yang dibutuhkan(web, security,oauth2) lalu download\n- Add project ke text editor\n\nNote :\nPada Project tersebut terdapat 3 buah file utama yaitu :\n- pom.xml (konfigurasi maven)\n- application.properties (konfigurasi database)\n- Application.java (main class)\n\n#Simple Oauth Facebook\n- Konfigurasi Oauth (application.yml)\n  Note : application.properties diganti application.yml\n  ```\n    security:\n      oauth2:\n        client:\n          clientId: 233668646673605\n          clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d\n          accessTokenUri: https://graph.facebook.com/oauth/access_token\n          userAuthorizationUri: https://www.facebook.com/dialog/oauth\n          tokenName: oauth_token\n          authenticationScheme: query\n          clientAuthenticationScheme: form\n        resource:\n          userInfoUri: https://graph.facebook.com/me\n  ```\n- Kasih anotasi @EnableOAuth2Sso (Aplikasi.java)\n  ```\n    @EnableOAuth2Sso\n    @SpringBootApplication\n    public class Aplikasi {\n    \tpublic static void main(String[] args) {\n    \t\tSpringApplication.run(Aplikasi.class, args);\n    \t}\n    }\n  ```\n- Bikin UI jika otorisari succes(resource/static/index.html)\n  ```\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <title>Demo</title>\n        <meta name=\"description\" content=\"\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <base href=\"/\" />\n        <link rel=\"stylesheet\" type=\"text/css\"\n              href=\"/webjars/bootstrap/css/bootstrap.min.css\" />\n        <script type=\"text/javascript\" src=\"/webjars/jquery/jquery.min.js\"></script>\n        <script type=\"text/javascript\"\n                src=\"/webjars/bootstrap/js/bootstrap.min.js\"></script>\n    </head>\n    <body>\n      <h1>SSO sukses</h1>\n    </body>\n    </html>\n  ```\n# Bikin UI untuk login\n- Bikin UI (resource/static/index.html)\n  ```\n    ...\n    <body ng-app=\"app\" ng-controller=\"home as home\">\n      <h1>Login</h1>\n      <div class=\"container\" ng-show=\"!home.authenticated\">\n          With Facebook: <a href=\"/login\">click here</a>\n      </div>\n      <div class=\"container\" ng-show=\"home.authenticated\">\n          <h1>SSO berhasil</h1>\n          Logged in as: <span ng-bind=\"home.user\"></span>\n      </div>\n      <script type=\"text/javascript\" src=\"/webjars/angularjs/angular.min.js\"></script>\n      <script type=\"text/javascript\">\n          angular.module(\"app\", []).controller(\"home\", function($http) {\n              var self = this;\n              $http.get(\"/user\").success(function(data) {\n                  self.user = data.userAuthentication.details.name;\n                  self.authenticated = true;\n              }).error(function() {\n                  self.user = \"N/A\";\n                  self.authenticated = false;\n              });\n          });\n      </script>\n    </body>\n    ...\n  ```\n- Bikin RestController(java/domain/controllers/IndexController.java)\n  ```\n  @RestController\n  public class IndexController {\n      @RequestMapping(\"/user\")\n      public Principal user(Principal principal) {\n          return principal;\n      }\n  }\n  ```\n- Bikin Konfigurasi Security(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Configurable\n    @EnableOAuth2Sso\n    @EnableWebSecurity\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http.antMatcher(\"/**\").authorizeRequests().antMatchers(\"/\", \"/login**\", \"/webjars/**\").permitAll().anyRequest()\n                    .authenticated();\n        }\n    }\n  ```\n#Pretty print JSON\n- Konfigurasi YAML (resources/application.yml)\n  ```  \n    spring:\n      jackson:\n        serialization:\n          INDENT_OUTPUT: true\n  ```\n\n#Custom Logout\n- Konfigurasi client Side (resources/static/index.html)\n  ```\n    angular\n    .module(\"app\", [])\n    ...\n    .controller(\"home\", function($http, $location) {\n      var self = this;\n      ...\n      self.logout = function() {\n        $http.post('/logout', {}).success(function() {\n          self.authenticated = false;\n          $location.path(\"/\");\n        }).error(function(data) {\n          console.log(\"Logout failed\")\n          self.authenticated = false;\n        });\n      };\n    });\n  ```\n- Konfigurasi Server Side (java/domain/config/KonfigurasiSecurity.java)\n  ```\n    .and()\n    .logout().logoutSuccessUrl(\"/\").permitAll()\n    .and()\n    .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());\n  ```\n\n#Memisahkan Otorisasi Facebook dari Spring Security\n- Mengubah anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client (java/domain/config/KonfigurasiSecurity.java)\n\n     Sejatinya adalah aplikasi yang telah kita buat tadi berdiri di persis di atas Spring Security. Hal ini dikarenakan kita menggunakan anotasi @EnableOAuth2Sso. Anotasi tersebut sendiri terdiri dari 2 fitur yaitu OAuth2 client dan Oauth2 authentification.\n     Untuk OAuth2 client dia dapat berinteraksi dengan resource OAuth2 yang disediakan oleh Authorization Server (dalam konteks ini facebook Authorization Server).\n     Sedangkan OAuth2 authentification dia berfungsi untuk menyelaraskan aplikasi kita dengan REST milik Spring Security\n     Jadi ketika 2 fitur itu digunakan untuk SSO ke facebook saja, maka kita hanya dapat SSO ke facebook saja\n     Oleh karena itu kita akan mengganti anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client\n  ```\n    @Configurable\n    @EnableOAuth2Client\n    @EnableWebSecurity\n    public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter {\n\n    }\n  ```\n- Membuat Filter authentification(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Autowired\n    OAuth2ClientContext oauth2ClientContext;\n\n    ///Bean untuk memberitahu filter tentang registrasi client dengan facebook\n    @Bean\n    @ConfigurationProperties(\"facebook.client\")\n    public AuthorizationCodeResourceDetails facebook() {\n      return new AuthorizationCodeResourceDetails();\n    }\n\n    ///Bean untuk memberitahu filter tentang dimana user end point di facebook\n    @Bean\n    @ConfigurationProperties(\"facebook.resource\")\n    public ResourceServerProperties facebookResource() {\n      return new ResourceServerProperties();\n    }\n\n    private Filter ssoFilter() {\n      OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/facebook\");\n      OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);\n      facebookFilter.setRestTemplate(facebookTemplate);\n      UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());\n      tokenServices.setRestTemplate(facebookTemplate);\n      facebookFilter.setTokenServices(tokenServices);\n      return facebookFilter;\n    }\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n      http.antMatcher(\"/**\")\n      ...\n      .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);\n    }\n  ```\n- Mengubah konfigurasi OAuth2(resources/application.yml)\n  ```\n    facebook:\n      client:\n        clientId: 233668646673605\n        clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d\n        accessTokenUri: https://graph.facebook.com/oauth/access_token\n        userAuthorizationUri: https://www.facebook.com/dialog/oauth\n        tokenName: oauth_token\n        authenticationScheme: query\n        clientAuthenticationScheme: form\n      resource:\n        userInfoUri: https://graph.facebook.com/me      \n    logging:\n      level:\n        org.springframework.security: DEBUG\n  ```\n- Ganti URL pada UI(resources/static/index.html)\n  ```\n    <div class=\"container\" ng-show=\"!home.authenticated\">\n      <div>\n      With Facebook: <a href=\"/login/facebook\">click here</a>\n      </div>\n    </div>\n  ```\n- Buat Konfigurasi untuk Redirect(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Bean\n    public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) {\n      FilterRegistrationBean registration = new FilterRegistrationBean();\n      registration.setFilter(filter);\n      registration.setOrder(-100);\n      return registration;\n    }\n\n  ```\n#Tambah Authentification untuk github\n- Edit UI (resources/static/index.html)\n  ```\n    With Github: <a href=\"/login/github\">click here</a>\n  ```\n- Tambah Konfigurasi untuk Github(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    @Bean\n    @ConfigurationProperties(\"github.client\")\n    public AuthorizationCodeResourceDetails github() {\n        return new AuthorizationCodeResourceDetails();\n    }\n\n    @Bean\n    @ConfigurationProperties(\"github.resource\")\n    public ResourceServerProperties githubResource() {\n        return new ResourceServerProperties();\n    }\n  ```\n- Edit Filter(java/domain/config/KonfigurasiSecurity.java)\n  ```\n    private Filter ssoFilter() {\n        CompositeFilter filter = new CompositeFilter();\n        List<Filter> filters = new ArrayList<>();\n        OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/facebook\");\n        OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);\n        facebookFilter.setRestTemplate(facebookTemplate);\n        UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());\n        tokenServices.setRestTemplate(facebookTemplate);\n        facebookFilter.setTokenServices(tokenServices);\n        filters.add(facebookFilter);\n        OAuth2ClientAuthenticationProcessingFilter githubFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/github\");\n        OAuth2RestTemplate githubTemplate = new OAuth2RestTemplate(github(), oauth2ClientContext);\n        githubFilter.setRestTemplate(githubTemplate);\n        tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), github().getClientId());\n        tokenServices.setRestTemplate(githubTemplate);\n        githubFilter.setTokenServices(tokenServices);\n        filters.add(githubFilter);\n        filter.setFilters(filters);\n        return filter;\n    }\n  ```\n- Tambah Konfigurasi OAuth2 Github(resources/application.yml)\n  ```\n    github:\n      client:\n        clientId: bd1c0a783ccdd1c9b9e4\n        clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1\n        accessTokenUri: https://github.com/login/oauth/access_token\n        userAuthorizationUri: https://github.com/login/oauth/authorize\n        clientAuthenticationScheme: form\n      resource:\n        userInfoUri: https://api.github.com/user\n  ```\n\n#Membuat authorization server\n- Merapikan ssoFilter\n\n  Note : kita akan membagi menjadi 2 agar terlihat rapi   \n  ```\n    private Filter ssoFilter() {\n    \t\tCompositeFilter filter = new CompositeFilter();\n    \t\tList<Filter> filters = new ArrayList<>();\n    \t\tfilters.add(ssoFilter(facebook(), \"/login/facebook\"));\n    \t\tfilters.add(ssoFilter(github(), \"/login/github\"));\n    \t\tfilter.setFilters(filters);\n    \t\treturn filter;\n    \t}\n\n    private Filter ssoFilter(ClientResources client, String path) {\n        OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(\n                path);\n        OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext);\n        filter.setRestTemplate(template);\n        UserInfoTokenServices tokenServices = new UserInfoTokenServices(\n                client.getResource().getUserInfoUri(), client.getClient().getClientId());\n        tokenServices.setRestTemplate(template);\n        filter.setTokenServices(tokenServices);\n        return filter;\n    }\n\n  ```\n- membuat class ClientResources untuk mengatur otorisasi client dan akses resource yang pada tadinya terpisah\n  ```\n      class ClientResources {\n\n        @NestedConfigurationProperty\n        private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails();\n\n        @NestedConfigurationProperty\n        private ResourceServerProperties resource = new ResourceServerProperties();\n\n        public AuthorizationCodeResourceDetails getClient() {\n          return client;\n        }\n\n        public ResourceServerProperties getResource() {\n          return resource;\n        }\n      }\n   ```\n-\n","slug":"pemrograman/spring/security/6-SSO-dengan-Spring-Security","published":1,"updated":"2017-05-28T09:14:59.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnnr0048islps97sxr90","content":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Aplikasi-Authorization-Sever-dengan-Spring-Security\"><a href=\"#Aplikasi-Authorization-Sever-dengan-Spring-Security\" class=\"headerlink\" title=\"Aplikasi Authorization Sever dengan Spring Security\"></a>Aplikasi Authorization Sever dengan Spring Security</h1><p>#Setup Development Environment</p>\n<ul>\n<li>JDK 1.8</li>\n<li>Tomcat Sever</li>\n<li>MySQL</li>\n</ul>\n<p>#Teknologi yang digunakan</p>\n<ul>\n<li>Spring Boot</li>\n<li>Spring Security</li>\n<li>AngularJS</li>\n</ul>\n<p>#Setup Project</p>\n<ul>\n<li><p>Buka browser masukkan url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://start.spring.io/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Masukkan data, sesuaikan dengan dependency yang dibutuhkan(web, security,oauth2) lalu download</p>\n</li>\n<li>Add project ke text editor</li>\n</ul>\n<p>Note :<br>Pada Project tersebut terdapat 3 buah file utama yaitu :</p>\n<ul>\n<li>pom.xml (konfigurasi maven)</li>\n<li>application.properties (konfigurasi database)</li>\n<li>Application.java (main class)</li>\n</ul>\n<p>#Simple Oauth Facebook</p>\n<ul>\n<li><p>Konfigurasi Oauth (application.yml)<br>Note : application.properties diganti application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">security:</div><div class=\"line\">  oauth2:</div><div class=\"line\">    client:</div><div class=\"line\">      clientId: 233668646673605</div><div class=\"line\">      clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d</div><div class=\"line\">      accessTokenUri: https://graph.facebook.com/oauth/access_token</div><div class=\"line\">      userAuthorizationUri: https://www.facebook.com/dialog/oauth</div><div class=\"line\">      tokenName: oauth_token</div><div class=\"line\">      authenticationScheme: query</div><div class=\"line\">      clientAuthenticationScheme: form</div><div class=\"line\">    resource:</div><div class=\"line\">      userInfoUri: https://graph.facebook.com/me</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kasih anotasi @EnableOAuth2Sso (Aplikasi.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@EnableOAuth2Sso</div><div class=\"line\">@SpringBootApplication</div><div class=\"line\">public class Aplikasi &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSpringApplication.run(Aplikasi.class, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin UI jika otorisari succes(resource/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</div><div class=\"line\">    &lt;title&gt;Demo&lt;/title&gt;</div><div class=\"line\">    &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;</div><div class=\"line\">    &lt;base href=&quot;/&quot; /&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</div><div class=\"line\">          href=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot; /&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;</div><div class=\"line\">            src=&quot;/webjars/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;h1&gt;SSO sukses&lt;/h1&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Bikin-UI-untuk-login\"><a href=\"#Bikin-UI-untuk-login\" class=\"headerlink\" title=\"Bikin UI untuk login\"></a>Bikin UI untuk login</h1><ul>\n<li><p>Bikin UI (resource/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">&lt;body ng-app=&quot;app&quot; ng-controller=&quot;home as home&quot;&gt;</div><div class=\"line\">  &lt;h1&gt;Login&lt;/h1&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt;</div><div class=\"line\">      With Facebook: &lt;a href=&quot;/login&quot;&gt;click here&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot; ng-show=&quot;home.authenticated&quot;&gt;</div><div class=\"line\">      &lt;h1&gt;SSO berhasil&lt;/h1&gt;</div><div class=\"line\">      Logged in as: &lt;span ng-bind=&quot;home.user&quot;&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">      angular.module(&quot;app&quot;, []).controller(&quot;home&quot;, function($http) &#123;</div><div class=\"line\">          var self = this;</div><div class=\"line\">          $http.get(&quot;/user&quot;).success(function(data) &#123;</div><div class=\"line\">              self.user = data.userAuthentication.details.name;</div><div class=\"line\">              self.authenticated = true;</div><div class=\"line\">          &#125;).error(function() &#123;</div><div class=\"line\">              self.user = &quot;N/A&quot;;</div><div class=\"line\">              self.authenticated = false;</div><div class=\"line\">          &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin RestController(java/domain/controllers/IndexController.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class IndexController &#123;</div><div class=\"line\">    @RequestMapping(&quot;/user&quot;)</div><div class=\"line\">    public Principal user(Principal principal) &#123;</div><div class=\"line\">        return principal;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin Konfigurasi Security(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurable</div><div class=\"line\">@EnableOAuth2Sso</div><div class=\"line\">@EnableWebSecurity</div><div class=\"line\">public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    protected void configure(HttpSecurity http) throws Exception &#123;</div><div class=\"line\">        http.antMatcher(&quot;/**&quot;).authorizeRequests().antMatchers(&quot;/&quot;, &quot;/login**&quot;, &quot;/webjars/**&quot;).permitAll().anyRequest()</div><div class=\"line\">                .authenticated();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Pretty print JSON</p>\n<ul>\n<li>Konfigurasi YAML (resources/application.yml)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring:</div><div class=\"line\">  jackson:</div><div class=\"line\">    serialization:</div><div class=\"line\">      INDENT_OUTPUT: true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Custom Logout</p>\n<ul>\n<li><p>Konfigurasi client Side (resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular</div><div class=\"line\">.module(&quot;app&quot;, [])</div><div class=\"line\">...</div><div class=\"line\">.controller(&quot;home&quot;, function($http, $location) &#123;</div><div class=\"line\">  var self = this;</div><div class=\"line\">  ...</div><div class=\"line\">  self.logout = function() &#123;</div><div class=\"line\">    $http.post(&apos;/logout&apos;, &#123;&#125;).success(function() &#123;</div><div class=\"line\">      self.authenticated = false;</div><div class=\"line\">      $location.path(&quot;/&quot;);</div><div class=\"line\">    &#125;).error(function(data) &#123;</div><div class=\"line\">      console.log(&quot;Logout failed&quot;)</div><div class=\"line\">      self.authenticated = false;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi Server Side (java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.and()</div><div class=\"line\">.logout().logoutSuccessUrl(&quot;/&quot;).permitAll()</div><div class=\"line\">.and()</div><div class=\"line\">.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Memisahkan Otorisasi Facebook dari Spring Security</p>\n<ul>\n<li><p>Mengubah anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client (java/domain/config/KonfigurasiSecurity.java)</p>\n<p>   Sejatinya adalah aplikasi yang telah kita buat tadi berdiri di persis di atas Spring Security. Hal ini dikarenakan kita menggunakan anotasi @EnableOAuth2Sso. Anotasi tersebut sendiri terdiri dari 2 fitur yaitu OAuth2 client dan Oauth2 authentification.<br>   Untuk OAuth2 client dia dapat berinteraksi dengan resource OAuth2 yang disediakan oleh Authorization Server (dalam konteks ini facebook Authorization Server).<br>   Sedangkan OAuth2 authentification dia berfungsi untuk menyelaraskan aplikasi kita dengan REST milik Spring Security<br>   Jadi ketika 2 fitur itu digunakan untuk SSO ke facebook saja, maka kita hanya dapat SSO ke facebook saja<br>   Oleh karena itu kita akan mengganti anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurable</div><div class=\"line\">@EnableOAuth2Client</div><div class=\"line\">@EnableWebSecurity</div><div class=\"line\">public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat Filter authentification(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">OAuth2ClientContext oauth2ClientContext;</div><div class=\"line\"></div><div class=\"line\">///Bean untuk memberitahu filter tentang registrasi client dengan facebook</div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;facebook.client&quot;)</div><div class=\"line\">public AuthorizationCodeResourceDetails facebook() &#123;</div><div class=\"line\">  return new AuthorizationCodeResourceDetails();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">///Bean untuk memberitahu filter tentang dimana user end point di facebook</div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;facebook.resource&quot;)</div><div class=\"line\">public ResourceServerProperties facebookResource() &#123;</div><div class=\"line\">  return new ResourceServerProperties();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">  OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;);</div><div class=\"line\">  OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);</div><div class=\"line\">  facebookFilter.setRestTemplate(facebookTemplate);</div><div class=\"line\">  UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());</div><div class=\"line\">  tokenServices.setRestTemplate(facebookTemplate);</div><div class=\"line\">  facebookFilter.setTokenServices(tokenServices);</div><div class=\"line\">  return facebookFilter;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void configure(HttpSecurity http) throws Exception &#123;</div><div class=\"line\">  http.antMatcher(&quot;/**&quot;)</div><div class=\"line\">  ...</div><div class=\"line\">  .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Mengubah konfigurasi OAuth2(resources/application.yml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">facebook:</div><div class=\"line\">  client:</div><div class=\"line\">    clientId: 233668646673605</div><div class=\"line\">    clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d</div><div class=\"line\">    accessTokenUri: https://graph.facebook.com/oauth/access_token</div><div class=\"line\">    userAuthorizationUri: https://www.facebook.com/dialog/oauth</div><div class=\"line\">    tokenName: oauth_token</div><div class=\"line\">    authenticationScheme: query</div><div class=\"line\">    clientAuthenticationScheme: form</div><div class=\"line\">  resource:</div><div class=\"line\">    userInfoUri: https://graph.facebook.com/me      </div><div class=\"line\">logging:</div><div class=\"line\">  level:</div><div class=\"line\">    org.springframework.security: DEBUG</div></pre></td></tr></table></figure>\n</li>\n<li><p>Ganti URL pada UI(resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">  With Facebook: &lt;a href=&quot;/login/facebook&quot;&gt;click here&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat Konfigurasi untuk Redirect(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Bean</div><div class=\"line\">public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) &#123;</div><div class=\"line\">  FilterRegistrationBean registration = new FilterRegistrationBean();</div><div class=\"line\">  registration.setFilter(filter);</div><div class=\"line\">  registration.setOrder(-100);</div><div class=\"line\">  return registration;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Tambah Authentification untuk github</p>\n<ul>\n<li><p>Edit UI (resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">With Github: &lt;a href=&quot;/login/github&quot;&gt;click here&lt;/a&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambah Konfigurasi untuk Github(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;github.client&quot;)</div><div class=\"line\">public AuthorizationCodeResourceDetails github() &#123;</div><div class=\"line\">    return new AuthorizationCodeResourceDetails();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;github.resource&quot;)</div><div class=\"line\">public ResourceServerProperties githubResource() &#123;</div><div class=\"line\">    return new ResourceServerProperties();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Edit Filter(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">    CompositeFilter filter = new CompositeFilter();</div><div class=\"line\">    List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;);</div><div class=\"line\">    OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);</div><div class=\"line\">    facebookFilter.setRestTemplate(facebookTemplate);</div><div class=\"line\">    UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(facebookTemplate);</div><div class=\"line\">    facebookFilter.setTokenServices(tokenServices);</div><div class=\"line\">    filters.add(facebookFilter);</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter githubFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/github&quot;);</div><div class=\"line\">    OAuth2RestTemplate githubTemplate = new OAuth2RestTemplate(github(), oauth2ClientContext);</div><div class=\"line\">    githubFilter.setRestTemplate(githubTemplate);</div><div class=\"line\">    tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), github().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(githubTemplate);</div><div class=\"line\">    githubFilter.setTokenServices(tokenServices);</div><div class=\"line\">    filters.add(githubFilter);</div><div class=\"line\">    filter.setFilters(filters);</div><div class=\"line\">    return filter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambah Konfigurasi OAuth2 Github(resources/application.yml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">github:</div><div class=\"line\">  client:</div><div class=\"line\">    clientId: bd1c0a783ccdd1c9b9e4</div><div class=\"line\">    clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1</div><div class=\"line\">    accessTokenUri: https://github.com/login/oauth/access_token</div><div class=\"line\">    userAuthorizationUri: https://github.com/login/oauth/authorize</div><div class=\"line\">    clientAuthenticationScheme: form</div><div class=\"line\">  resource:</div><div class=\"line\">    userInfoUri: https://api.github.com/user</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Membuat authorization server</p>\n<ul>\n<li><p>Merapikan ssoFilter</p>\n<p>Note : kita akan membagi menjadi 2 agar terlihat rapi   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">\t\tCompositeFilter filter = new CompositeFilter();</div><div class=\"line\">\t\tList&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\">\t\tfilters.add(ssoFilter(facebook(), &quot;/login/facebook&quot;));</div><div class=\"line\">\t\tfilters.add(ssoFilter(github(), &quot;/login/github&quot;));</div><div class=\"line\">\t\tfilter.setFilters(filters);</div><div class=\"line\">\t\treturn filter;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">private Filter ssoFilter(ClientResources client, String path) &#123;</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(</div><div class=\"line\">            path);</div><div class=\"line\">    OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext);</div><div class=\"line\">    filter.setRestTemplate(template);</div><div class=\"line\">    UserInfoTokenServices tokenServices = new UserInfoTokenServices(</div><div class=\"line\">            client.getResource().getUserInfoUri(), client.getClient().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(template);</div><div class=\"line\">    filter.setTokenServices(tokenServices);</div><div class=\"line\">    return filter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat class ClientResources untuk mengatur otorisasi client dan akses resource yang pada tadinya terpisah</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ClientResources &#123;</div><div class=\"line\"></div><div class=\"line\">  @NestedConfigurationProperty</div><div class=\"line\">  private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails();</div><div class=\"line\"></div><div class=\"line\">  @NestedConfigurationProperty</div><div class=\"line\">  private ResourceServerProperties resource = new ResourceServerProperties();</div><div class=\"line\"></div><div class=\"line\">  public AuthorizationCodeResourceDetails getClient() &#123;</div><div class=\"line\">    return client;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public ResourceServerProperties getResource() &#123;</div><div class=\"line\">    return resource;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-</p>\n","excerpt":"","more":"<p><img src=\"/images/springboot.png\" alt=\"\"></p>\n<h1 id=\"Aplikasi-Authorization-Sever-dengan-Spring-Security\"><a href=\"#Aplikasi-Authorization-Sever-dengan-Spring-Security\" class=\"headerlink\" title=\"Aplikasi Authorization Sever dengan Spring Security\"></a>Aplikasi Authorization Sever dengan Spring Security</h1><p>#Setup Development Environment</p>\n<ul>\n<li>JDK 1.8</li>\n<li>Tomcat Sever</li>\n<li>MySQL</li>\n</ul>\n<p>#Teknologi yang digunakan</p>\n<ul>\n<li>Spring Boot</li>\n<li>Spring Security</li>\n<li>AngularJS</li>\n</ul>\n<p>#Setup Project</p>\n<ul>\n<li><p>Buka browser masukkan url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://start.spring.io/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Masukkan data, sesuaikan dengan dependency yang dibutuhkan(web, security,oauth2) lalu download</p>\n</li>\n<li>Add project ke text editor</li>\n</ul>\n<p>Note :<br>Pada Project tersebut terdapat 3 buah file utama yaitu :</p>\n<ul>\n<li>pom.xml (konfigurasi maven)</li>\n<li>application.properties (konfigurasi database)</li>\n<li>Application.java (main class)</li>\n</ul>\n<p>#Simple Oauth Facebook</p>\n<ul>\n<li><p>Konfigurasi Oauth (application.yml)<br>Note : application.properties diganti application.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">security:</div><div class=\"line\">  oauth2:</div><div class=\"line\">    client:</div><div class=\"line\">      clientId: 233668646673605</div><div class=\"line\">      clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d</div><div class=\"line\">      accessTokenUri: https://graph.facebook.com/oauth/access_token</div><div class=\"line\">      userAuthorizationUri: https://www.facebook.com/dialog/oauth</div><div class=\"line\">      tokenName: oauth_token</div><div class=\"line\">      authenticationScheme: query</div><div class=\"line\">      clientAuthenticationScheme: form</div><div class=\"line\">    resource:</div><div class=\"line\">      userInfoUri: https://graph.facebook.com/me</div></pre></td></tr></table></figure>\n</li>\n<li><p>Kasih anotasi @EnableOAuth2Sso (Aplikasi.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@EnableOAuth2Sso</div><div class=\"line\">@SpringBootApplication</div><div class=\"line\">public class Aplikasi &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSpringApplication.run(Aplikasi.class, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin UI jika otorisari succes(resource/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</div><div class=\"line\">    &lt;title&gt;Demo&lt;/title&gt;</div><div class=\"line\">    &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;</div><div class=\"line\">    &lt;base href=&quot;/&quot; /&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</div><div class=\"line\">          href=&quot;/webjars/bootstrap/css/bootstrap.min.css&quot; /&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;</div><div class=\"line\">            src=&quot;/webjars/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;h1&gt;SSO sukses&lt;/h1&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Bikin-UI-untuk-login\"><a href=\"#Bikin-UI-untuk-login\" class=\"headerlink\" title=\"Bikin UI untuk login\"></a>Bikin UI untuk login</h1><ul>\n<li><p>Bikin UI (resource/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">&lt;body ng-app=&quot;app&quot; ng-controller=&quot;home as home&quot;&gt;</div><div class=\"line\">  &lt;h1&gt;Login&lt;/h1&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt;</div><div class=\"line\">      With Facebook: &lt;a href=&quot;/login&quot;&gt;click here&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;container&quot; ng-show=&quot;home.authenticated&quot;&gt;</div><div class=\"line\">      &lt;h1&gt;SSO berhasil&lt;/h1&gt;</div><div class=\"line\">      Logged in as: &lt;span ng-bind=&quot;home.user&quot;&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot; src=&quot;/webjars/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">      angular.module(&quot;app&quot;, []).controller(&quot;home&quot;, function($http) &#123;</div><div class=\"line\">          var self = this;</div><div class=\"line\">          $http.get(&quot;/user&quot;).success(function(data) &#123;</div><div class=\"line\">              self.user = data.userAuthentication.details.name;</div><div class=\"line\">              self.authenticated = true;</div><div class=\"line\">          &#125;).error(function() &#123;</div><div class=\"line\">              self.user = &quot;N/A&quot;;</div><div class=\"line\">              self.authenticated = false;</div><div class=\"line\">          &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin RestController(java/domain/controllers/IndexController.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class IndexController &#123;</div><div class=\"line\">    @RequestMapping(&quot;/user&quot;)</div><div class=\"line\">    public Principal user(Principal principal) &#123;</div><div class=\"line\">        return principal;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Bikin Konfigurasi Security(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurable</div><div class=\"line\">@EnableOAuth2Sso</div><div class=\"line\">@EnableWebSecurity</div><div class=\"line\">public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    protected void configure(HttpSecurity http) throws Exception &#123;</div><div class=\"line\">        http.antMatcher(&quot;/**&quot;).authorizeRequests().antMatchers(&quot;/&quot;, &quot;/login**&quot;, &quot;/webjars/**&quot;).permitAll().anyRequest()</div><div class=\"line\">                .authenticated();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Pretty print JSON</p>\n<ul>\n<li>Konfigurasi YAML (resources/application.yml)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring:</div><div class=\"line\">  jackson:</div><div class=\"line\">    serialization:</div><div class=\"line\">      INDENT_OUTPUT: true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Custom Logout</p>\n<ul>\n<li><p>Konfigurasi client Side (resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular</div><div class=\"line\">.module(&quot;app&quot;, [])</div><div class=\"line\">...</div><div class=\"line\">.controller(&quot;home&quot;, function($http, $location) &#123;</div><div class=\"line\">  var self = this;</div><div class=\"line\">  ...</div><div class=\"line\">  self.logout = function() &#123;</div><div class=\"line\">    $http.post(&apos;/logout&apos;, &#123;&#125;).success(function() &#123;</div><div class=\"line\">      self.authenticated = false;</div><div class=\"line\">      $location.path(&quot;/&quot;);</div><div class=\"line\">    &#125;).error(function(data) &#123;</div><div class=\"line\">      console.log(&quot;Logout failed&quot;)</div><div class=\"line\">      self.authenticated = false;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Konfigurasi Server Side (java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.and()</div><div class=\"line\">.logout().logoutSuccessUrl(&quot;/&quot;).permitAll()</div><div class=\"line\">.and()</div><div class=\"line\">.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Memisahkan Otorisasi Facebook dari Spring Security</p>\n<ul>\n<li><p>Mengubah anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client (java/domain/config/KonfigurasiSecurity.java)</p>\n<p>   Sejatinya adalah aplikasi yang telah kita buat tadi berdiri di persis di atas Spring Security. Hal ini dikarenakan kita menggunakan anotasi @EnableOAuth2Sso. Anotasi tersebut sendiri terdiri dari 2 fitur yaitu OAuth2 client dan Oauth2 authentification.<br>   Untuk OAuth2 client dia dapat berinteraksi dengan resource OAuth2 yang disediakan oleh Authorization Server (dalam konteks ini facebook Authorization Server).<br>   Sedangkan OAuth2 authentification dia berfungsi untuk menyelaraskan aplikasi kita dengan REST milik Spring Security<br>   Jadi ketika 2 fitur itu digunakan untuk SSO ke facebook saja, maka kita hanya dapat SSO ke facebook saja<br>   Oleh karena itu kita akan mengganti anotasi @EnableOAuth2Sso dengan @EnableOAuth2Client</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configurable</div><div class=\"line\">@EnableOAuth2Client</div><div class=\"line\">@EnableWebSecurity</div><div class=\"line\">public class KonfigurasiSecurity extends WebSecurityConfigurerAdapter &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Membuat Filter authentification(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Autowired</div><div class=\"line\">OAuth2ClientContext oauth2ClientContext;</div><div class=\"line\"></div><div class=\"line\">///Bean untuk memberitahu filter tentang registrasi client dengan facebook</div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;facebook.client&quot;)</div><div class=\"line\">public AuthorizationCodeResourceDetails facebook() &#123;</div><div class=\"line\">  return new AuthorizationCodeResourceDetails();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">///Bean untuk memberitahu filter tentang dimana user end point di facebook</div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;facebook.resource&quot;)</div><div class=\"line\">public ResourceServerProperties facebookResource() &#123;</div><div class=\"line\">  return new ResourceServerProperties();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">  OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;);</div><div class=\"line\">  OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);</div><div class=\"line\">  facebookFilter.setRestTemplate(facebookTemplate);</div><div class=\"line\">  UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());</div><div class=\"line\">  tokenServices.setRestTemplate(facebookTemplate);</div><div class=\"line\">  facebookFilter.setTokenServices(tokenServices);</div><div class=\"line\">  return facebookFilter;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void configure(HttpSecurity http) throws Exception &#123;</div><div class=\"line\">  http.antMatcher(&quot;/**&quot;)</div><div class=\"line\">  ...</div><div class=\"line\">  .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Mengubah konfigurasi OAuth2(resources/application.yml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">facebook:</div><div class=\"line\">  client:</div><div class=\"line\">    clientId: 233668646673605</div><div class=\"line\">    clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d</div><div class=\"line\">    accessTokenUri: https://graph.facebook.com/oauth/access_token</div><div class=\"line\">    userAuthorizationUri: https://www.facebook.com/dialog/oauth</div><div class=\"line\">    tokenName: oauth_token</div><div class=\"line\">    authenticationScheme: query</div><div class=\"line\">    clientAuthenticationScheme: form</div><div class=\"line\">  resource:</div><div class=\"line\">    userInfoUri: https://graph.facebook.com/me      </div><div class=\"line\">logging:</div><div class=\"line\">  level:</div><div class=\"line\">    org.springframework.security: DEBUG</div></pre></td></tr></table></figure>\n</li>\n<li><p>Ganti URL pada UI(resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;container&quot; ng-show=&quot;!home.authenticated&quot;&gt;</div><div class=\"line\">  &lt;div&gt;</div><div class=\"line\">  With Facebook: &lt;a href=&quot;/login/facebook&quot;&gt;click here&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Buat Konfigurasi untuk Redirect(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Bean</div><div class=\"line\">public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) &#123;</div><div class=\"line\">  FilterRegistrationBean registration = new FilterRegistrationBean();</div><div class=\"line\">  registration.setFilter(filter);</div><div class=\"line\">  registration.setOrder(-100);</div><div class=\"line\">  return registration;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Tambah Authentification untuk github</p>\n<ul>\n<li><p>Edit UI (resources/static/index.html)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">With Github: &lt;a href=&quot;/login/github&quot;&gt;click here&lt;/a&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambah Konfigurasi untuk Github(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;github.client&quot;)</div><div class=\"line\">public AuthorizationCodeResourceDetails github() &#123;</div><div class=\"line\">    return new AuthorizationCodeResourceDetails();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Bean</div><div class=\"line\">@ConfigurationProperties(&quot;github.resource&quot;)</div><div class=\"line\">public ResourceServerProperties githubResource() &#123;</div><div class=\"line\">    return new ResourceServerProperties();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Edit Filter(java/domain/config/KonfigurasiSecurity.java)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">    CompositeFilter filter = new CompositeFilter();</div><div class=\"line\">    List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter facebookFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/facebook&quot;);</div><div class=\"line\">    OAuth2RestTemplate facebookTemplate = new OAuth2RestTemplate(facebook(), oauth2ClientContext);</div><div class=\"line\">    facebookFilter.setRestTemplate(facebookTemplate);</div><div class=\"line\">    UserInfoTokenServices tokenServices = new UserInfoTokenServices(facebookResource().getUserInfoUri(), facebook().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(facebookTemplate);</div><div class=\"line\">    facebookFilter.setTokenServices(tokenServices);</div><div class=\"line\">    filters.add(facebookFilter);</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter githubFilter = new OAuth2ClientAuthenticationProcessingFilter(&quot;/login/github&quot;);</div><div class=\"line\">    OAuth2RestTemplate githubTemplate = new OAuth2RestTemplate(github(), oauth2ClientContext);</div><div class=\"line\">    githubFilter.setRestTemplate(githubTemplate);</div><div class=\"line\">    tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), github().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(githubTemplate);</div><div class=\"line\">    githubFilter.setTokenServices(tokenServices);</div><div class=\"line\">    filters.add(githubFilter);</div><div class=\"line\">    filter.setFilters(filters);</div><div class=\"line\">    return filter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tambah Konfigurasi OAuth2 Github(resources/application.yml)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">github:</div><div class=\"line\">  client:</div><div class=\"line\">    clientId: bd1c0a783ccdd1c9b9e4</div><div class=\"line\">    clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1</div><div class=\"line\">    accessTokenUri: https://github.com/login/oauth/access_token</div><div class=\"line\">    userAuthorizationUri: https://github.com/login/oauth/authorize</div><div class=\"line\">    clientAuthenticationScheme: form</div><div class=\"line\">  resource:</div><div class=\"line\">    userInfoUri: https://api.github.com/user</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#Membuat authorization server</p>\n<ul>\n<li><p>Merapikan ssoFilter</p>\n<p>Note : kita akan membagi menjadi 2 agar terlihat rapi   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Filter ssoFilter() &#123;</div><div class=\"line\">\t\tCompositeFilter filter = new CompositeFilter();</div><div class=\"line\">\t\tList&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\">\t\tfilters.add(ssoFilter(facebook(), &quot;/login/facebook&quot;));</div><div class=\"line\">\t\tfilters.add(ssoFilter(github(), &quot;/login/github&quot;));</div><div class=\"line\">\t\tfilter.setFilters(filters);</div><div class=\"line\">\t\treturn filter;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">private Filter ssoFilter(ClientResources client, String path) &#123;</div><div class=\"line\">    OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(</div><div class=\"line\">            path);</div><div class=\"line\">    OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext);</div><div class=\"line\">    filter.setRestTemplate(template);</div><div class=\"line\">    UserInfoTokenServices tokenServices = new UserInfoTokenServices(</div><div class=\"line\">            client.getResource().getUserInfoUri(), client.getClient().getClientId());</div><div class=\"line\">    tokenServices.setRestTemplate(template);</div><div class=\"line\">    filter.setTokenServices(tokenServices);</div><div class=\"line\">    return filter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>membuat class ClientResources untuk mengatur otorisasi client dan akses resource yang pada tadinya terpisah</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class ClientResources &#123;</div><div class=\"line\"></div><div class=\"line\">  @NestedConfigurationProperty</div><div class=\"line\">  private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails();</div><div class=\"line\"></div><div class=\"line\">  @NestedConfigurationProperty</div><div class=\"line\">  private ResourceServerProperties resource = new ResourceServerProperties();</div><div class=\"line\"></div><div class=\"line\">  public AuthorizationCodeResourceDetails getClient() &#123;</div><div class=\"line\">    return client;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public ResourceServerProperties getResource() &#123;</div><div class=\"line\">    return resource;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-</p>\n"},{"title":"Melihat data User yang sedang Login menggunakan Spring Security","date":"2017-05-27T10:06:58.000Z","_content":"![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nUntuk dapat melihar user yang sedang login dapat menggunakan `Authentication` yang nilainya akan diinjek oleh spring security. Berikut contoh kodenya :\n```java\n@RestController\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(\"/current\")\n    public Authentication currentUser(Authentication authentication){\n        return authentication;\n    }\n}\n```\n","source":"_posts/pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md.md","raw":"---\ntitle: Melihat data User yang sedang Login menggunakan Spring Security\ndate: 2017-05-27 17:06:58\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://ordina-jworks.github.io/img/spring-security-logo.png)\n\nUntuk dapat melihar user yang sedang login dapat menggunakan `Authentication` yang nilainya akan diinjek oleh spring security. Berikut contoh kodenya :\n```java\n@RestController\n@RequestMapping(\"api/user\")\npublic class UserController {\n\n    @RequestMapping(\"/current\")\n    public Authentication currentUser(Authentication authentication){\n        return authentication;\n    }\n}\n```\n","slug":"pemrograman/spring/security/4-melihat-data-user-login-dengan-spring-security-md","published":1,"updated":"2017-06-19T03:50:20.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnnu004aislpk90cc7m5","content":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Untuk dapat melihar user yang sedang login dapat menggunakan <code>Authentication</code> yang nilainya akan diinjek oleh spring security. Berikut contoh kodenya :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"api/user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/current\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">currentUser</span><span class=\"params\">(Authentication authentication)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> authentication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><img src=\"https://ordina-jworks.github.io/img/spring-security-logo.png\" alt=\"\"></p>\n<p>Untuk dapat melihar user yang sedang login dapat menggunakan <code>Authentication</code> yang nilainya akan diinjek oleh spring security. Berikut contoh kodenya :<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"api/user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/current\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">currentUser</span><span class=\"params\">(Authentication authentication)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> authentication;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Cloud Foundry","date":"2017-08-21T10:22:41.000Z","_content":"\n# Definisi Cloud Foundry\n\nCloud Foundry adalah suatu Paas(Platform as a Service) berbasis open source yang disediakan dikembangkan Pivotal. Platform as a service sendiri adalah service yang digunakan untuk mendeploy aplikasi kita ke cloud. \n\nPerbedaan Traditional IT, Infrastructure as a Service (IaaS), Platform as a Service (PaaS) dan Software as a Service (SaaS).\n\n# Deploy aplikasi ke Pivotal Cloud Foundry\n##1. Install Cloud Foundry CLI\nKunjungi [tautan berikut](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html) untuk totorial bagaimana menginstall Cloud Foundry CLI.\n\n##2. Login ke pivotal API\n- Gunakan command `cf login -a api.run.pivotal.io` pada command line untuk login.\n- Kemudian anda akan diminta memasukkan email dan password\n- Kemudian pilih space mana yang akan anda gunakan\n\n##3. Buat file konfgurasi\nBuat file bernama manifest.yml dan simpan di bagian terluar project anda. Berikut isi dari file tersebut :\n```yml\n---\napplications:\n- name: spring-boot-cloud-foundry\n  path: target/spring-boot.jar\n  domain: cfapps.io\n  memory: 512m\n  instance: 1\n```\nKeterangan :\n- name : nama aplikasi\n- path : letak file hasil kompilasi berada\n- domain : domain aplikasi\n- memory : memory aplikasi\n- instance : jumlah instance/replikasi aplikasi\n\n##4. Push ke Cloud Foundry\nGunakan perintah `cf push` pada terminal untuk melakukan push aplikasi ke cloud foundry.\n\nKemudian akan terlihat log. Tunggu beberapa saat sampai aplikasi anda terdeploy.\n\n##5. Mengubah Konfigurasi Service\nGunakn perintah `cf update-service nama-service -c 'konfigurasinya'`\nContoh : \n`cf update-service config-server -c '{\"git\": { \"uri\": \"http://example.com/config\" } }'`\n\n\n## Login ke servic mysql\nmysql -u b42da3b446621e -pd66fa990 -h us-cdbr-iron-east-05.cleardb.net ad_a2227b61d61fce9\n","source":"_posts/pemrograman/spring/devops/cloud-foundry/cloud-foundry-intro.md","raw":"---\ntitle: Cloud Foundry\ndate: 2017-08-21 17:22:41\ntags:\n---\n\n# Definisi Cloud Foundry\n\nCloud Foundry adalah suatu Paas(Platform as a Service) berbasis open source yang disediakan dikembangkan Pivotal. Platform as a service sendiri adalah service yang digunakan untuk mendeploy aplikasi kita ke cloud. \n\nPerbedaan Traditional IT, Infrastructure as a Service (IaaS), Platform as a Service (PaaS) dan Software as a Service (SaaS).\n\n# Deploy aplikasi ke Pivotal Cloud Foundry\n##1. Install Cloud Foundry CLI\nKunjungi [tautan berikut](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html) untuk totorial bagaimana menginstall Cloud Foundry CLI.\n\n##2. Login ke pivotal API\n- Gunakan command `cf login -a api.run.pivotal.io` pada command line untuk login.\n- Kemudian anda akan diminta memasukkan email dan password\n- Kemudian pilih space mana yang akan anda gunakan\n\n##3. Buat file konfgurasi\nBuat file bernama manifest.yml dan simpan di bagian terluar project anda. Berikut isi dari file tersebut :\n```yml\n---\napplications:\n- name: spring-boot-cloud-foundry\n  path: target/spring-boot.jar\n  domain: cfapps.io\n  memory: 512m\n  instance: 1\n```\nKeterangan :\n- name : nama aplikasi\n- path : letak file hasil kompilasi berada\n- domain : domain aplikasi\n- memory : memory aplikasi\n- instance : jumlah instance/replikasi aplikasi\n\n##4. Push ke Cloud Foundry\nGunakan perintah `cf push` pada terminal untuk melakukan push aplikasi ke cloud foundry.\n\nKemudian akan terlihat log. Tunggu beberapa saat sampai aplikasi anda terdeploy.\n\n##5. Mengubah Konfigurasi Service\nGunakn perintah `cf update-service nama-service -c 'konfigurasinya'`\nContoh : \n`cf update-service config-server -c '{\"git\": { \"uri\": \"http://example.com/config\" } }'`\n\n\n## Login ke servic mysql\nmysql -u b42da3b446621e -pd66fa990 -h us-cdbr-iron-east-05.cleardb.net ad_a2227b61d61fce9\n","slug":"pemrograman/spring/devops/cloud-foundry/cloud-foundry-intro","published":1,"updated":"2017-09-01T10:35:08.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnom0052islpl1r5yrbw","content":"<h1 id=\"Definisi-Cloud-Foundry\"><a href=\"#Definisi-Cloud-Foundry\" class=\"headerlink\" title=\"Definisi Cloud Foundry\"></a>Definisi Cloud Foundry</h1><p>Cloud Foundry adalah suatu Paas(Platform as a Service) berbasis open source yang disediakan dikembangkan Pivotal. Platform as a service sendiri adalah service yang digunakan untuk mendeploy aplikasi kita ke cloud. </p>\n<p>Perbedaan Traditional IT, Infrastructure as a Service (IaaS), Platform as a Service (PaaS) dan Software as a Service (SaaS).</p>\n<h1 id=\"Deploy-aplikasi-ke-Pivotal-Cloud-Foundry\"><a href=\"#Deploy-aplikasi-ke-Pivotal-Cloud-Foundry\" class=\"headerlink\" title=\"Deploy aplikasi ke Pivotal Cloud Foundry\"></a>Deploy aplikasi ke Pivotal Cloud Foundry</h1><p>##1. Install Cloud Foundry CLI<br>Kunjungi <a href=\"https://docs.cloudfoundry.org/cf-cli/install-go-cli.html\" target=\"_blank\" rel=\"external\">tautan berikut</a> untuk totorial bagaimana menginstall Cloud Foundry CLI.</p>\n<p>##2. Login ke pivotal API</p>\n<ul>\n<li>Gunakan command <code>cf login -a api.run.pivotal.io</code> pada command line untuk login.</li>\n<li>Kemudian anda akan diminta memasukkan email dan password</li>\n<li>Kemudian pilih space mana yang akan anda gunakan</li>\n</ul>\n<p>##3. Buat file konfgurasi<br>Buat file bernama manifest.yml dan simpan di bagian terluar project anda. Berikut isi dari file tersebut :<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">applications:</span></div><div class=\"line\"><span class=\"attr\">- name:</span> <span class=\"string\">spring-boot-cloud-foundry</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">target/spring-boot.jar</span></div><div class=\"line\"><span class=\"attr\">  domain:</span> <span class=\"string\">cfapps.io</span></div><div class=\"line\"><span class=\"attr\">  memory:</span> <span class=\"number\">512</span><span class=\"string\">m</span></div><div class=\"line\"><span class=\"attr\">  instance:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>Keterangan :</p>\n<ul>\n<li>name : nama aplikasi</li>\n<li>path : letak file hasil kompilasi berada</li>\n<li>domain : domain aplikasi</li>\n<li>memory : memory aplikasi</li>\n<li>instance : jumlah instance/replikasi aplikasi</li>\n</ul>\n<p>##4. Push ke Cloud Foundry<br>Gunakan perintah <code>cf push</code> pada terminal untuk melakukan push aplikasi ke cloud foundry.</p>\n<p>Kemudian akan terlihat log. Tunggu beberapa saat sampai aplikasi anda terdeploy.</p>\n<p>##5. Mengubah Konfigurasi Service<br>Gunakn perintah <code>cf update-service nama-service -c &#39;konfigurasinya&#39;</code><br>Contoh :<br><code>cf update-service config-server -c &#39;{&quot;git&quot;: { &quot;uri&quot;: &quot;http://example.com/config&quot; } }&#39;</code></p>\n<h2 id=\"Login-ke-servic-mysql\"><a href=\"#Login-ke-servic-mysql\" class=\"headerlink\" title=\"Login ke servic mysql\"></a>Login ke servic mysql</h2><p>mysql -u b42da3b446621e -pd66fa990 -h us-cdbr-iron-east-05.cleardb.net ad_a2227b61d61fce9</p>\n","excerpt":"","more":"<h1 id=\"Definisi-Cloud-Foundry\"><a href=\"#Definisi-Cloud-Foundry\" class=\"headerlink\" title=\"Definisi Cloud Foundry\"></a>Definisi Cloud Foundry</h1><p>Cloud Foundry adalah suatu Paas(Platform as a Service) berbasis open source yang disediakan dikembangkan Pivotal. Platform as a service sendiri adalah service yang digunakan untuk mendeploy aplikasi kita ke cloud. </p>\n<p>Perbedaan Traditional IT, Infrastructure as a Service (IaaS), Platform as a Service (PaaS) dan Software as a Service (SaaS).</p>\n<h1 id=\"Deploy-aplikasi-ke-Pivotal-Cloud-Foundry\"><a href=\"#Deploy-aplikasi-ke-Pivotal-Cloud-Foundry\" class=\"headerlink\" title=\"Deploy aplikasi ke Pivotal Cloud Foundry\"></a>Deploy aplikasi ke Pivotal Cloud Foundry</h1><p>##1. Install Cloud Foundry CLI<br>Kunjungi <a href=\"https://docs.cloudfoundry.org/cf-cli/install-go-cli.html\">tautan berikut</a> untuk totorial bagaimana menginstall Cloud Foundry CLI.</p>\n<p>##2. Login ke pivotal API</p>\n<ul>\n<li>Gunakan command <code>cf login -a api.run.pivotal.io</code> pada command line untuk login.</li>\n<li>Kemudian anda akan diminta memasukkan email dan password</li>\n<li>Kemudian pilih space mana yang akan anda gunakan</li>\n</ul>\n<p>##3. Buat file konfgurasi<br>Buat file bernama manifest.yml dan simpan di bagian terluar project anda. Berikut isi dari file tersebut :<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">applications:</span></div><div class=\"line\"><span class=\"attr\">- name:</span> <span class=\"string\">spring-boot-cloud-foundry</span></div><div class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">target/spring-boot.jar</span></div><div class=\"line\"><span class=\"attr\">  domain:</span> <span class=\"string\">cfapps.io</span></div><div class=\"line\"><span class=\"attr\">  memory:</span> <span class=\"number\">512</span><span class=\"string\">m</span></div><div class=\"line\"><span class=\"attr\">  instance:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>Keterangan :</p>\n<ul>\n<li>name : nama aplikasi</li>\n<li>path : letak file hasil kompilasi berada</li>\n<li>domain : domain aplikasi</li>\n<li>memory : memory aplikasi</li>\n<li>instance : jumlah instance/replikasi aplikasi</li>\n</ul>\n<p>##4. Push ke Cloud Foundry<br>Gunakan perintah <code>cf push</code> pada terminal untuk melakukan push aplikasi ke cloud foundry.</p>\n<p>Kemudian akan terlihat log. Tunggu beberapa saat sampai aplikasi anda terdeploy.</p>\n<p>##5. Mengubah Konfigurasi Service<br>Gunakn perintah <code>cf update-service nama-service -c &#39;konfigurasinya&#39;</code><br>Contoh :<br><code>cf update-service config-server -c &#39;{&quot;git&quot;: { &quot;uri&quot;: &quot;http://example.com/config&quot; } }&#39;</code></p>\n<h2 id=\"Login-ke-servic-mysql\"><a href=\"#Login-ke-servic-mysql\" class=\"headerlink\" title=\"Login ke servic mysql\"></a>Login ke servic mysql</h2><p>mysql -u b42da3b446621e -pd66fa990 -h us-cdbr-iron-east-05.cleardb.net ad_a2227b61d61fce9</p>\n"},{"title":"Membuat Circuit Breaker menggunakan Netflix Hystrix","date":"2017-08-18T09:45:52.000Z","_content":"![](https://cdn-images-1.medium.com/max/264/0*gRZh5dHFWz-nFu7Z.png)\n\n[Spring Cloud Netflix Hystrix](https://github.com/Netflix/Hystrix/blob/master/README.md) digunakan untuk memeberikan fallback apabila terjadi kegagalan saat request antar service dengan cara melakukan Load Balancing.\n\n# Defending API from failure by bringing callback\n[Sebelumnya](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/) kita telah membuat eureka server. Sekarang kita akan coba mendefend API kita yang tedapat pada aplikasi `other-eureka-client`. Berikut konfigurasi pada client kedua.\n\n- Tambahkan dependency `spring-cloud-starter-hystrix`.\n- Tambahkan anotasi `@EnableCircuitBreaker` pada main class.\n- Tambahkan anotasi `@HystrixCommand` pada API yang ingin di fallback. Tambahkan parameter `fallbackMethod` di dalam command tersebut. Valuenya merujuk pada nama methode yang berisi string yang akan ditampilkan saat fallback.\n\n```java\n///Berikut contoh controller APInya\n@RequestMapping(\"/api/halo\")\n@HystrixCommand(fallbackMethod = \"fallback\")\npublic String halo(){\n    return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class);\n}\n\n///Berikut contoh method yang akan menampilkan string fallback\npublic String fallback(Throwable hystrixCommand){\n    return \"Fallback Halo\";\n}   \n```\n- Set berapa milisecond lantency untuk metrigger fallback\n```yml\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 10000\n```\n\nApabila request dari `other-eureka-client` ke `eureka-client` sukses makan akan tampil String seperti \"Halo ini dari Client Satu\". Sedangkan apabila gagal maka akan tampil String seperti \"Fallback Halo\".","source":"_posts/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix.md","raw":"---\ntitle: Membuat Circuit Breaker menggunakan Netflix Hystrix\ndate: 2017-08-18 16:45:52\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://cdn-images-1.medium.com/max/264/0*gRZh5dHFWz-nFu7Z.png)\n\n[Spring Cloud Netflix Hystrix](https://github.com/Netflix/Hystrix/blob/master/README.md) digunakan untuk memeberikan fallback apabila terjadi kegagalan saat request antar service dengan cara melakukan Load Balancing.\n\n# Defending API from failure by bringing callback\n[Sebelumnya](https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/) kita telah membuat eureka server. Sekarang kita akan coba mendefend API kita yang tedapat pada aplikasi `other-eureka-client`. Berikut konfigurasi pada client kedua.\n\n- Tambahkan dependency `spring-cloud-starter-hystrix`.\n- Tambahkan anotasi `@EnableCircuitBreaker` pada main class.\n- Tambahkan anotasi `@HystrixCommand` pada API yang ingin di fallback. Tambahkan parameter `fallbackMethod` di dalam command tersebut. Valuenya merujuk pada nama methode yang berisi string yang akan ditampilkan saat fallback.\n\n```java\n///Berikut contoh controller APInya\n@RequestMapping(\"/api/halo\")\n@HystrixCommand(fallbackMethod = \"fallback\")\npublic String halo(){\n    return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class);\n}\n\n///Berikut contoh method yang akan menampilkan string fallback\npublic String fallback(Throwable hystrixCommand){\n    return \"Fallback Halo\";\n}   \n```\n- Set berapa milisecond lantency untuk metrigger fallback\n```yml\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 10000\n```\n\nApabila request dari `other-eureka-client` ke `eureka-client` sukses makan akan tampil String seperti \"Halo ini dari Client Satu\". Sedangkan apabila gagal maka akan tampil String seperti \"Fallback Halo\".","slug":"pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix","published":1,"updated":"2017-08-20T02:19:47.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnoo0053islpasl1ilqx","content":"<p><img src=\"https://cdn-images-1.medium.com/max/264/0*gRZh5dHFWz-nFu7Z.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/README.md\" target=\"_blank\" rel=\"external\">Spring Cloud Netflix Hystrix</a> digunakan untuk memeberikan fallback apabila terjadi kegagalan saat request antar service dengan cara melakukan Load Balancing.</p>\n<h1 id=\"Defending-API-from-failure-by-bringing-callback\"><a href=\"#Defending-API-from-failure-by-bringing-callback\" class=\"headerlink\" title=\"Defending API from failure by bringing callback\"></a>Defending API from failure by bringing callback</h1><p><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/\">Sebelumnya</a> kita telah membuat eureka server. Sekarang kita akan coba mendefend API kita yang tedapat pada aplikasi <code>other-eureka-client</code>. Berikut konfigurasi pada client kedua.</p>\n<ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-hystrix</code>.</li>\n<li>Tambahkan anotasi <code>@EnableCircuitBreaker</code> pada main class.</li>\n<li>Tambahkan anotasi <code>@HystrixCommand</code> pada API yang ingin di fallback. Tambahkan parameter <code>fallbackMethod</code> di dalam command tersebut. Valuenya merujuk pada nama methode yang berisi string yang akan ditampilkan saat fallback.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///Berikut contoh controller APInya</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\"><span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"fallback\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://eureka-client/api/halo\"</span>,String.class);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///Berikut contoh method yang akan menampilkan string fallback</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallback</span><span class=\"params\">(Throwable hystrixCommand)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Fallback Halo\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Set berapa milisecond lantency untuk metrigger fallback<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">hystrix:</span></div><div class=\"line\"><span class=\"attr\">  command:</span></div><div class=\"line\"><span class=\"attr\">    default:</span></div><div class=\"line\"><span class=\"attr\">      execution:</span></div><div class=\"line\"><span class=\"attr\">        isolation:</span></div><div class=\"line\"><span class=\"attr\">          thread:</span></div><div class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">10000</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Apabila request dari <code>other-eureka-client</code> ke <code>eureka-client</code> sukses makan akan tampil String seperti “Halo ini dari Client Satu”. Sedangkan apabila gagal maka akan tampil String seperti “Fallback Halo”.</p>\n","excerpt":"","more":"<p><img src=\"https://cdn-images-1.medium.com/max/264/0*gRZh5dHFWz-nFu7Z.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/Netflix/Hystrix/blob/master/README.md\">Spring Cloud Netflix Hystrix</a> digunakan untuk memeberikan fallback apabila terjadi kegagalan saat request antar service dengan cara melakukan Load Balancing.</p>\n<h1 id=\"Defending-API-from-failure-by-bringing-callback\"><a href=\"#Defending-API-from-failure-by-bringing-callback\" class=\"headerlink\" title=\"Defending API from failure by bringing callback\"></a>Defending API from failure by bringing callback</h1><p><a href=\"https://ciazhar.github.io/2017/08/15/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service/\">Sebelumnya</a> kita telah membuat eureka server. Sekarang kita akan coba mendefend API kita yang tedapat pada aplikasi <code>other-eureka-client</code>. Berikut konfigurasi pada client kedua.</p>\n<ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-hystrix</code>.</li>\n<li>Tambahkan anotasi <code>@EnableCircuitBreaker</code> pada main class.</li>\n<li>Tambahkan anotasi <code>@HystrixCommand</code> pada API yang ingin di fallback. Tambahkan parameter <code>fallbackMethod</code> di dalam command tersebut. Valuenya merujuk pada nama methode yang berisi string yang akan ditampilkan saat fallback.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///Berikut contoh controller APInya</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\"><span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"fallback\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://eureka-client/api/halo\"</span>,String.class);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///Berikut contoh method yang akan menampilkan string fallback</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fallback</span><span class=\"params\">(Throwable hystrixCommand)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Fallback Halo\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Set berapa milisecond lantency untuk metrigger fallback<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">hystrix:</span></div><div class=\"line\"><span class=\"attr\">  command:</span></div><div class=\"line\"><span class=\"attr\">    default:</span></div><div class=\"line\"><span class=\"attr\">      execution:</span></div><div class=\"line\"><span class=\"attr\">        isolation:</span></div><div class=\"line\"><span class=\"attr\">          thread:</span></div><div class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">10000</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Apabila request dari <code>other-eureka-client</code> ke <code>eureka-client</code> sukses makan akan tampil String seperti “Halo ini dari Client Satu”. Sedangkan apabila gagal maka akan tampil String seperti “Fallback Halo”.</p>\n"},{"title":"Config Service File System","date":"2017-07-28T02:08:13.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Membuat Config Service yang berisi konfigurasi 1 service\n- Buat project dengan spring initializr.\n- Menambahkan dependency `spring-cloud-config-server`.\n- Menambah anotasi `@EnableConfigServer` pada main class.\n- Konfigurasi config service (resource/application.properties)\n\n```properties\n# Konfigurasi Port\nserver.port=8080\n\n# Memberitahu bahwa file konfigurasi berada dalam 1 project\nspring.profiles.active=native\n\n# json pretty print\nspring.jackson.serialization.indent-output=true\n```\n\n- Membuat File Konfigurasi\nSelanjutnya kita akan membuat beberapa file konfigurasi. Semisal kita akan membuat konfigurasi database dan konfigurasi messaging. Di setiap konfigurasi tersebut kita juga dapat menambahkan profile, semisal untuk database kita dapat membuat untuk profile development dan profile qa. File file konfigurasi nantinya tersebut akan disimpan dalam di folder `resource/config`.\n\nContoh Konfigurasi Database (resource/config/db.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Database Dev (resource/config/db-dev.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Database QA (resource/config/db-qa.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Messaging (resource/config/mq.properties)\n```\nbrokeurl=localhost:5672\nusername=guest\npassword=guest\n```\n\nKemudian coba jalankan config service. \n\nSpring Cloud Config menyediakan API untuk konfigurasi yang disimpan olehnya. Untuk mengaksesnya dapat menggunakan endpoint berikut :\n```\nhttp://localhost:8080/{name}/{profile}/{label}\n```\nKeterangan : \n- name berarti nama dari servicenya.\n- profile berarti profile dari servicenya. Biasanya setiap service memiliki beberapa profile seperti dev, staging, deploy.\n- label berati label tambahan\n\nContoh enpoint yang dapat di akses :\n```\nhttp://localhost:8080/db/default\nhttp://localhost:8080/db/dev\nhttp://localhost:8080/db/qa\nhttp://localhost:8080/mq/default\n```\n\n# Membuat Config Service yang berisi lebih dari konfigurasi 1 service\n\nSetelah kita membuat config service dengan 1 konfigurasi service, kita akan coba menambahkan beberapa konfigurasi aplikasi pada config service kita. Karena pada dasarnya config service ini yang akan menghandle file file konfigurasi dari bebagai microservice.\n\n- Buat File konfigurasi\nContoh Konfigurasi aplikasi 1 Default(resource/app1/myapp.properties)\n```\nfoo=bar\nbar=bam\n```\nContoh Konfigurasi aplikasi 1 untuk Developer Stage(resource/app1/myapp-dev.properties)\n```\nfoo=bardev\nbar=bam\n```\nContoh Konfigurasi aplikasi 2 Default (resource/app2/myapp.properties)\n```\nfoo=bar\nbar=bam\n```\n\n- Tambahkan konfigurasi untuk multiple aplikasi menggunakan `spring.cloud.config.server.native.search-locations:`\n\n\nBerikut adalah contohnya :\n```\nspring.cloud.config.server.native.search-locations:classpath:/config, classpath:/app1, classpath:/app2\n```\nNama folder konfigurasi ditulis setelah classpath:/ . Dalam konteks ini classpath berada di direktori src/main/resource.\n\n\nUntuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :\n```\nhttp://localhost:8080/myapp/default\nhttp://localhost:8080/myapp/dev\nhttp://localhost:8080/myapp-default.json\nhttp://localhost:8080/myapp-dev.json\n```\n\n# Override value konfigurasi\nKita dapat mengoverride konfgurasi yang identik, semisal untuk file `resource/app1/myapp.properties` dan `resource/app2/myapp.properties`. Kedua file konfigurasi tersebut sama-sama memiliki parameter bernama `foo`. Apabila anda ingin mengoverride value dari foo tersebut, dapat dilakukan dengan beberapa langkah berikut.\n\n- Tambahkan konfigurasi untuk override konfigurasi\n```\nspring.cloud.config.server.overrides.<nama-parameter>=<value>\n```\nPada script diatas ada 2 nilai yang harus diisi yaitu nama-parameter yang akan di override  dan value dari parameter tersebut\n\nUntuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :\n```\nhttp://localhost:8080/myapp/default\nhttp://localhost:8080/myapp-default.json\nhttp://localhost:8080/myapp-default.yml\n```\n","source":"_posts/pemrograman/spring/microservice/config-service/2.Config-Service-File-System.md","raw":"---\ntitle: Config Service File System\ndate: 2017-07-28 09:08:13\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Membuat Config Service yang berisi konfigurasi 1 service\n- Buat project dengan spring initializr.\n- Menambahkan dependency `spring-cloud-config-server`.\n- Menambah anotasi `@EnableConfigServer` pada main class.\n- Konfigurasi config service (resource/application.properties)\n\n```properties\n# Konfigurasi Port\nserver.port=8080\n\n# Memberitahu bahwa file konfigurasi berada dalam 1 project\nspring.profiles.active=native\n\n# json pretty print\nspring.jackson.serialization.indent-output=true\n```\n\n- Membuat File Konfigurasi\nSelanjutnya kita akan membuat beberapa file konfigurasi. Semisal kita akan membuat konfigurasi database dan konfigurasi messaging. Di setiap konfigurasi tersebut kita juga dapat menambahkan profile, semisal untuk database kita dapat membuat untuk profile development dan profile qa. File file konfigurasi nantinya tersebut akan disimpan dalam di folder `resource/config`.\n\nContoh Konfigurasi Database (resource/config/db.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Database Dev (resource/config/db-dev.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Database QA (resource/config/db-qa.properties)\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=mysql:jdbc://localhost:3306/test\nusername=root\npassword=password\n```\nContoh Konfigurasi Messaging (resource/config/mq.properties)\n```\nbrokeurl=localhost:5672\nusername=guest\npassword=guest\n```\n\nKemudian coba jalankan config service. \n\nSpring Cloud Config menyediakan API untuk konfigurasi yang disimpan olehnya. Untuk mengaksesnya dapat menggunakan endpoint berikut :\n```\nhttp://localhost:8080/{name}/{profile}/{label}\n```\nKeterangan : \n- name berarti nama dari servicenya.\n- profile berarti profile dari servicenya. Biasanya setiap service memiliki beberapa profile seperti dev, staging, deploy.\n- label berati label tambahan\n\nContoh enpoint yang dapat di akses :\n```\nhttp://localhost:8080/db/default\nhttp://localhost:8080/db/dev\nhttp://localhost:8080/db/qa\nhttp://localhost:8080/mq/default\n```\n\n# Membuat Config Service yang berisi lebih dari konfigurasi 1 service\n\nSetelah kita membuat config service dengan 1 konfigurasi service, kita akan coba menambahkan beberapa konfigurasi aplikasi pada config service kita. Karena pada dasarnya config service ini yang akan menghandle file file konfigurasi dari bebagai microservice.\n\n- Buat File konfigurasi\nContoh Konfigurasi aplikasi 1 Default(resource/app1/myapp.properties)\n```\nfoo=bar\nbar=bam\n```\nContoh Konfigurasi aplikasi 1 untuk Developer Stage(resource/app1/myapp-dev.properties)\n```\nfoo=bardev\nbar=bam\n```\nContoh Konfigurasi aplikasi 2 Default (resource/app2/myapp.properties)\n```\nfoo=bar\nbar=bam\n```\n\n- Tambahkan konfigurasi untuk multiple aplikasi menggunakan `spring.cloud.config.server.native.search-locations:`\n\n\nBerikut adalah contohnya :\n```\nspring.cloud.config.server.native.search-locations:classpath:/config, classpath:/app1, classpath:/app2\n```\nNama folder konfigurasi ditulis setelah classpath:/ . Dalam konteks ini classpath berada di direktori src/main/resource.\n\n\nUntuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :\n```\nhttp://localhost:8080/myapp/default\nhttp://localhost:8080/myapp/dev\nhttp://localhost:8080/myapp-default.json\nhttp://localhost:8080/myapp-dev.json\n```\n\n# Override value konfigurasi\nKita dapat mengoverride konfgurasi yang identik, semisal untuk file `resource/app1/myapp.properties` dan `resource/app2/myapp.properties`. Kedua file konfigurasi tersebut sama-sama memiliki parameter bernama `foo`. Apabila anda ingin mengoverride value dari foo tersebut, dapat dilakukan dengan beberapa langkah berikut.\n\n- Tambahkan konfigurasi untuk override konfigurasi\n```\nspring.cloud.config.server.overrides.<nama-parameter>=<value>\n```\nPada script diatas ada 2 nilai yang harus diisi yaitu nama-parameter yang akan di override  dan value dari parameter tersebut\n\nUntuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :\n```\nhttp://localhost:8080/myapp/default\nhttp://localhost:8080/myapp-default.json\nhttp://localhost:8080/myapp-default.yml\n```\n","slug":"pemrograman/spring/microservice/config-service/2.Config-Service-File-System","published":1,"updated":"2017-08-20T03:35:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnou0054islppqrdx7kf","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Membuat-Config-Service-yang-berisi-konfigurasi-1-service\"><a href=\"#Membuat-Config-Service-yang-berisi-konfigurasi-1-service\" class=\"headerlink\" title=\"Membuat Config Service yang berisi konfigurasi 1 service\"></a>Membuat Config Service yang berisi konfigurasi 1 service</h1><ul>\n<li>Buat project dengan spring initializr.</li>\n<li>Menambahkan dependency <code>spring-cloud-config-server</code>.</li>\n<li>Menambah anotasi <code>@EnableConfigServer</code> pada main class.</li>\n<li>Konfigurasi config service (resource/application.properties)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Konfigurasi Port</div><div class=\"line\">server.port=8080</div><div class=\"line\"></div><div class=\"line\"># Memberitahu bahwa file konfigurasi berada dalam 1 project</div><div class=\"line\">spring.profiles.active=native</div><div class=\"line\"></div><div class=\"line\"># json pretty print</div><div class=\"line\">spring.jackson.serialization.indent-output=true</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat File Konfigurasi<br>Selanjutnya kita akan membuat beberapa file konfigurasi. Semisal kita akan membuat konfigurasi database dan konfigurasi messaging. Di setiap konfigurasi tersebut kita juga dapat menambahkan profile, semisal untuk database kita dapat membuat untuk profile development dan profile qa. File file konfigurasi nantinya tersebut akan disimpan dalam di folder <code>resource/config</code>.</li>\n</ul>\n<p>Contoh Konfigurasi Database (resource/config/db.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Database Dev (resource/config/db-dev.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Database QA (resource/config/db-qa.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Messaging (resource/config/mq.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brokeurl=localhost:5672</div><div class=\"line\">username=guest</div><div class=\"line\">password=guest</div></pre></td></tr></table></figure></p>\n<p>Kemudian coba jalankan config service. </p>\n<p>Spring Cloud Config menyediakan API untuk konfigurasi yang disimpan olehnya. Untuk mengaksesnya dapat menggunakan endpoint berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;</div></pre></td></tr></table></figure></p>\n<p>Keterangan : </p>\n<ul>\n<li>name berarti nama dari servicenya.</li>\n<li>profile berarti profile dari servicenya. Biasanya setiap service memiliki beberapa profile seperti dev, staging, deploy.</li>\n<li>label berati label tambahan</li>\n</ul>\n<p>Contoh enpoint yang dapat di akses :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/db/default</div><div class=\"line\">http://localhost:8080/db/dev</div><div class=\"line\">http://localhost:8080/db/qa</div><div class=\"line\">http://localhost:8080/mq/default</div></pre></td></tr></table></figure></p>\n<h1 id=\"Membuat-Config-Service-yang-berisi-lebih-dari-konfigurasi-1-service\"><a href=\"#Membuat-Config-Service-yang-berisi-lebih-dari-konfigurasi-1-service\" class=\"headerlink\" title=\"Membuat Config Service yang berisi lebih dari konfigurasi 1 service\"></a>Membuat Config Service yang berisi lebih dari konfigurasi 1 service</h1><p>Setelah kita membuat config service dengan 1 konfigurasi service, kita akan coba menambahkan beberapa konfigurasi aplikasi pada config service kita. Karena pada dasarnya config service ini yang akan menghandle file file konfigurasi dari bebagai microservice.</p>\n<ul>\n<li>Buat File konfigurasi<br>Contoh Konfigurasi aplikasi 1 Default(resource/app1/myapp.properties)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bar</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Contoh Konfigurasi aplikasi 1 untuk Developer Stage(resource/app1/myapp-dev.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bardev</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi aplikasi 2 Default (resource/app2/myapp.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bar</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Tambahkan konfigurasi untuk multiple aplikasi menggunakan <code>spring.cloud.config.server.native.search-locations:</code></li>\n</ul>\n<p>Berikut adalah contohnya :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.cloud.config.server.native.search-locations:classpath:/config, classpath:/app1, classpath:/app2</div></pre></td></tr></table></figure></p>\n<p>Nama folder konfigurasi ditulis setelah classpath:/ . Dalam konteks ini classpath berada di direktori src/main/resource.</p>\n<p>Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/myapp/default</div><div class=\"line\">http://localhost:8080/myapp/dev</div><div class=\"line\">http://localhost:8080/myapp-default.json</div><div class=\"line\">http://localhost:8080/myapp-dev.json</div></pre></td></tr></table></figure></p>\n<h1 id=\"Override-value-konfigurasi\"><a href=\"#Override-value-konfigurasi\" class=\"headerlink\" title=\"Override value konfigurasi\"></a>Override value konfigurasi</h1><p>Kita dapat mengoverride konfgurasi yang identik, semisal untuk file <code>resource/app1/myapp.properties</code> dan <code>resource/app2/myapp.properties</code>. Kedua file konfigurasi tersebut sama-sama memiliki parameter bernama <code>foo</code>. Apabila anda ingin mengoverride value dari foo tersebut, dapat dilakukan dengan beberapa langkah berikut.</p>\n<ul>\n<li>Tambahkan konfigurasi untuk override konfigurasi<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.cloud.config.server.overrides.&lt;nama-parameter&gt;=&lt;value&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Pada script diatas ada 2 nilai yang harus diisi yaitu nama-parameter yang akan di override  dan value dari parameter tersebut</p>\n<p>Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/myapp/default</div><div class=\"line\">http://localhost:8080/myapp-default.json</div><div class=\"line\">http://localhost:8080/myapp-default.yml</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Membuat-Config-Service-yang-berisi-konfigurasi-1-service\"><a href=\"#Membuat-Config-Service-yang-berisi-konfigurasi-1-service\" class=\"headerlink\" title=\"Membuat Config Service yang berisi konfigurasi 1 service\"></a>Membuat Config Service yang berisi konfigurasi 1 service</h1><ul>\n<li>Buat project dengan spring initializr.</li>\n<li>Menambahkan dependency <code>spring-cloud-config-server</code>.</li>\n<li>Menambah anotasi <code>@EnableConfigServer</code> pada main class.</li>\n<li>Konfigurasi config service (resource/application.properties)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Konfigurasi Port</div><div class=\"line\">server.port=8080</div><div class=\"line\"></div><div class=\"line\"># Memberitahu bahwa file konfigurasi berada dalam 1 project</div><div class=\"line\">spring.profiles.active=native</div><div class=\"line\"></div><div class=\"line\"># json pretty print</div><div class=\"line\">spring.jackson.serialization.indent-output=true</div></pre></td></tr></table></figure>\n<ul>\n<li>Membuat File Konfigurasi<br>Selanjutnya kita akan membuat beberapa file konfigurasi. Semisal kita akan membuat konfigurasi database dan konfigurasi messaging. Di setiap konfigurasi tersebut kita juga dapat menambahkan profile, semisal untuk database kita dapat membuat untuk profile development dan profile qa. File file konfigurasi nantinya tersebut akan disimpan dalam di folder <code>resource/config</code>.</li>\n</ul>\n<p>Contoh Konfigurasi Database (resource/config/db.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Database Dev (resource/config/db-dev.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Database QA (resource/config/db-qa.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driverClassName=com.mysql.jdbc.Driver</div><div class=\"line\">url=mysql:jdbc://localhost:3306/test</div><div class=\"line\">username=root</div><div class=\"line\">password=password</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi Messaging (resource/config/mq.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brokeurl=localhost:5672</div><div class=\"line\">username=guest</div><div class=\"line\">password=guest</div></pre></td></tr></table></figure></p>\n<p>Kemudian coba jalankan config service. </p>\n<p>Spring Cloud Config menyediakan API untuk konfigurasi yang disimpan olehnya. Untuk mengaksesnya dapat menggunakan endpoint berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;</div></pre></td></tr></table></figure></p>\n<p>Keterangan : </p>\n<ul>\n<li>name berarti nama dari servicenya.</li>\n<li>profile berarti profile dari servicenya. Biasanya setiap service memiliki beberapa profile seperti dev, staging, deploy.</li>\n<li>label berati label tambahan</li>\n</ul>\n<p>Contoh enpoint yang dapat di akses :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/db/default</div><div class=\"line\">http://localhost:8080/db/dev</div><div class=\"line\">http://localhost:8080/db/qa</div><div class=\"line\">http://localhost:8080/mq/default</div></pre></td></tr></table></figure></p>\n<h1 id=\"Membuat-Config-Service-yang-berisi-lebih-dari-konfigurasi-1-service\"><a href=\"#Membuat-Config-Service-yang-berisi-lebih-dari-konfigurasi-1-service\" class=\"headerlink\" title=\"Membuat Config Service yang berisi lebih dari konfigurasi 1 service\"></a>Membuat Config Service yang berisi lebih dari konfigurasi 1 service</h1><p>Setelah kita membuat config service dengan 1 konfigurasi service, kita akan coba menambahkan beberapa konfigurasi aplikasi pada config service kita. Karena pada dasarnya config service ini yang akan menghandle file file konfigurasi dari bebagai microservice.</p>\n<ul>\n<li>Buat File konfigurasi<br>Contoh Konfigurasi aplikasi 1 Default(resource/app1/myapp.properties)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bar</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Contoh Konfigurasi aplikasi 1 untuk Developer Stage(resource/app1/myapp-dev.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bardev</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure></p>\n<p>Contoh Konfigurasi aplikasi 2 Default (resource/app2/myapp.properties)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo=bar</div><div class=\"line\">bar=bam</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Tambahkan konfigurasi untuk multiple aplikasi menggunakan <code>spring.cloud.config.server.native.search-locations:</code></li>\n</ul>\n<p>Berikut adalah contohnya :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.cloud.config.server.native.search-locations:classpath:/config, classpath:/app1, classpath:/app2</div></pre></td></tr></table></figure></p>\n<p>Nama folder konfigurasi ditulis setelah classpath:/ . Dalam konteks ini classpath berada di direktori src/main/resource.</p>\n<p>Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/myapp/default</div><div class=\"line\">http://localhost:8080/myapp/dev</div><div class=\"line\">http://localhost:8080/myapp-default.json</div><div class=\"line\">http://localhost:8080/myapp-dev.json</div></pre></td></tr></table></figure></p>\n<h1 id=\"Override-value-konfigurasi\"><a href=\"#Override-value-konfigurasi\" class=\"headerlink\" title=\"Override value konfigurasi\"></a>Override value konfigurasi</h1><p>Kita dapat mengoverride konfgurasi yang identik, semisal untuk file <code>resource/app1/myapp.properties</code> dan <code>resource/app2/myapp.properties</code>. Kedua file konfigurasi tersebut sama-sama memiliki parameter bernama <code>foo</code>. Apabila anda ingin mengoverride value dari foo tersebut, dapat dilakukan dengan beberapa langkah berikut.</p>\n<ul>\n<li>Tambahkan konfigurasi untuk override konfigurasi<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.cloud.config.server.overrides.&lt;nama-parameter&gt;=&lt;value&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Pada script diatas ada 2 nilai yang harus diisi yaitu nama-parameter yang akan di override  dan value dari parameter tersebut</p>\n<p>Untuk dapat melihat hasilnya anda dapat mengakses beberapa url berikut :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/myapp/default</div><div class=\"line\">http://localhost:8080/myapp-default.json</div><div class=\"line\">http://localhost:8080/myapp-default.yml</div></pre></td></tr></table></figure></p>\n"},{"title":"Membuat API Gatewat Menggunakan Netflix Zuul","date":"2017-08-18T15:00:46.000Z","_content":"![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n[Spring Cloud Netflix Zuul](https://github.com/Netflix/zuul) merupakan gerbang utama yang akan dilewati oleh request dari apps atau website yang menuju backend. Zuul dapat berfungsi sebagai API Gateway, security, dll.\n\n# Membuat API Gateway\n[Sebelumnya](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/) kita telah membuat eureka server dan eureka client yang terintegrasi dengan Hystrix. \nSekarang kita akan mencoba membuat api gatewat dan mengintegrasikanya.\n\n- Buat project baru menggunakan Spring Initializr\n- Tambahkan dependency `spring-cloud-starter-zuul`.\n- Tambahkan anotasi `@EnableZuulProxy` pada main class\n- Tambahkan konfigurasi zuul\n```yml\nspring:\n  application:\n    name: api-gateway\nzuul:\n  prefix: /api\n  routes:\n    eureka-client:\n      path: /pertama/**\n      serviceId: EUREKA-CLIENT\n    other-eureka-client:\n      path: /kedua/**\n      serviceId: OTHER-EUREKA-CLIENT\nserver:\n  port: 8004\n```\nDengan adanya API Gateway untuk memanggil API dari masing masing backend tidak harus memanggilnya secara manual dengan menyebutkan portnya, tetapi hanya perlu memanggilnya via API Gateway sesuai pathnya. Nantinya service yang bernama eureka-client akan diinisialisasi menggunakan path /pertama. Sedangkan service yang bernama eureka-client akan diinisialisasi menggunakan path /kedua. \n\nApabila dulu jika ingin mengakses API di service eureka-client menggunakan http://localhost:8002/api/halo sekarang dapat diganti dengan http://localhost:8004/api/pertama/api/halo. Sedangkan apabila dulu jika ingin mengakses API di service other-eureka-client menggunakan http://localhost:8003/api/halo sekarang dapat diganti dengan http://localhost:8004/api/kedua/api/halo.\n\nHal ini akan meringankan beban dalam development aplikasi karena tidak perlu menghafal port untuk setiap servicenya, tetapi hanya perlu mengetahui nama servinya.\n\n- Konfigurasi tambahan\n```yml\n# Konfigurasi Config Service\nspring:\n  cloud:\n    config:\n      uri: http://localhost:10003\n\n# Konfigurasi Discovery Service\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8001/eureka\n\n# Konfigurasi Circuit Breaker\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 10000\n```","source":"_posts/pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway.md","raw":"---\ntitle: Membuat API Gatewat Menggunakan Netflix Zuul\ndate: 2017-08-18 22:00:46\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n[Spring Cloud Netflix Zuul](https://github.com/Netflix/zuul) merupakan gerbang utama yang akan dilewati oleh request dari apps atau website yang menuju backend. Zuul dapat berfungsi sebagai API Gateway, security, dll.\n\n# Membuat API Gateway\n[Sebelumnya](https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/) kita telah membuat eureka server dan eureka client yang terintegrasi dengan Hystrix. \nSekarang kita akan mencoba membuat api gatewat dan mengintegrasikanya.\n\n- Buat project baru menggunakan Spring Initializr\n- Tambahkan dependency `spring-cloud-starter-zuul`.\n- Tambahkan anotasi `@EnableZuulProxy` pada main class\n- Tambahkan konfigurasi zuul\n```yml\nspring:\n  application:\n    name: api-gateway\nzuul:\n  prefix: /api\n  routes:\n    eureka-client:\n      path: /pertama/**\n      serviceId: EUREKA-CLIENT\n    other-eureka-client:\n      path: /kedua/**\n      serviceId: OTHER-EUREKA-CLIENT\nserver:\n  port: 8004\n```\nDengan adanya API Gateway untuk memanggil API dari masing masing backend tidak harus memanggilnya secara manual dengan menyebutkan portnya, tetapi hanya perlu memanggilnya via API Gateway sesuai pathnya. Nantinya service yang bernama eureka-client akan diinisialisasi menggunakan path /pertama. Sedangkan service yang bernama eureka-client akan diinisialisasi menggunakan path /kedua. \n\nApabila dulu jika ingin mengakses API di service eureka-client menggunakan http://localhost:8002/api/halo sekarang dapat diganti dengan http://localhost:8004/api/pertama/api/halo. Sedangkan apabila dulu jika ingin mengakses API di service other-eureka-client menggunakan http://localhost:8003/api/halo sekarang dapat diganti dengan http://localhost:8004/api/kedua/api/halo.\n\nHal ini akan meringankan beban dalam development aplikasi karena tidak perlu menghafal port untuk setiap servicenya, tetapi hanya perlu mengetahui nama servinya.\n\n- Konfigurasi tambahan\n```yml\n# Konfigurasi Config Service\nspring:\n  cloud:\n    config:\n      uri: http://localhost:10003\n\n# Konfigurasi Discovery Service\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8001/eureka\n\n# Konfigurasi Circuit Breaker\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 10000\n```","slug":"pemrograman/spring/microservice/api-gateway-zuul/zuul-as-api-gateway","published":1,"updated":"2017-08-20T02:24:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnoy0055islpdesmtwel","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p><a href=\"https://github.com/Netflix/zuul\" target=\"_blank\" rel=\"external\">Spring Cloud Netflix Zuul</a> merupakan gerbang utama yang akan dilewati oleh request dari apps atau website yang menuju backend. Zuul dapat berfungsi sebagai API Gateway, security, dll.</p>\n<h1 id=\"Membuat-API-Gateway\"><a href=\"#Membuat-API-Gateway\" class=\"headerlink\" title=\"Membuat API Gateway\"></a>Membuat API Gateway</h1><p><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/\">Sebelumnya</a> kita telah membuat eureka server dan eureka client yang terintegrasi dengan Hystrix.<br>Sekarang kita akan mencoba membuat api gatewat dan mengintegrasikanya.</p>\n<ul>\n<li>Buat project baru menggunakan Spring Initializr</li>\n<li>Tambahkan dependency <code>spring-cloud-starter-zuul</code>.</li>\n<li>Tambahkan anotasi <code>@EnableZuulProxy</code> pada main class</li>\n<li>Tambahkan konfigurasi zuul<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">api-gateway</span></div><div class=\"line\"><span class=\"attr\">zuul:</span></div><div class=\"line\"><span class=\"attr\">  prefix:</span> <span class=\"string\">/api</span></div><div class=\"line\"><span class=\"attr\">  routes:</span></div><div class=\"line\"><span class=\"attr\">    eureka-client:</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/pertama/**</span></div><div class=\"line\"><span class=\"attr\">      serviceId:</span> <span class=\"string\">EUREKA-CLIENT</span></div><div class=\"line\"><span class=\"attr\">    other-eureka-client:</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/kedua/**</span></div><div class=\"line\"><span class=\"attr\">      serviceId:</span> <span class=\"string\">OTHER-EUREKA-CLIENT</span></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8004</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Dengan adanya API Gateway untuk memanggil API dari masing masing backend tidak harus memanggilnya secara manual dengan menyebutkan portnya, tetapi hanya perlu memanggilnya via API Gateway sesuai pathnya. Nantinya service yang bernama eureka-client akan diinisialisasi menggunakan path /pertama. Sedangkan service yang bernama eureka-client akan diinisialisasi menggunakan path /kedua. </p>\n<p>Apabila dulu jika ingin mengakses API di service eureka-client menggunakan <a href=\"http://localhost:8002/api/halo\" target=\"_blank\" rel=\"external\">http://localhost:8002/api/halo</a> sekarang dapat diganti dengan <a href=\"http://localhost:8004/api/pertama/api/halo\" target=\"_blank\" rel=\"external\">http://localhost:8004/api/pertama/api/halo</a>. Sedangkan apabila dulu jika ingin mengakses API di service other-eureka-client menggunakan <a href=\"http://localhost:8003/api/halo\" target=\"_blank\" rel=\"external\">http://localhost:8003/api/halo</a> sekarang dapat diganti dengan <a href=\"http://localhost:8004/api/kedua/api/halo\" target=\"_blank\" rel=\"external\">http://localhost:8004/api/kedua/api/halo</a>.</p>\n<p>Hal ini akan meringankan beban dalam development aplikasi karena tidak perlu menghafal port untuk setiap servicenya, tetapi hanya perlu mengetahui nama servinya.</p>\n<ul>\n<li>Konfigurasi tambahan<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Konfigurasi Config Service</span></div><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      uri:</span> <span class=\"attr\">http://localhost:10003</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Konfigurasi Discovery Service</span></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    service-url:</span></div><div class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8001/eureka</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Konfigurasi Circuit Breaker</span></div><div class=\"line\"><span class=\"attr\">hystrix:</span></div><div class=\"line\"><span class=\"attr\">  command:</span></div><div class=\"line\"><span class=\"attr\">    default:</span></div><div class=\"line\"><span class=\"attr\">      execution:</span></div><div class=\"line\"><span class=\"attr\">        isolation:</span></div><div class=\"line\"><span class=\"attr\">          thread:</span></div><div class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">10000</span></div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p><a href=\"https://github.com/Netflix/zuul\">Spring Cloud Netflix Zuul</a> merupakan gerbang utama yang akan dilewati oleh request dari apps atau website yang menuju backend. Zuul dapat berfungsi sebagai API Gateway, security, dll.</p>\n<h1 id=\"Membuat-API-Gateway\"><a href=\"#Membuat-API-Gateway\" class=\"headerlink\" title=\"Membuat API Gateway\"></a>Membuat API Gateway</h1><p><a href=\"https://ciazhar.github.io/2017/08/18/pemrograman/spring/microservice/circuit-breaker-hystrix/circuit-breaker-with-hystrix/\">Sebelumnya</a> kita telah membuat eureka server dan eureka client yang terintegrasi dengan Hystrix.<br>Sekarang kita akan mencoba membuat api gatewat dan mengintegrasikanya.</p>\n<ul>\n<li>Buat project baru menggunakan Spring Initializr</li>\n<li>Tambahkan dependency <code>spring-cloud-starter-zuul</code>.</li>\n<li>Tambahkan anotasi <code>@EnableZuulProxy</code> pada main class</li>\n<li>Tambahkan konfigurasi zuul<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">api-gateway</span></div><div class=\"line\"><span class=\"attr\">zuul:</span></div><div class=\"line\"><span class=\"attr\">  prefix:</span> <span class=\"string\">/api</span></div><div class=\"line\"><span class=\"attr\">  routes:</span></div><div class=\"line\"><span class=\"attr\">    eureka-client:</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/pertama/**</span></div><div class=\"line\"><span class=\"attr\">      serviceId:</span> <span class=\"string\">EUREKA-CLIENT</span></div><div class=\"line\"><span class=\"attr\">    other-eureka-client:</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/kedua/**</span></div><div class=\"line\"><span class=\"attr\">      serviceId:</span> <span class=\"string\">OTHER-EUREKA-CLIENT</span></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8004</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Dengan adanya API Gateway untuk memanggil API dari masing masing backend tidak harus memanggilnya secara manual dengan menyebutkan portnya, tetapi hanya perlu memanggilnya via API Gateway sesuai pathnya. Nantinya service yang bernama eureka-client akan diinisialisasi menggunakan path /pertama. Sedangkan service yang bernama eureka-client akan diinisialisasi menggunakan path /kedua. </p>\n<p>Apabila dulu jika ingin mengakses API di service eureka-client menggunakan <a href=\"http://localhost:8002/api/halo\">http://localhost:8002/api/halo</a> sekarang dapat diganti dengan <a href=\"http://localhost:8004/api/pertama/api/halo\">http://localhost:8004/api/pertama/api/halo</a>. Sedangkan apabila dulu jika ingin mengakses API di service other-eureka-client menggunakan <a href=\"http://localhost:8003/api/halo\">http://localhost:8003/api/halo</a> sekarang dapat diganti dengan <a href=\"http://localhost:8004/api/kedua/api/halo\">http://localhost:8004/api/kedua/api/halo</a>.</p>\n<p>Hal ini akan meringankan beban dalam development aplikasi karena tidak perlu menghafal port untuk setiap servicenya, tetapi hanya perlu mengetahui nama servinya.</p>\n<ul>\n<li>Konfigurasi tambahan<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Konfigurasi Config Service</span></div><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      uri:</span> <span class=\"attr\">http://localhost:10003</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Konfigurasi Discovery Service</span></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    service-url:</span></div><div class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8001/eureka</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Konfigurasi Circuit Breaker</span></div><div class=\"line\"><span class=\"attr\">hystrix:</span></div><div class=\"line\"><span class=\"attr\">  command:</span></div><div class=\"line\"><span class=\"attr\">    default:</span></div><div class=\"line\"><span class=\"attr\">      execution:</span></div><div class=\"line\"><span class=\"attr\">        isolation:</span></div><div class=\"line\"><span class=\"attr\">          thread:</span></div><div class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">10000</span></div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Config Service Vault Server","date":"2017-07-28T02:08:13.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Membuat config service vault\n\nPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam file system atau dalam project. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam vault server.\n\n> Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.(https://www.vaultproject.io/intro/index.html)\n\nApabila anda belum menginstal vault server, anda dapat menginstalnya menggunakan tutorial berikut : http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/\n\n- Jalankan vault server\n```\nvault server -dev\n```\nSecara default vault server akan berjalan di localhost port 8200.\n\n- Konfigurasi vault address\n\n```\nset VAULT_ADDR=http://127.0.0.1:8200\n```\n\n- Tulis konfigurasi\n\n```\nvault write secret/myapp foo=bar bam=baz\n```\n\n- Baca konfigurasi\n\n```\nvault write secret/myapp foo=bar bam=baz\n```\n\n- Buat project spring + dependency spring cloud config\n- Tambahkan `@EnableConfigServer` pada main class\n- Ubah Konfigurasi\n\n\n  ```\n  #ubah port\n  server.port=8888\n\n  #ubah profile\n  server.profiles.active=vault\n  ```\n- Untuk merequest API nya tambahkan parameter pada HTTP Header dengan nama `X-Config-Token` dengan value dari `root token` yang ada pada CLI vault server.\n","source":"_posts/pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server.md","raw":"---\ntitle: Config Service Vault Server\ndate: 2017-07-28 09:08:13\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Membuat config service vault\n\nPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam file system atau dalam project. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam vault server.\n\n> Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.(https://www.vaultproject.io/intro/index.html)\n\nApabila anda belum menginstal vault server, anda dapat menginstalnya menggunakan tutorial berikut : http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/\n\n- Jalankan vault server\n```\nvault server -dev\n```\nSecara default vault server akan berjalan di localhost port 8200.\n\n- Konfigurasi vault address\n\n```\nset VAULT_ADDR=http://127.0.0.1:8200\n```\n\n- Tulis konfigurasi\n\n```\nvault write secret/myapp foo=bar bam=baz\n```\n\n- Baca konfigurasi\n\n```\nvault write secret/myapp foo=bar bam=baz\n```\n\n- Buat project spring + dependency spring cloud config\n- Tambahkan `@EnableConfigServer` pada main class\n- Ubah Konfigurasi\n\n\n  ```\n  #ubah port\n  server.port=8888\n\n  #ubah profile\n  server.profiles.active=vault\n  ```\n- Untuk merequest API nya tambahkan parameter pada HTTP Header dengan nama `X-Config-Token` dengan value dari `root token` yang ada pada CLI vault server.\n","slug":"pemrograman/spring/microservice/config-service/3.Config-Service-Vault-Server","published":1,"updated":"2017-08-20T02:43:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnp10056islpep9dmlhx","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Membuat-config-service-vault\"><a href=\"#Membuat-config-service-vault\" class=\"headerlink\" title=\"Membuat config service vault\"></a>Membuat config service vault</h1><p>Pada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam file system atau dalam project. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam vault server.</p>\n<blockquote>\n<p>Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.(<a href=\"https://www.vaultproject.io/intro/index.html\" target=\"_blank\" rel=\"external\">https://www.vaultproject.io/intro/index.html</a>)</p>\n</blockquote>\n<p>Apabila anda belum menginstal vault server, anda dapat menginstalnya menggunakan tutorial berikut : <a href=\"http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/\" target=\"_blank\" rel=\"external\">http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/</a></p>\n<ul>\n<li>Jalankan vault server<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault server -dev</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Secara default vault server akan berjalan di localhost port 8200.</p>\n<ul>\n<li>Konfigurasi vault address</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">set VAULT_ADDR=http://127.0.0.1:8200</div></pre></td></tr></table></figure>\n<ul>\n<li>Tulis konfigurasi</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault write secret/myapp foo=bar bam=baz</div></pre></td></tr></table></figure>\n<ul>\n<li>Baca konfigurasi</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault write secret/myapp foo=bar bam=baz</div></pre></td></tr></table></figure>\n<ul>\n<li>Buat project spring + dependency spring cloud config</li>\n<li>Tambahkan <code>@EnableConfigServer</code> pada main class</li>\n<li>Ubah Konfigurasi</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ubah port</div><div class=\"line\">server.port=8888</div><div class=\"line\"></div><div class=\"line\">#ubah profile</div><div class=\"line\">server.profiles.active=vault</div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk merequest API nya tambahkan parameter pada HTTP Header dengan nama <code>X-Config-Token</code> dengan value dari <code>root token</code> yang ada pada CLI vault server.</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Membuat-config-service-vault\"><a href=\"#Membuat-config-service-vault\" class=\"headerlink\" title=\"Membuat config service vault\"></a>Membuat config service vault</h1><p>Pada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam file system atau dalam project. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam vault server.</p>\n<blockquote>\n<p>Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.(<a href=\"https://www.vaultproject.io/intro/index.html\">https://www.vaultproject.io/intro/index.html</a>)</p>\n</blockquote>\n<p>Apabila anda belum menginstal vault server, anda dapat menginstalnya menggunakan tutorial berikut : <a href=\"http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/\">http://discoposse.com/2016/11/04/installing-hashicorp-vault-on-ubuntu16-04/</a></p>\n<ul>\n<li>Jalankan vault server<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault server -dev</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Secara default vault server akan berjalan di localhost port 8200.</p>\n<ul>\n<li>Konfigurasi vault address</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">set VAULT_ADDR=http://127.0.0.1:8200</div></pre></td></tr></table></figure>\n<ul>\n<li>Tulis konfigurasi</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault write secret/myapp foo=bar bam=baz</div></pre></td></tr></table></figure>\n<ul>\n<li>Baca konfigurasi</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vault write secret/myapp foo=bar bam=baz</div></pre></td></tr></table></figure>\n<ul>\n<li>Buat project spring + dependency spring cloud config</li>\n<li>Tambahkan <code>@EnableConfigServer</code> pada main class</li>\n<li>Ubah Konfigurasi</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ubah port</div><div class=\"line\">server.port=8888</div><div class=\"line\"></div><div class=\"line\">#ubah profile</div><div class=\"line\">server.profiles.active=vault</div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk merequest API nya tambahkan parameter pada HTTP Header dengan nama <code>X-Config-Token</code> dengan value dari <code>root token</code> yang ada pada CLI vault server.</li>\n</ul>\n"},{"title":"Spring Config Service","date":"2017-07-22T06:25:51.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n\n>Spring Config service adalah sebuah service yang digunakan untuk menyimpan, mengakses, dan mengatur konfigurasi dari setiap service. Spring Config Service juga dapat mensupport version control untuk setiap file file konfigurasinya.\n\n### Spring Config Service\nSpring Config Service memiliki beberapa fungsi yaitu :\n- View/Fetch Configuration (json / yml)\n- Encrypt & Decrypt Value\n- Refresh Scope\n- Health Check","source":"_posts/pemrograman/spring/microservice/config-service/1.GS-Config-Service.md","raw":"---\ntitle: Spring Config Service\ndate: 2017-07-22 13:25:51\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n\n>Spring Config service adalah sebuah service yang digunakan untuk menyimpan, mengakses, dan mengatur konfigurasi dari setiap service. Spring Config Service juga dapat mensupport version control untuk setiap file file konfigurasinya.\n\n### Spring Config Service\nSpring Config Service memiliki beberapa fungsi yaitu :\n- View/Fetch Configuration (json / yml)\n- Encrypt & Decrypt Value\n- Refresh Scope\n- Health Check","slug":"pemrograman/spring/microservice/config-service/1.GS-Config-Service","published":1,"updated":"2017-08-20T04:14:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnp70058islpskzz7bex","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<blockquote>\n<p>Spring Config service adalah sebuah service yang digunakan untuk menyimpan, mengakses, dan mengatur konfigurasi dari setiap service. Spring Config Service juga dapat mensupport version control untuk setiap file file konfigurasinya.</p>\n</blockquote>\n<h3 id=\"Spring-Config-Service\"><a href=\"#Spring-Config-Service\" class=\"headerlink\" title=\"Spring Config Service\"></a>Spring Config Service</h3><p>Spring Config Service memiliki beberapa fungsi yaitu :</p>\n<ul>\n<li>View/Fetch Configuration (json / yml)</li>\n<li>Encrypt &amp; Decrypt Value</li>\n<li>Refresh Scope</li>\n<li>Health Check</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<blockquote>\n<p>Spring Config service adalah sebuah service yang digunakan untuk menyimpan, mengakses, dan mengatur konfigurasi dari setiap service. Spring Config Service juga dapat mensupport version control untuk setiap file file konfigurasinya.</p>\n</blockquote>\n<h3 id=\"Spring-Config-Service\"><a href=\"#Spring-Config-Service\" class=\"headerlink\" title=\"Spring Config Service\"></a>Spring Config Service</h3><p>Spring Config Service memiliki beberapa fungsi yaitu :</p>\n<ul>\n<li>View/Fetch Configuration (json / yml)</li>\n<li>Encrypt &amp; Decrypt Value</li>\n<li>Refresh Scope</li>\n<li>Health Check</li>\n</ul>\n"},{"title":"Config Service Git Repository","date":"2017-08-04T19:48:47.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Config Service Git Repository\n\nPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam vault server. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam git repository.\n\n- Sebelumnya push konfigurasi anda ke github. Sampel konfigurasinya dapat dilihat di `https://github.com/ciazhar/clorus-config-repository`\n- Pada Spring Initializr tambahkan dependency `Spring Cloud Config Server` dan `Spring Cloud Eureka Client`\n- Tambahkan anotasi `@EnableConfigServer` pada main class\n- Setting application name pada file bootstrap.yml\n\n```yml\nspring:\n  application:\n    name: config-service\n```\n- Setting git repository uri\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/ciazhar/clorus-config-repository.git\n          username: ciazhar\n          password: ********\n          searchPaths: 'config, config/{application}'\n          cloneOnStart: true\n          basedir: 'target/config'\n        bootstrap: true\n```\n- Tambahkan anotasi `@EnableEurekaClient` pada main class, agar dapat terdaftar sebagai client eureka server.","source":"_posts/pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository.md","raw":"---\ntitle: Config Service Git Repository\ndate: 2017-08-05 02:48:47\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Config Service Git Repository\n\nPada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam vault server. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam git repository.\n\n- Sebelumnya push konfigurasi anda ke github. Sampel konfigurasinya dapat dilihat di `https://github.com/ciazhar/clorus-config-repository`\n- Pada Spring Initializr tambahkan dependency `Spring Cloud Config Server` dan `Spring Cloud Eureka Client`\n- Tambahkan anotasi `@EnableConfigServer` pada main class\n- Setting application name pada file bootstrap.yml\n\n```yml\nspring:\n  application:\n    name: config-service\n```\n- Setting git repository uri\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/ciazhar/clorus-config-repository.git\n          username: ciazhar\n          password: ********\n          searchPaths: 'config, config/{application}'\n          cloneOnStart: true\n          basedir: 'target/config'\n        bootstrap: true\n```\n- Tambahkan anotasi `@EnableEurekaClient` pada main class, agar dapat terdaftar sebagai client eureka server.","slug":"pemrograman/spring/microservice/config-service/4.Config-Service-Git-Repository","published":1,"updated":"2017-08-20T04:17:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnph005aislpqsqxi4ch","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Config-Service-Git-Repository\"><a href=\"#Config-Service-Git-Repository\" class=\"headerlink\" title=\"Config Service Git Repository\"></a>Config Service Git Repository</h1><p>Pada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam vault server. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam git repository.</p>\n<ul>\n<li>Sebelumnya push konfigurasi anda ke github. Sampel konfigurasinya dapat dilihat di <code>https://github.com/ciazhar/clorus-config-repository</code></li>\n<li>Pada Spring Initializr tambahkan dependency <code>Spring Cloud Config Server</code> dan <code>Spring Cloud Eureka Client</code></li>\n<li>Tambahkan anotasi <code>@EnableConfigServer</code> pada main class</li>\n<li>Setting application name pada file bootstrap.yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">config-service</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Setting git repository uri</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      server:</span></div><div class=\"line\"><span class=\"attr\">        git:</span></div><div class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/ciazhar/clorus-config-repository.git</span></div><div class=\"line\"><span class=\"attr\">          username:</span> <span class=\"string\">ciazhar</span></div><div class=\"line\"><span class=\"attr\">          password:</span> <span class=\"string\">********</span></div><div class=\"line\"><span class=\"attr\">          searchPaths:</span> <span class=\"string\">'config, config/&#123;application&#125;'</span></div><div class=\"line\"><span class=\"attr\">          cloneOnStart:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          basedir:</span> <span class=\"string\">'target/config'</span></div><div class=\"line\"><span class=\"attr\">        bootstrap:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Tambahkan anotasi <code>@EnableEurekaClient</code> pada main class, agar dapat terdaftar sebagai client eureka server.</li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Config-Service-Git-Repository\"><a href=\"#Config-Service-Git-Repository\" class=\"headerlink\" title=\"Config Service Git Repository\"></a>Config Service Git Repository</h1><p>Pada tutorial sebelumnya telah membahas pembuatan config service dimana file konfigurasinya disimpan di dalam vault server. Sekarang kita akan mencoba membuat config service dimana file konfigurasinya disimpan di dalam git repository.</p>\n<ul>\n<li>Sebelumnya push konfigurasi anda ke github. Sampel konfigurasinya dapat dilihat di <code>https://github.com/ciazhar/clorus-config-repository</code></li>\n<li>Pada Spring Initializr tambahkan dependency <code>Spring Cloud Config Server</code> dan <code>Spring Cloud Eureka Client</code></li>\n<li>Tambahkan anotasi <code>@EnableConfigServer</code> pada main class</li>\n<li>Setting application name pada file bootstrap.yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">config-service</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Setting git repository uri</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      server:</span></div><div class=\"line\"><span class=\"attr\">        git:</span></div><div class=\"line\"><span class=\"attr\">          uri:</span> <span class=\"attr\">https://github.com/ciazhar/clorus-config-repository.git</span></div><div class=\"line\"><span class=\"attr\">          username:</span> <span class=\"string\">ciazhar</span></div><div class=\"line\"><span class=\"attr\">          password:</span> <span class=\"string\">********</span></div><div class=\"line\"><span class=\"attr\">          searchPaths:</span> <span class=\"string\">'config, config/&#123;application&#125;'</span></div><div class=\"line\"><span class=\"attr\">          cloneOnStart:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">          basedir:</span> <span class=\"string\">'target/config'</span></div><div class=\"line\"><span class=\"attr\">        bootstrap:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Tambahkan anotasi <code>@EnableEurekaClient</code> pada main class, agar dapat terdaftar sebagai client eureka server.</li>\n</ul>\n"},{"title":"Config Service Refresh Scope and Health Check","date":"2017-08-14T16:20:36.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n  \nRefresh Scope memungkinkan kita untuk mengupdate API yang berisi data konfigurasi pada konfig service tanpa redeploy aplikasi client dan server. Sehingga data yang di dapatkan aplikasi client akan selalu up to date. \n\n## Konfigurasi Config client.\n\n- Tambahkan anotasi `@RefreshScope` pada class yang membutuhkan data dari file konfigurasi\n- Tambahkan dependency `Spring Actuator`\n- Disable Security default (bootstrap.yml)\n\n```yml\nmanagement:\n    security:\n        enabled: false\n```\n- Enable username & password to secure client app(bootstrap.yml)\nSebelumnya anda harus menambahkan dependency `Spring Security`.\n\n```yml\nsecurity:\n  user:\n    name: usernameusr\n    password: passwordusr\n```\n- Untuk merefresh kofigurasi gunakan endpoint `http://localhost:PORT/refresh` atau dapat mengunakan curl sperti :\n\n```\ncurl -x POST localhost:8080/refresh\n```\n\n# Health Check\n\nUntuk melihat keadaan config service gunakan endpoint `localhost:8080/health`\n","source":"_posts/pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check.md","raw":"---\ntitle: Config Service Refresh Scope and Health Check\ndate: 2017-08-14 23:20:36\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n  \nRefresh Scope memungkinkan kita untuk mengupdate API yang berisi data konfigurasi pada konfig service tanpa redeploy aplikasi client dan server. Sehingga data yang di dapatkan aplikasi client akan selalu up to date. \n\n## Konfigurasi Config client.\n\n- Tambahkan anotasi `@RefreshScope` pada class yang membutuhkan data dari file konfigurasi\n- Tambahkan dependency `Spring Actuator`\n- Disable Security default (bootstrap.yml)\n\n```yml\nmanagement:\n    security:\n        enabled: false\n```\n- Enable username & password to secure client app(bootstrap.yml)\nSebelumnya anda harus menambahkan dependency `Spring Security`.\n\n```yml\nsecurity:\n  user:\n    name: usernameusr\n    password: passwordusr\n```\n- Untuk merefresh kofigurasi gunakan endpoint `http://localhost:PORT/refresh` atau dapat mengunakan curl sperti :\n\n```\ncurl -x POST localhost:8080/refresh\n```\n\n# Health Check\n\nUntuk melihat keadaan config service gunakan endpoint `localhost:8080/health`\n","slug":"pemrograman/spring/microservice/config-service/7-Config-Service-Refresh-Scope-and-Health-Check","published":1,"updated":"2017-08-20T04:14:16.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnpl005cislpsgsw0gxf","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Refresh Scope memungkinkan kita untuk mengupdate API yang berisi data konfigurasi pada konfig service tanpa redeploy aplikasi client dan server. Sehingga data yang di dapatkan aplikasi client akan selalu up to date. </p>\n<h2 id=\"Konfigurasi-Config-client\"><a href=\"#Konfigurasi-Config-client\" class=\"headerlink\" title=\"Konfigurasi Config client.\"></a>Konfigurasi Config client.</h2><ul>\n<li>Tambahkan anotasi <code>@RefreshScope</code> pada class yang membutuhkan data dari file konfigurasi</li>\n<li>Tambahkan dependency <code>Spring Actuator</code></li>\n<li>Disable Security default (bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">management:</span></div><div class=\"line\"><span class=\"attr\">    security:</span></div><div class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Enable username &amp; password to secure client app(bootstrap.yml)<br>Sebelumnya anda harus menambahkan dependency <code>Spring Security</code>.</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  user:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">usernameusr</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">passwordusr</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk merefresh kofigurasi gunakan endpoint <code>http://localhost:PORT/refresh</code> atau dapat mengunakan curl sperti :</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -x POST localhost:8080/refresh</div></pre></td></tr></table></figure>\n<h1 id=\"Health-Check\"><a href=\"#Health-Check\" class=\"headerlink\" title=\"Health Check\"></a>Health Check</h1><p>Untuk melihat keadaan config service gunakan endpoint <code>localhost:8080/health</code></p>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Refresh Scope memungkinkan kita untuk mengupdate API yang berisi data konfigurasi pada konfig service tanpa redeploy aplikasi client dan server. Sehingga data yang di dapatkan aplikasi client akan selalu up to date. </p>\n<h2 id=\"Konfigurasi-Config-client\"><a href=\"#Konfigurasi-Config-client\" class=\"headerlink\" title=\"Konfigurasi Config client.\"></a>Konfigurasi Config client.</h2><ul>\n<li>Tambahkan anotasi <code>@RefreshScope</code> pada class yang membutuhkan data dari file konfigurasi</li>\n<li>Tambahkan dependency <code>Spring Actuator</code></li>\n<li>Disable Security default (bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">management:</span></div><div class=\"line\"><span class=\"attr\">    security:</span></div><div class=\"line\"><span class=\"attr\">        enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Enable username &amp; password to secure client app(bootstrap.yml)<br>Sebelumnya anda harus menambahkan dependency <code>Spring Security</code>.</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  user:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">usernameusr</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">passwordusr</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk merefresh kofigurasi gunakan endpoint <code>http://localhost:PORT/refresh</code> atau dapat mengunakan curl sperti :</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -x POST localhost:8080/refresh</div></pre></td></tr></table></figure>\n<h1 id=\"Health-Check\"><a href=\"#Health-Check\" class=\"headerlink\" title=\"Health Check\"></a>Health Check</h1><p>Untuk melihat keadaan config service gunakan endpoint <code>localhost:8080/health</code></p>\n"},{"title":"Config Service Encryption Decryption","date":"2017-08-14T04:37:37.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nSaat client mengambil konfigurasi dari config service secara default semua data tidak terenkripsi. Sehingga data data credential seperti password dan lain lain dapat langsung diketahui apabila telah mendapatkan file konfigurasinya. Untuk mengurangi bocornya data ada baiknya data credential tersebut kita enkripsi.\n\nSpring Cloud Config Server mensupport enkripsi dan dekripsi. Untuk menggunakannya ikuti langkah langkah berikut :\n- Download Java Criptography Enxtension (JCE)\n- Replace fIle konfigurasi telah ada pada desktop kita dengan file JCE yang telah di download\n- Konfigurasi encrypt key (resource/bootstrap.yml)\n\n```yml\nencrypt:\n  key: abcdef\n```\nEncrypt key akan menentukan hasil dari enkripsi dan kunci untuk mendekrip.\n\n- Konfig value yang terenkripsi agar tetap terenkripsi (resource/bootstrap.yml)\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        encrypt:\n          enabled: false\n```\n- Tambahkan encrypt key pada aplikasi client agar dapat mendekip value ()\n\n```yml\nencypt:\n  key: abcdef\n```\n\n- Jalankan program\n\nUntuk mengenkripsi, lakukan POST ke `localhost:8080/encrypt` dengan memasukkan data yang ingin di encrypt pada Body HTTP. Semisal kita ingin mengekripsi password dengan value ciazhar123. Maka masukkan password tersebut ke dalam Body HTTP, lalu POST. Dapat menggunakan curl untuk mempermudah :\n\n```\ncurl localhost:8080/encrypt -d value\n```\nSelanjutnya kita akan mendapatkan response berupa hasil enkripsi yang dapat kita gunakan untuk mereplace data kita dengan hasil enkripsi tersebut. Hasil enkripsi tersebut dapat dipasang dengan cara seperti ini :\n\n```yml\npassword : {cipher}1n1p455w0rd3nkr1ps1\n```\n- Untuk mendekripsi, lakukan POST ke `localhost:8080/decrypt` dengan memasukkan data yang ingin di decrypt pada Body HTTP.\nDapat menggunakan curl untuk mempermudah :\n\n```\ncurl localhost:8080/decrypt -d value\n```","source":"_posts/pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption.md","raw":"---\ntitle: Config Service Encryption Decryption\ndate: 2017-08-14 11:37:37\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nSaat client mengambil konfigurasi dari config service secara default semua data tidak terenkripsi. Sehingga data data credential seperti password dan lain lain dapat langsung diketahui apabila telah mendapatkan file konfigurasinya. Untuk mengurangi bocornya data ada baiknya data credential tersebut kita enkripsi.\n\nSpring Cloud Config Server mensupport enkripsi dan dekripsi. Untuk menggunakannya ikuti langkah langkah berikut :\n- Download Java Criptography Enxtension (JCE)\n- Replace fIle konfigurasi telah ada pada desktop kita dengan file JCE yang telah di download\n- Konfigurasi encrypt key (resource/bootstrap.yml)\n\n```yml\nencrypt:\n  key: abcdef\n```\nEncrypt key akan menentukan hasil dari enkripsi dan kunci untuk mendekrip.\n\n- Konfig value yang terenkripsi agar tetap terenkripsi (resource/bootstrap.yml)\n\n```yml\nspring:\n  cloud:\n    config:\n      server:\n        encrypt:\n          enabled: false\n```\n- Tambahkan encrypt key pada aplikasi client agar dapat mendekip value ()\n\n```yml\nencypt:\n  key: abcdef\n```\n\n- Jalankan program\n\nUntuk mengenkripsi, lakukan POST ke `localhost:8080/encrypt` dengan memasukkan data yang ingin di encrypt pada Body HTTP. Semisal kita ingin mengekripsi password dengan value ciazhar123. Maka masukkan password tersebut ke dalam Body HTTP, lalu POST. Dapat menggunakan curl untuk mempermudah :\n\n```\ncurl localhost:8080/encrypt -d value\n```\nSelanjutnya kita akan mendapatkan response berupa hasil enkripsi yang dapat kita gunakan untuk mereplace data kita dengan hasil enkripsi tersebut. Hasil enkripsi tersebut dapat dipasang dengan cara seperti ini :\n\n```yml\npassword : {cipher}1n1p455w0rd3nkr1ps1\n```\n- Untuk mendekripsi, lakukan POST ke `localhost:8080/decrypt` dengan memasukkan data yang ingin di decrypt pada Body HTTP.\nDapat menggunakan curl untuk mempermudah :\n\n```\ncurl localhost:8080/decrypt -d value\n```","slug":"pemrograman/spring/microservice/config-service/6-Config-Service-Encryption-Decryption","published":1,"updated":"2017-08-20T04:11:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnpo005eislpgl0bufju","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Saat client mengambil konfigurasi dari config service secara default semua data tidak terenkripsi. Sehingga data data credential seperti password dan lain lain dapat langsung diketahui apabila telah mendapatkan file konfigurasinya. Untuk mengurangi bocornya data ada baiknya data credential tersebut kita enkripsi.</p>\n<p>Spring Cloud Config Server mensupport enkripsi dan dekripsi. Untuk menggunakannya ikuti langkah langkah berikut :</p>\n<ul>\n<li>Download Java Criptography Enxtension (JCE)</li>\n<li>Replace fIle konfigurasi telah ada pada desktop kita dengan file JCE yang telah di download</li>\n<li>Konfigurasi encrypt key (resource/bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">encrypt:</span></div><div class=\"line\"><span class=\"attr\">  key:</span> <span class=\"string\">abcdef</span></div></pre></td></tr></table></figure>\n<p>Encrypt key akan menentukan hasil dari enkripsi dan kunci untuk mendekrip.</p>\n<ul>\n<li>Konfig value yang terenkripsi agar tetap terenkripsi (resource/bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      server:</span></div><div class=\"line\"><span class=\"attr\">        encrypt:</span></div><div class=\"line\"><span class=\"attr\">          enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Tambahkan encrypt key pada aplikasi client agar dapat mendekip value ()</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">encypt:</span></div><div class=\"line\"><span class=\"attr\">  key:</span> <span class=\"string\">abcdef</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Jalankan program</li>\n</ul>\n<p>Untuk mengenkripsi, lakukan POST ke <code>localhost:8080/encrypt</code> dengan memasukkan data yang ingin di encrypt pada Body HTTP. Semisal kita ingin mengekripsi password dengan value ciazhar123. Maka masukkan password tersebut ke dalam Body HTTP, lalu POST. Dapat menggunakan curl untuk mempermudah :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl localhost:8080/encrypt -d value</div></pre></td></tr></table></figure>\n<p>Selanjutnya kita akan mendapatkan response berupa hasil enkripsi yang dapat kita gunakan untuk mereplace data kita dengan hasil enkripsi tersebut. Hasil enkripsi tersebut dapat dipasang dengan cara seperti ini :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">password</span> <span class=\"string\">:</span> <span class=\"string\">&#123;cipher&#125;1n1p455w0rd3nkr1ps1</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk mendekripsi, lakukan POST ke <code>localhost:8080/decrypt</code> dengan memasukkan data yang ingin di decrypt pada Body HTTP.<br>Dapat menggunakan curl untuk mempermudah :</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl localhost:8080/decrypt -d value</div></pre></td></tr></table></figure>","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Saat client mengambil konfigurasi dari config service secara default semua data tidak terenkripsi. Sehingga data data credential seperti password dan lain lain dapat langsung diketahui apabila telah mendapatkan file konfigurasinya. Untuk mengurangi bocornya data ada baiknya data credential tersebut kita enkripsi.</p>\n<p>Spring Cloud Config Server mensupport enkripsi dan dekripsi. Untuk menggunakannya ikuti langkah langkah berikut :</p>\n<ul>\n<li>Download Java Criptography Enxtension (JCE)</li>\n<li>Replace fIle konfigurasi telah ada pada desktop kita dengan file JCE yang telah di download</li>\n<li>Konfigurasi encrypt key (resource/bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">encrypt:</span></div><div class=\"line\"><span class=\"attr\">  key:</span> <span class=\"string\">abcdef</span></div></pre></td></tr></table></figure>\n<p>Encrypt key akan menentukan hasil dari enkripsi dan kunci untuk mendekrip.</p>\n<ul>\n<li>Konfig value yang terenkripsi agar tetap terenkripsi (resource/bootstrap.yml)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  cloud:</span></div><div class=\"line\"><span class=\"attr\">    config:</span></div><div class=\"line\"><span class=\"attr\">      server:</span></div><div class=\"line\"><span class=\"attr\">        encrypt:</span></div><div class=\"line\"><span class=\"attr\">          enabled:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Tambahkan encrypt key pada aplikasi client agar dapat mendekip value ()</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">encypt:</span></div><div class=\"line\"><span class=\"attr\">  key:</span> <span class=\"string\">abcdef</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Jalankan program</li>\n</ul>\n<p>Untuk mengenkripsi, lakukan POST ke <code>localhost:8080/encrypt</code> dengan memasukkan data yang ingin di encrypt pada Body HTTP. Semisal kita ingin mengekripsi password dengan value ciazhar123. Maka masukkan password tersebut ke dalam Body HTTP, lalu POST. Dapat menggunakan curl untuk mempermudah :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl localhost:8080/encrypt -d value</div></pre></td></tr></table></figure>\n<p>Selanjutnya kita akan mendapatkan response berupa hasil enkripsi yang dapat kita gunakan untuk mereplace data kita dengan hasil enkripsi tersebut. Hasil enkripsi tersebut dapat dipasang dengan cara seperti ini :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">password</span> <span class=\"string\">:</span> <span class=\"string\">&#123;cipher&#125;1n1p455w0rd3nkr1ps1</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Untuk mendekripsi, lakukan POST ke <code>localhost:8080/decrypt</code> dengan memasukkan data yang ingin di decrypt pada Body HTTP.<br>Dapat menggunakan curl untuk mempermudah :</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl localhost:8080/decrypt -d value</div></pre></td></tr></table></figure>"},{"title":"Spring Cloud Netfix Eureka as Discovery Service","date":"2017-08-15T03:29:45.000Z","_content":"![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nEureka adalah discovery service yang didevelop oleh netfix. Discovery service sendiri berfungsi untuk menampung data semua service yang ada di microservice. Discovery service juga dapat mempermudah komunikasi antar service yang berdiri di atasnya.\n\n# Implement Eureka Server\n- Tambahkan dependency `spring-cloud-eureka-server`\n- Tambahkan anotasi `@EnableEurekaServer` pada main class\n- Tambahkan konfigurasi eureka service (application.yml)\n```yml\nspring:\n  application:\n    name: eureka-service\n\nserver:\n  port: 8761\n\neureka:\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    server:\n      waitTimeInMsWhenSyncEmpty: 0\n```\n\n# Implement Eureka Client\n- Tambahkan dependency `spring-cloud-starter-eureka`\n- Tambahkan anotasi `@EnableDiscoveryClient` pada main class\n- Tambahkan konfigurasi eureka server (bootstrap.yml)\n```yml\nspring:\n  application:\n    name: eureka-client\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\nserver:\n  port: 8002\n```\n\n# Komunikasi Data antar Eureka Client\nKita misalkan terdapat 2 eureka client, client pertama(spring.application.name=eureka-client) berjalan di port 8002, sendangkan client kedua(spring.application.name=other-eureka-client) berjalan di port 8003. Client kedua ingin mengambil API dari client pertama menggunakan eureka server. \nBerikut contoh kode untuk komunikasi antar client. \n- Controller pada client pertama\n\n```java\n@RestController\npublic class SimpleController {\n\n    @RequestMapping(\"/api/halo\")\n    public String halo (){\n        return \"Halo ini dari Client Satu\";\n    }\n}\n```\n- Konfigurasi RestTemplate pada client kedua\n\n```java\n@Configuration\npublic class SimpleConfig {\n\n    @Bean\n    @LoadBalanced\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n```\n- Controller pada client kedua\n\n```java\n@RestController\npublic class SImpleController {\n    @Autowired private RestTemplate restTemplate;\n\n    @RequestMapping(\"/api/halo\")\n    public String halo(){\n        return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class);\n    }\n}\n```\nBisa dilihat pada controller client kedua mengambil API dari client pertama menggunakan RestTemplate dengan tidak mengghardcode url APInya, tetapi hanya mencantumkan `spring.application.name` dari client pertama. Dan data dari API tersebut kemudian disimpan dan dikembalikan dalam tipe data String.","source":"_posts/pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service.md","raw":"---\ntitle: Spring Cloud Netfix Eureka as Discovery Service\ndate: 2017-08-15 10:29:45\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nEureka adalah discovery service yang didevelop oleh netfix. Discovery service sendiri berfungsi untuk menampung data semua service yang ada di microservice. Discovery service juga dapat mempermudah komunikasi antar service yang berdiri di atasnya.\n\n# Implement Eureka Server\n- Tambahkan dependency `spring-cloud-eureka-server`\n- Tambahkan anotasi `@EnableEurekaServer` pada main class\n- Tambahkan konfigurasi eureka service (application.yml)\n```yml\nspring:\n  application:\n    name: eureka-service\n\nserver:\n  port: 8761\n\neureka:\n  client:\n    register-with-eureka: false\n    fetch-registry: false\n    server:\n      waitTimeInMsWhenSyncEmpty: 0\n```\n\n# Implement Eureka Client\n- Tambahkan dependency `spring-cloud-starter-eureka`\n- Tambahkan anotasi `@EnableDiscoveryClient` pada main class\n- Tambahkan konfigurasi eureka server (bootstrap.yml)\n```yml\nspring:\n  application:\n    name: eureka-client\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\nserver:\n  port: 8002\n```\n\n# Komunikasi Data antar Eureka Client\nKita misalkan terdapat 2 eureka client, client pertama(spring.application.name=eureka-client) berjalan di port 8002, sendangkan client kedua(spring.application.name=other-eureka-client) berjalan di port 8003. Client kedua ingin mengambil API dari client pertama menggunakan eureka server. \nBerikut contoh kode untuk komunikasi antar client. \n- Controller pada client pertama\n\n```java\n@RestController\npublic class SimpleController {\n\n    @RequestMapping(\"/api/halo\")\n    public String halo (){\n        return \"Halo ini dari Client Satu\";\n    }\n}\n```\n- Konfigurasi RestTemplate pada client kedua\n\n```java\n@Configuration\npublic class SimpleConfig {\n\n    @Bean\n    @LoadBalanced\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n```\n- Controller pada client kedua\n\n```java\n@RestController\npublic class SImpleController {\n    @Autowired private RestTemplate restTemplate;\n\n    @RequestMapping(\"/api/halo\")\n    public String halo(){\n        return restTemplate.getForObject(\"http://eureka-client/api/halo\",String.class);\n    }\n}\n```\nBisa dilihat pada controller client kedua mengambil API dari client pertama menggunakan RestTemplate dengan tidak mengghardcode url APInya, tetapi hanya mencantumkan `spring.application.name` dari client pertama. Dan data dari API tersebut kemudian disimpan dan dikembalikan dalam tipe data String.","slug":"pemrograman/spring/microservice/discovery-service-eureka/netflix-eureka-as-discovery-service","published":1,"updated":"2017-08-20T02:32:55.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnps005gislplts4ud63","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Eureka adalah discovery service yang didevelop oleh netfix. Discovery service sendiri berfungsi untuk menampung data semua service yang ada di microservice. Discovery service juga dapat mempermudah komunikasi antar service yang berdiri di atasnya.</p>\n<h1 id=\"Implement-Eureka-Server\"><a href=\"#Implement-Eureka-Server\" class=\"headerlink\" title=\"Implement Eureka Server\"></a>Implement Eureka Server</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-eureka-server</code></li>\n<li>Tambahkan anotasi <code>@EnableEurekaServer</code> pada main class</li>\n<li>Tambahkan konfigurasi eureka service (application.yml)<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eureka-service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    server:</span></div><div class=\"line\"><span class=\"attr\">      waitTimeInMsWhenSyncEmpty:</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Implement-Eureka-Client\"><a href=\"#Implement-Eureka-Client\" class=\"headerlink\" title=\"Implement Eureka Client\"></a>Implement Eureka Client</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-eureka</code></li>\n<li>Tambahkan anotasi <code>@EnableDiscoveryClient</code> pada main class</li>\n<li>Tambahkan konfigurasi eureka server (bootstrap.yml)<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eureka-client</span></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    service-url:</span></div><div class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8761/eureka</span></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8002</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Komunikasi-Data-antar-Eureka-Client\"><a href=\"#Komunikasi-Data-antar-Eureka-Client\" class=\"headerlink\" title=\"Komunikasi Data antar Eureka Client\"></a>Komunikasi Data antar Eureka Client</h1><p>Kita misalkan terdapat 2 eureka client, client pertama(spring.application.name=eureka-client) berjalan di port 8002, sendangkan client kedua(spring.application.name=other-eureka-client) berjalan di port 8003. Client kedua ingin mengambil API dari client pertama menggunakan eureka server.<br>Berikut contoh kode untuk komunikasi antar client. </p>\n<ul>\n<li>Controller pada client pertama</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Halo ini dari Client Satu\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Konfigurasi RestTemplate pada client kedua</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@LoadBalanced</span></div><div class=\"line\">    <span class=\"function\">RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Controller pada client kedua</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SImpleController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> RestTemplate restTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://eureka-client/api/halo\"</span>,String.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Bisa dilihat pada controller client kedua mengambil API dari client pertama menggunakan RestTemplate dengan tidak mengghardcode url APInya, tetapi hanya mencantumkan <code>spring.application.name</code> dari client pertama. Dan data dari API tersebut kemudian disimpan dan dikembalikan dalam tipe data String.</p>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Eureka adalah discovery service yang didevelop oleh netfix. Discovery service sendiri berfungsi untuk menampung data semua service yang ada di microservice. Discovery service juga dapat mempermudah komunikasi antar service yang berdiri di atasnya.</p>\n<h1 id=\"Implement-Eureka-Server\"><a href=\"#Implement-Eureka-Server\" class=\"headerlink\" title=\"Implement Eureka Server\"></a>Implement Eureka Server</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-eureka-server</code></li>\n<li>Tambahkan anotasi <code>@EnableEurekaServer</code> pada main class</li>\n<li>Tambahkan konfigurasi eureka service (application.yml)<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eureka-service</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    server:</span></div><div class=\"line\"><span class=\"attr\">      waitTimeInMsWhenSyncEmpty:</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Implement-Eureka-Client\"><a href=\"#Implement-Eureka-Client\" class=\"headerlink\" title=\"Implement Eureka Client\"></a>Implement Eureka Client</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-eureka</code></li>\n<li>Tambahkan anotasi <code>@EnableDiscoveryClient</code> pada main class</li>\n<li>Tambahkan konfigurasi eureka server (bootstrap.yml)<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  application:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eureka-client</span></div><div class=\"line\"><span class=\"attr\">eureka:</span></div><div class=\"line\"><span class=\"attr\">  client:</span></div><div class=\"line\"><span class=\"attr\">    service-url:</span></div><div class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://localhost:8761/eureka</span></div><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8002</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Komunikasi-Data-antar-Eureka-Client\"><a href=\"#Komunikasi-Data-antar-Eureka-Client\" class=\"headerlink\" title=\"Komunikasi Data antar Eureka Client\"></a>Komunikasi Data antar Eureka Client</h1><p>Kita misalkan terdapat 2 eureka client, client pertama(spring.application.name=eureka-client) berjalan di port 8002, sendangkan client kedua(spring.application.name=other-eureka-client) berjalan di port 8003. Client kedua ingin mengambil API dari client pertama menggunakan eureka server.<br>Berikut contoh kode untuk komunikasi antar client. </p>\n<ul>\n<li>Controller pada client pertama</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Halo ini dari Client Satu\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Konfigurasi RestTemplate pada client kedua</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@LoadBalanced</span></div><div class=\"line\">    <span class=\"function\">RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Controller pada client kedua</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SImpleController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> RestTemplate restTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://eureka-client/api/halo\"</span>,String.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Bisa dilihat pada controller client kedua mengambil API dari client pertama menggunakan RestTemplate dengan tidak mengghardcode url APInya, tetapi hanya mencantumkan <code>spring.application.name</code> dari client pertama. Dan data dari API tersebut kemudian disimpan dan dikembalikan dalam tipe data String.</p>\n"},{"title":"Integrating Backend to Config Service","date":"2017-08-14T15:40:19.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n- Tambahkan Dependency `spring-cloud-starter-config` \n- Konfigurasi config server uri pada src/main/resource/bootstrap.yml\n```yml\nspring:\n    cloud:\n        config:\n            uri: http://localhost:10003\n```","source":"_posts/pemrograman/spring/microservice/config-service/5-Config-Service-Cient.md","raw":"---\ntitle: Integrating Backend to Config Service\ndate: 2017-08-14 22:40:19\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n- Tambahkan Dependency `spring-cloud-starter-config` \n- Konfigurasi config server uri pada src/main/resource/bootstrap.yml\n```yml\nspring:\n    cloud:\n        config:\n            uri: http://localhost:10003\n```","slug":"pemrograman/spring/microservice/config-service/5-Config-Service-Cient","published":1,"updated":"2017-08-20T04:17:45.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnq8005uislpasl6cvrq","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<ul>\n<li>Tambahkan Dependency <code>spring-cloud-starter-config</code> </li>\n<li>Konfigurasi config server uri pada src/main/resource/bootstrap.yml<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">    cloud:</span></div><div class=\"line\"><span class=\"attr\">        config:</span></div><div class=\"line\"><span class=\"attr\">            uri:</span> <span class=\"attr\">http://localhost:10003</span></div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<ul>\n<li>Tambahkan Dependency <code>spring-cloud-starter-config</code> </li>\n<li>Konfigurasi config server uri pada src/main/resource/bootstrap.yml<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">    cloud:</span></div><div class=\"line\"><span class=\"attr\">        config:</span></div><div class=\"line\"><span class=\"attr\">            uri:</span> <span class=\"attr\">http://localhost:10003</span></div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Melakukan Tracing antar Microservice menggunakan Netflix Sleuth","date":"2017-08-20T01:42:20.000Z","_content":"![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nSpring Cloud Netflix Sleuth digunakan untuk membuat log tracing antar service. Sleuth dalam melakukan tracing, dia menggunakan Trace ID dan Span ID. Trace ID merupakan id yang digunakan untuk mentracing lintas service. Sedangkan Span ID merupakan ID yang digunakan untuk mentracing internal service.\n\n# Implement Sleuth\n- Tambahkan dependency `spring-cloud-starter-sleuth` dan `spring-boot-starter-web`\n\n# Komunikasi Data antar Sleuth Client\n\n- Controller pada client pertama (jalan di port 8080)\n\n```java\n@RestController\npublic class SimpleController {\n\n    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);\n\n    @RequestMapping(\"/api/halo\")\n    public String halo (){\n        LOGGER.info(\"Sampai ke Server\")\n        return \"Halo ini dari Client Satu\";\n    }\n}\n```\n\n- Konfigurasi RestTemplate pada client kedua (jalan di port 8081)\n```java\n@Configuration\npublic class SimpleConfig {\n\n    @Bean\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n```\n\nSletuh akan terinjek kedalam restTemplate lewat Bean di atas.\n\n\n- Controller pada client kedua\n```java\n@RestController\npublic class SimpleController {\n    @Autowired private RestTemplate restTemplate;\n    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);\n    @RequestMapping(\"/api/halo\")\n    public String halo(){\n        LOGGER.info(\"Sebelum sampai ke server\");\n        return restTemplate.getForObject(\"http://localhost:8080/api/halo\",String.class);\n        LOGGER.info(\"Setelah sampai ke server);\n    }\n}\n```","source":"_posts/pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing.md","raw":"---\ntitle: Melakukan Tracing antar Microservice menggunakan Netflix Sleuth\ndate: 2017-08-20 08:42:20\ncategories:\n  - Pemrograman\n  - Spring\n---\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\nSpring Cloud Netflix Sleuth digunakan untuk membuat log tracing antar service. Sleuth dalam melakukan tracing, dia menggunakan Trace ID dan Span ID. Trace ID merupakan id yang digunakan untuk mentracing lintas service. Sedangkan Span ID merupakan ID yang digunakan untuk mentracing internal service.\n\n# Implement Sleuth\n- Tambahkan dependency `spring-cloud-starter-sleuth` dan `spring-boot-starter-web`\n\n# Komunikasi Data antar Sleuth Client\n\n- Controller pada client pertama (jalan di port 8080)\n\n```java\n@RestController\npublic class SimpleController {\n\n    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);\n\n    @RequestMapping(\"/api/halo\")\n    public String halo (){\n        LOGGER.info(\"Sampai ke Server\")\n        return \"Halo ini dari Client Satu\";\n    }\n}\n```\n\n- Konfigurasi RestTemplate pada client kedua (jalan di port 8081)\n```java\n@Configuration\npublic class SimpleConfig {\n\n    @Bean\n    RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n```\n\nSletuh akan terinjek kedalam restTemplate lewat Bean di atas.\n\n\n- Controller pada client kedua\n```java\n@RestController\npublic class SimpleController {\n    @Autowired private RestTemplate restTemplate;\n    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);\n    @RequestMapping(\"/api/halo\")\n    public String halo(){\n        LOGGER.info(\"Sebelum sampai ke server\");\n        return restTemplate.getForObject(\"http://localhost:8080/api/halo\",String.class);\n        LOGGER.info(\"Setelah sampai ke server);\n    }\n}\n```","slug":"pemrograman/spring/microservice/distibused-tracing-sleuth/sleuth-for-distribused-tracing","published":1,"updated":"2017-08-20T02:02:49.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnqa005vislp985wa3gc","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Spring Cloud Netflix Sleuth digunakan untuk membuat log tracing antar service. Sleuth dalam melakukan tracing, dia menggunakan Trace ID dan Span ID. Trace ID merupakan id yang digunakan untuk mentracing lintas service. Sedangkan Span ID merupakan ID yang digunakan untuk mentracing internal service.</p>\n<h1 id=\"Implement-Sleuth\"><a href=\"#Implement-Sleuth\" class=\"headerlink\" title=\"Implement Sleuth\"></a>Implement Sleuth</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-sleuth</code> dan <code>spring-boot-starter-web</code></li>\n</ul>\n<h1 id=\"Komunikasi-Data-antar-Sleuth-Client\"><a href=\"#Komunikasi-Data-antar-Sleuth-Client\" class=\"headerlink\" title=\"Komunikasi Data antar Sleuth Client\"></a>Komunikasi Data antar Sleuth Client</h1><ul>\n<li>Controller pada client pertama (jalan di port 8080)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        LOGGER.info(<span class=\"string\">\"Sampai ke Server\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Halo ini dari Client Satu\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Konfigurasi RestTemplate pada client kedua (jalan di port 8081)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\">RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Sletuh akan terinjek kedalam restTemplate lewat Bean di atas.</p>\n<ul>\n<li>Controller pada client kedua<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class SimpleController &#123;</div><div class=\"line\">    @Autowired private RestTemplate restTemplate;</div><div class=\"line\">    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);</div><div class=\"line\">    @RequestMapping(\"/api/halo\")</div><div class=\"line\">    public String halo()&#123;</div><div class=\"line\">        LOGGER.info(\"Sebelum sampai ke server\");</div><div class=\"line\">        return restTemplate.getForObject(\"http://localhost:8080/api/halo\",String.class);</div><div class=\"line\">        LOGGER.info(\"Setelah sampai ke server);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<p>Spring Cloud Netflix Sleuth digunakan untuk membuat log tracing antar service. Sleuth dalam melakukan tracing, dia menggunakan Trace ID dan Span ID. Trace ID merupakan id yang digunakan untuk mentracing lintas service. Sedangkan Span ID merupakan ID yang digunakan untuk mentracing internal service.</p>\n<h1 id=\"Implement-Sleuth\"><a href=\"#Implement-Sleuth\" class=\"headerlink\" title=\"Implement Sleuth\"></a>Implement Sleuth</h1><ul>\n<li>Tambahkan dependency <code>spring-cloud-starter-sleuth</code> dan <code>spring-boot-starter-web</code></li>\n</ul>\n<h1 id=\"Komunikasi-Data-antar-Sleuth-Client\"><a href=\"#Komunikasi-Data-antar-Sleuth-Client\" class=\"headerlink\" title=\"Komunikasi Data antar Sleuth Client\"></a>Komunikasi Data antar Sleuth Client</h1><ul>\n<li>Controller pada client pertama (jalan di port 8080)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api/halo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">halo</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        LOGGER.info(<span class=\"string\">\"Sampai ke Server\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Halo ini dari Client Satu\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Konfigurasi RestTemplate pada client kedua (jalan di port 8081)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\">RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Sletuh akan terinjek kedalam restTemplate lewat Bean di atas.</p>\n<ul>\n<li>Controller pada client kedua<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@RestController</div><div class=\"line\">public class SimpleController &#123;</div><div class=\"line\">    @Autowired private RestTemplate restTemplate;</div><div class=\"line\">    org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this);</div><div class=\"line\">    @RequestMapping(\"/api/halo\")</div><div class=\"line\">    public String halo()&#123;</div><div class=\"line\">        LOGGER.info(\"Sebelum sampai ke server\");</div><div class=\"line\">        return restTemplate.getForObject(\"http://localhost:8080/api/halo\",String.class);</div><div class=\"line\">        LOGGER.info(\"Setelah sampai ke server);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Spring Config Service Security","date":"2017-08-15T03:08:41.000Z","_content":"\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Konfigurasi Config Server\n- Tambahkan dependency `Spring Security`\n- Tambahkan username dan password\n```yml\nsecurity:\n    user:\n        name: username\n        password: pass\n```\n\n# Konfigurasi Config Client\n- Tambahkan username dan password\n```yml\nspring:\n    cloud:\n        config: \n            username: username\n            password: pass\n```","source":"_posts/pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security.md","raw":"---\ntitle: Spring Config Service Security\ndate: 2017-08-15 10:08:41\ncategories:\n  - Pemrograman\n  - Spring\n---\n\n![](https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz)\n\n# Konfigurasi Config Server\n- Tambahkan dependency `Spring Security`\n- Tambahkan username dan password\n```yml\nsecurity:\n    user:\n        name: username\n        password: pass\n```\n\n# Konfigurasi Config Client\n- Tambahkan username dan password\n```yml\nspring:\n    cloud:\n        config: \n            username: username\n            password: pass\n```","slug":"pemrograman/spring/microservice/config-service/8-Spring-Config-Service-Security","published":1,"updated":"2017-08-15T03:23:06.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8stsnqc005wislp6mua8aj0","content":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Konfigurasi-Config-Server\"><a href=\"#Konfigurasi-Config-Server\" class=\"headerlink\" title=\"Konfigurasi Config Server\"></a>Konfigurasi Config Server</h1><ul>\n<li>Tambahkan dependency <code>Spring Security</code></li>\n<li>Tambahkan username dan password<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">    user:</span></div><div class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">username</span></div><div class=\"line\"><span class=\"attr\">        password:</span> <span class=\"string\">pass</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Konfigurasi-Config-Client\"><a href=\"#Konfigurasi-Config-Client\" class=\"headerlink\" title=\"Konfigurasi Config Client\"></a>Konfigurasi Config Client</h1><ul>\n<li>Tambahkan username dan password<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">    cloud:</span></div><div class=\"line\"><span class=\"attr\">        config:</span> </div><div class=\"line\"><span class=\"attr\">            username:</span> <span class=\"string\">username</span></div><div class=\"line\"><span class=\"attr\">            password:</span> <span class=\"string\">pass</span></div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"https://stocklogos-pd.s3.amazonaws.com/styles/logo-medium-alt/logos/image/1398937767-b70129ba6592929d32c0337c3eea2880.png?itok=NBZRaOhz\" alt=\"\"></p>\n<h1 id=\"Konfigurasi-Config-Server\"><a href=\"#Konfigurasi-Config-Server\" class=\"headerlink\" title=\"Konfigurasi Config Server\"></a>Konfigurasi Config Server</h1><ul>\n<li>Tambahkan dependency <code>Spring Security</code></li>\n<li>Tambahkan username dan password<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">    user:</span></div><div class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">username</span></div><div class=\"line\"><span class=\"attr\">        password:</span> <span class=\"string\">pass</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Konfigurasi-Config-Client\"><a href=\"#Konfigurasi-Config-Client\" class=\"headerlink\" title=\"Konfigurasi Config Client\"></a>Konfigurasi Config Client</h1><ul>\n<li>Tambahkan username dan password<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">    cloud:</span></div><div class=\"line\"><span class=\"attr\">        config:</span> </div><div class=\"line\"><span class=\"attr\">            username:</span> <span class=\"string\">username</span></div><div class=\"line\"><span class=\"attr\">            password:</span> <span class=\"string\">pass</span></div></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj8stsncd0003islpp64wiqq3","category_id":"cj8stsncj0004islpg56sype4","_id":"cj8stsncu0007islp593hlr5c"},{"post_id":"cj8stsngj000qislpeixsanzv","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnk5002jislp2xrmv2fi"},{"post_id":"cj8stsngj000qislpeixsanzv","category_id":"cj8stsnk2002hislp824xq238","_id":"cj8stsnk6002lislpric3oapg"},{"post_id":"cj8stsnhg0010islpqhv5k8xd","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnk7002mislp68fum906"},{"post_id":"cj8stsnhg0010islpqhv5k8xd","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnk8002oislpo9n9857d"},{"post_id":"cj8stsnhn0014islpfsdey26i","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnk9002pislphyofcfug"},{"post_id":"cj8stsnhn0014islpfsdey26i","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnka002rislponvsw30t"},{"post_id":"cj8stsnhq0017islpzjpbg496","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkb002sislp4v4p3rft"},{"post_id":"cj8stsnhq0017islpzjpbg496","category_id":"cj8stsnk2002hislp824xq238","_id":"cj8stsnkc002uislpkbxybame"},{"post_id":"cj8stsnhw001aislp4lmfxi9u","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkd002vislpmzdbsfqj"},{"post_id":"cj8stsnhw001aislp4lmfxi9u","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnke002xislpe4q6zcgh"},{"post_id":"cj8stsni6001cislpvymvng7r","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnke002yislpkm2d3472"},{"post_id":"cj8stsni6001cislpvymvng7r","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnkg0030islp3fsf3j6d"},{"post_id":"cj8stsnia001fislp6feqpf19","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkg0031islprdtigyp3"},{"post_id":"cj8stsnia001fislp6feqpf19","category_id":"cj8stsnkd002wislphq5nolro","_id":"cj8stsnki0033islpc2micqae"},{"post_id":"cj8stsniz001rislpt367eiu7","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnki0034islpe6xs2555"},{"post_id":"cj8stsniz001rislpt367eiu7","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnkk0036islpf18muea8"},{"post_id":"cj8stsnj3001uislpv0f4xt8n","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkl0037islp0rwj3pa5"},{"post_id":"cj8stsnj3001uislpv0f4xt8n","category_id":"cj8stsnkd002wislphq5nolro","_id":"cj8stsnkl0038islploutrx69"},{"post_id":"cj8stsnje001wislpfs7exyp0","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnkl0039islpygmwtluc"},{"post_id":"cj8stsnje001wislpfs7exyp0","category_id":"cj8stsnk3002iislpuqpm19w5","_id":"cj8stsnkm003aislpqqqs5h0z"},{"post_id":"cj8stsnlk003fislplggdfv3r","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnm3003kislpn889v4fm"},{"post_id":"cj8stsnlk003fislplggdfv3r","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnm9003nislpscmofsuk"},{"post_id":"cj8stsnl1003bislpyj0im8um","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnme003pislp7ek6kbrq"},{"post_id":"cj8stsnl1003bislpyj0im8um","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnmi003rislp68451om8"},{"post_id":"cj8stsnlt003gislpuz5cc3gw","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnmr003tislp99htfc3g"},{"post_id":"cj8stsnlt003gislpuz5cc3gw","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnmw003vislp6n2domb7"},{"post_id":"cj8stsnly003iislpa1wnpgyq","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnmz003xislppa8h829e"},{"post_id":"cj8stsnly003iislpa1wnpgyq","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnn2003zislpwlxcgfxr"},{"post_id":"cj8stsnl3003cislpym1ig67m","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnn70041islpb0lq2y28"},{"post_id":"cj8stsnl3003cislpym1ig67m","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnnc0043islpgr9ttf00"},{"post_id":"cj8stsnm1003jislpjjwc8kc4","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnni0045islpc2oqghrv"},{"post_id":"cj8stsnm1003jislpjjwc8kc4","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnno0047islp1ol61as3"},{"post_id":"cj8stsnm5003mislpi790cq24","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnnt0049islply082pgo"},{"post_id":"cj8stsnm5003mislpi790cq24","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnnw004bislpdp0372v1"},{"post_id":"cj8stsnld003dislpbjyk4d74","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnny004cislp5f75uluz"},{"post_id":"cj8stsnld003dislpbjyk4d74","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnnz004dislp997sobo3"},{"post_id":"cj8stsnmb003oislpubdahaw5","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno0004eislp9dgkhr9b"},{"post_id":"cj8stsnmb003oislpubdahaw5","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno0004fislpbmnd9wyj"},{"post_id":"cj8stsnmg003qislprx4fef6w","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno0004gislpvdu1n71p"},{"post_id":"cj8stsnmg003qislprx4fef6w","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno1004hislpjeh2c124"},{"post_id":"cj8stsnmm003sislpqjyc7tm3","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno1004iislpye7xumhi"},{"post_id":"cj8stsnmm003sislpqjyc7tm3","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno1004jislp343z4p1y"},{"post_id":"cj8stsnmu003uislpmohin2r6","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno1004kislp25oc1uux"},{"post_id":"cj8stsnmu003uislpmohin2r6","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno1004lislpseq6xeo9"},{"post_id":"cj8stsnmx003wislp76x73k5k","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno1004mislp2nkar5d7"},{"post_id":"cj8stsnmx003wislp76x73k5k","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno2004nislpsvd99vdn"},{"post_id":"cj8stsnn0003yislpxsba7i5n","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno2004oislpma9y1s9a"},{"post_id":"cj8stsnn0003yislpxsba7i5n","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno2004pislp7lap8ccw"},{"post_id":"cj8stsnn30040islp4gt6bwuu","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno2004qislpxrq8msei"},{"post_id":"cj8stsnn30040islp4gt6bwuu","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno2004rislpx1oq6w3l"},{"post_id":"cj8stsnn80042islp89sw7dg9","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno2004sislppko1bhgf"},{"post_id":"cj8stsnn80042islp89sw7dg9","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno4004tislp7vwhnend"},{"post_id":"cj8stsnnd0044islptqq6f8lu","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno4004uislph4uinc9c"},{"post_id":"cj8stsnnd0044islptqq6f8lu","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno5004vislpp6kl3ctc"},{"post_id":"cj8stsnnj0046islpqlvix5q4","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno5004wislpjtr4j720"},{"post_id":"cj8stsnnj0046islpqlvix5q4","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno6004xislpz0qsxotd"},{"post_id":"cj8stsnnr0048islps97sxr90","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno6004yislp6v584ys5"},{"post_id":"cj8stsnnr0048islps97sxr90","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno6004zislpraadq8v8"},{"post_id":"cj8stsnnu004aislpk90cc7m5","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsno60050islptnysozet"},{"post_id":"cj8stsnnu004aislpk90cc7m5","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsno60051islpzmozbt6e"},{"post_id":"cj8stsnoo0053islpasl1ilqx","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnp50057islpahh9eai4"},{"post_id":"cj8stsnoo0053islpasl1ilqx","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpd0059islpmicpwe4z"},{"post_id":"cj8stsnou0054islppqrdx7kf","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpj005bislppht9xaql"},{"post_id":"cj8stsnou0054islppqrdx7kf","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpn005dislpgxze79ft"},{"post_id":"cj8stsnoy0055islpdesmtwel","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpq005fislpz1m8kb1l"},{"post_id":"cj8stsnoy0055islpdesmtwel","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpu005hislpfxgk6744"},{"post_id":"cj8stsnp10056islpep9dmlhx","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpv005iislpeuw1y1d4"},{"post_id":"cj8stsnp10056islpep9dmlhx","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpw005jislpnrqc47l9"},{"post_id":"cj8stsnp70058islpskzz7bex","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpx005kislpp3nerlxa"},{"post_id":"cj8stsnp70058islpskzz7bex","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpx005lislpct3ngbkk"},{"post_id":"cj8stsnph005aislpqsqxi4ch","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpx005mislpmm420vug"},{"post_id":"cj8stsnph005aislpqsqxi4ch","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpy005nislpm0uoz5zf"},{"post_id":"cj8stsnpl005cislpsgsw0gxf","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpy005oislp1wsbxonx"},{"post_id":"cj8stsnpl005cislpsgsw0gxf","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpy005pislpuetjcvn9"},{"post_id":"cj8stsnpo005eislpgl0bufju","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpy005qislpvo64rydl"},{"post_id":"cj8stsnpo005eislpgl0bufju","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpy005rislppi4evmyb"},{"post_id":"cj8stsnps005gislplts4ud63","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnpy005sislp1jij9pt4"},{"post_id":"cj8stsnps005gislplts4ud63","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnpz005tislpo418y4g2"},{"post_id":"cj8stsnq8005uislpasl6cvrq","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnqs005xislpl5rdyuuc"},{"post_id":"cj8stsnq8005uislpasl6cvrq","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnqt005yislp5ywujyun"},{"post_id":"cj8stsnqa005vislp985wa3gc","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnqu005zislpp2tuwoz6"},{"post_id":"cj8stsnqa005vislp985wa3gc","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnqu0060islp30o7r787"},{"post_id":"cj8stsnqc005wislp6mua8aj0","category_id":"cj8stsnjg001yislpfu9mlh4i","_id":"cj8stsnqu0061islpln8c8h8o"},{"post_id":"cj8stsnqc005wislp6mua8aj0","category_id":"cj8stsnlh003eislpo49umadc","_id":"cj8stsnqw0062islpsvgkpn35"}],"PostTag":[{"post_id":"cj8stsncd0003islpp64wiqq3","tag_id":"cj8stsnco0005islp8j7xni3y","_id":"cj8stsncs0006islppj8p54vs"}],"Tag":[{"name":"linux","_id":"cj8stsnco0005islp8j7xni3y"},{"name":"ui-ux","_id":"cj8stsnfm000bislp5sci1914"},{"name":"komputer","_id":"cj8stsngu000sislp2j3c3cta"}]}}